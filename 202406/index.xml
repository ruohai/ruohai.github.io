<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202406s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202406/</link>
    <description>Recent content in 202406s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 21 Jun 2024 19:57:04 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202406/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>拉不动镜像？给Docker配置代理服务器</title>
      <link>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</link>
      <pubDate>Fri, 21 Jun 2024 19:57:04 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</guid>
      <description>已经写了两篇文章记录怎么在debian和openwrt上安装和使用v2raya，顺便再水一篇文章记录下怎么给docker配置代理服务器。
docker官网提供了简单直白的英文文档，如果英文阅读无障碍的话可以直接看原文：【Configure the daemon with systemd】
注意一下这个方法有个前提，就是docker的部署环境使用的是systemd，而不是sysv init或者openrc之类。
方法一：编辑daemon.json
注意使用这个方法需要自己的docker engine版本大于23.0，低于这个版本号只能用方法二。
可以用docker version命令查看自己机器上的docker版本号。
在/etc/docker目录下新建daemon.json文件，然后根据以下内容的格式录入自己的代理服务器信息。
{ &amp;#34;proxies&amp;#34;: { &amp;#34;http-proxy&amp;#34;: &amp;#34;http://proxy.example.com:3128&amp;#34;, &amp;#34;https-proxy&amp;#34;: &amp;#34;https://proxy.example.com:3129&amp;#34;, &amp;#34;no-proxy&amp;#34;: &amp;#34;*.test.example.com,.example.org,127.0.0.0/8&amp;#34; } } 方法二：编辑docker.service
如果docker engine版本低于23.0，或者上面的配置没有效果，可以用方法二。
先创建目录和文件
mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/http-proxy.conf 然后编辑http-proxy.conf文件，然后根据以下内容的格式录入自己的代理服务器信息。
[Service] Environment=&amp;#34;HTTP_PROXY=http://proxy.example.com:3128&amp;#34; Environment=&amp;#34;HTTPS_PROXY=https://proxy.example.com:3129&amp;#34; Environment=&amp;#34;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp&amp;#34; 最后一步
完成了方法一或者方法二的编辑以后，重启docker。
systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker.service 查看变更是否生效，可以用命令docker info
也可以用命令systemctl show --property=Environment docker
好了，到这里给docker配置代理服务器就完成了，再也不用担心docker pull拉不动镜像惹。
🎉</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装和运行V2RayA</title>
      <link>https://ruohai.wang/202406/v2raya-install-guide-on-openwrt/</link>
      <pubDate>Fri, 21 Jun 2024 15:30:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/v2raya-install-guide-on-openwrt/</guid>
      <description>前言 前两天在刷了armbian的迅雷赚钱宝二代（ws1508）上通过添加软件源的方式成功的运行了v2raya，这个15块钱的arm小盒子可以当作一个代理服务器用惹。
但我手上不是还有好几个迅雷赚钱宝一代（ws1408）么，只能刷3.10内核的魔改openwrt固件，我想着能不能在这个10块钱的电子垃圾上跑v2raya，因为v2ray core和v2raya都提供了各种硬件架构的二进制包，理论上只要把二进制包下载到本地就行了。
那废话不多多，开搞。
安装 第一步：v2ray-core
我用的是v2ray core，也可以用xray core替代。
项目地址：【v2fly/v2ray-core】
在release页面找到armv7的版本
用wget或者curl命令下载到本地以后解压，解压以后的文件结构大致如下
然后需要把v2ray-core添加到环境变量。赚钱宝一代这个openwrt添加环境变量需要编辑的文件是/etc/profile。
# 没有nano可以用vim nano /etc/profile 在path一栏按照格式添加在末尾即可。
编辑完成后保存推出，再用source /etc/profile让配置生效。
第二步：v2raya
项目地址：【v2rayA/v2rayA】。
在项目的release页面找到armv7版本的二进制包。
用wget或者curl下载到本地以后进行解压，记得用chmod +x命令授权。
然后就可以试运行v2rays惹，直接敲命令
./v2raya --config=/mnt/data/v2ray/config 在控制台可以看到日志信息，v2raya已经成功启动，web ui的访问地址也打印出来惹。
经过我的实际测试，虽然从日志看有一个TPOROXY无法载入的报错，但配置好代理以后是可以正常使用的。
那接下去就只需要把v2raya添加到系统服务并设置启动项就完成了。
第三步：配置sysvinit
v2raya自带了systemd的配置，官网的手册里也提供了openrc的脚本，理论上openrc应该兼容sysv，但我实测没法用，所以只能自己瞎写了。你如果要抄的话记得根据自己的情况修改文件路径。
先创建sysv配置文件
cd /etc/init.d touch v2raya chmod +x v2raya 然后编辑v2raya，粘贴以下代码：
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/v2ray/v2raya --config=/mnt/data/v2ray/config } stop() { kill $(pidof v2raya) } 然后启动服务 &amp;amp; 设置启动项
service v2raya start service v2raya enable 好了，到这里就完成在刷了openwrt的迅雷赚钱宝一代（ws1408）上安装和使用v2raya了，之后就可以把它当作一个代理使用，让它继续发光发热。</description>
    </item>
    
    <item>
      <title>在Debian上安装和使用V2Ray</title>
      <link>https://ruohai.wang/202406/v2ray-install-guide-on-armbian/</link>
      <pubDate>Thu, 20 Jun 2024 12:14:28 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/v2ray-install-guide-on-armbian/</guid>
      <description>最近因为国内彻底屏蔽了dockerhub以及各种国内镜像站，所以使用docker也成功加入了翻墙大礼包。我之前一直用过国内的一些镜像站，虽然也不太好用但我装的容器也就那么两三个，所以忍一下也能用，但至此只能另谋出路了。
我在pc上一直用的v2rayn的客户端，所以可以通过配置局域网代理让docker正可以正常的拉去镜像
# 首先新建目录和文件 mkdir -p /etc/systemd/system/docker.service.d vim /etc/systemd/system/docker.service.d/http-proxy.conf # 然后在文件中粘贴以下内容, 注意代理地址需要换成你自己服务器的内网 ip 和代理端口 [Service] Environment=&amp;#34;HTTP_PROXY=http://192.168.8.125:10819&amp;#34; Environment=&amp;#34;HTTPS_PROXY=http://192.168.8.125:10819&amp;#34; Environment=&amp;#34;NO_PROXY=your-registry.com,10.10.10.10,*.example.com&amp;#34; # 重启 docker systemctl daemon-reload systemctl restart docker # 检查环境变量是否生效 systemctl show --property=Environment docker 但我的pc并不是24小时开机，而且ip也不固定，所以想着把v2ray部署到arm小盒子上去。这个时候很多捡垃圾玩家可能就直接上openwrt了，但我不想折腾openwrt也不想增加局域网内的网络复杂度，只是想简单部署一个v2ray用作docker的代理，就像pc电脑上装一个v2rayn那样。
经过一番搜索，最后确定使用v2ray core + v2raya web ui的方案。
【v2rayA/v2rayA】项目的官方文档提供了很多种安装方法的指导，我选择了直接添加软件源。
# 添加公钥 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc # 添加软件源 echo &amp;#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&amp;#34; | sudo tee /etc/apt/sources.list.d/v2raya.list # 更新 &amp;amp; 安装 sudo apt update &amp;amp;&amp;amp; sudo apt install v2ray v2raya -y # 启动 &amp;amp; 添加启动项 sudo systemctl enable --now v2raya.</description>
    </item>
    
    <item>
      <title>使用acme.sh获取Let&#39;s Encrypt免费数字证书</title>
      <link>https://ruohai.wang/202406/lets-encrypt-get-ssl-cert-by-bash/</link>
      <pubDate>Wed, 19 Jun 2024 04:09:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/lets-encrypt-get-ssl-cert-by-bash/</guid>
      <description>前言 我之前用的ssl证书买阿里云域名送的免费证书，有效期一年，有效期还剩150天。
但去年底很多云服务厂家调整了规则，新申请的免费证书有效期只有三个月，续费的话不清楚是否也是免费三个月，所谓未雨绸缪，我也要考虑下其它免费证书的方案，比如let&amp;rsquo;s encrypt。
申请let&amp;rsquo;s encrypt证书，官方默认推荐certbot的进行证书的自动申请、安装，但使用certbot需要安装snapd，这个方法跳过。
最后我选择了acme.sh，因为网上可以参考的方案比较多，出问题比较容易debug。
参考文章 用acme.sh完成let&amp;rsquo;s encrypt数字证书的申请、验证、安装，网上已经有非常完善的教程，我参考的主要是这几篇：
【acmesh-official/acme.sh】 【How to install】 【如何使用acme.sh与阿里云DNS自动签发Let’s Encrypt的免费数字证书】 基本上按照以上三篇文章中记录的步骤操作，就可以成功搞定。
我碰到的一些坑 网上的教程文章虽然很完善，但我在实际部署的过程中还是碰到了一些bug，这是我写这篇博客的主要原因，做个记录，方便日后debug。
问题一：中国特色的网络问题
在第一步获取acme.sh脚本的时候就碰到了问题，中国特色的网络问题，无论是默认的https://get.acme.sh还是备用的https://raw.githubusercontent.com/acmesh-official/acme.sh/master/acme.sh都提示无法连接。
这只是个小问题，自行解决即可。
也可以在有代理的电脑上访问以上链接，下载脚本以后用scp上传到服务器，记得chmod +x acme.sh授权，然后用以下命令执行脚本
./acme.sh --install -m my@example.com 执行完成后记得敲source .bashrc命令让新建的alias生效。
问题二：验证方式
验证有两个方法，http或者dns。
http方式需要指定网站根目录，我因为是用了一个跳板机（nginx转发请求到另一个机器），网站和nginx并不是在同一个服务器，尝试了许久都没有用http方式验证成功。
后来换用dns验证，我的dns服务器上是aliyun，在获取到aliyun的access key并配置以后，执行以下命令
acme.sh --issue --dns dns_ali -d ruohai.wang -d *.ruohai.wang 这个时候我又碰到了报错：can not find dns api hook for dns_ali
这个报错要临时解决的话倒也简单，红字提醒部分已经给出了方案，就是自己手动增加两个dns解析记录就行了。
验证成功以后，申请证书的流程就可以跑完了，最后成功的提示内容如下：
问题三：证书配置
我用的web服务器是nginx，我们要用的证书文件是就是前两个，fullchain.cer和ruohai.wang.key。可以在nginx目录下新建目录放这俩证书。
直接贴出配置文件吧（只保留了ssl有关的部分）
server { listen 443 ssl; server_name ruohai.wang; ssl_certificate /path/to/fullchain.cer; ssl_certificate_key /path/to/ruohai.wang.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!</description>
    </item>
    
    <item>
      <title>Uptime Kuma异常报错getaddrinfo EAI_AGAIN的处理</title>
      <link>https://ruohai.wang/202406/uptime-kuma-error-solve/</link>
      <pubDate>Tue, 18 Jun 2024 20:11:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/uptime-kuma-error-solve/</guid>
      <description>好几次想在自己的小主机上用docke方式部署uptime kuma来检测自己部署的几个服务的可用状态，但几乎每次都碰到同一个问题：getaddrinfo EAI_AGAIN。
网上也搜了好久的错误原因和解决方案，有得说网络问题，有的说dns解析问题。我也在项目的github仓库查看了大量的类似issues，但都没有找到有用的解决方案。
我觉得可能是我检测的几个服务都是套了cloudflare tunnel的缘故，但实测检测baidu.com这个域名也会报同样的错误。
因为一直没有debug的思路，所以我就放弃了uptime kuma。
但是今天写这篇文章，就是因为我知道这个报错的原因了！
先说一下我的部署方式：x86_64平台的debian，防火墙ufw，docker-compose方式部署，network_mode方式是默认的bridge。
出现getaddrinfo EAI_AGAIN的原因就是docker默认部署的应用都是network_mode:bridge，改成host模式就没问题了。
不过有一点要注意，network_mode改成host模式以后就不支持端口映射了，默认是3001端口，如果装了防火墙的话记得放行端口号。</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上运行Cloudflared</title>
      <link>https://ruohai.wang/202406/cloudflared-install-on-openwrt/</link>
      <pubDate>Wed, 05 Jun 2024 13:25:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/cloudflared-install-on-openwrt/</guid>
      <description>上个月已经写过一篇博客记录怎么在刷了openwrt固件的迅雷赚钱宝一代上面运行cloudflared，但是写那篇文章的时候对sysvint的脚本完全不熟悉，只是照虎画猫（现在也没有什么进步😂），但经过这一段时间的debug，发现了（看上去）没什么问题的运行方式，所以更新一下。
首先还是找到cloudflared的github仓库主页【cloudflare/cloudflared】，在release页面找到预编译的适配各硬件平台的二进制包。迅雷赚钱宝一代可以用arm或者armhf，我选择用armhf。
ssh连上openwrt，下载到本地
# 下载 wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/download/2024.6.0/cloudflared-linux-armhf # 授权 chmod +x cloudflared 然后在/etc/init.d目录下新建cloudflared文件，录入以下内容，注意我的cloudflared文件路径是/mnt/data/cloudflared/cloudflared，还有token的值，都需要你根据自己的情况修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/cloudflared/cloudflared --pidfile /var/run/cloudflared.pid --autoupdate-freq 24h0m0s tunnel run --token [你的token] } stop() { kill $(pidof cloudflared) } 保存文件后退出，记得chmod +x cloudflared授权。
然后启动并添加开机启动项即可。
# 启动 service cloudflared start # 添加启动项 service cloudflared enable 注意我的sysvinit脚本中没有只适配了start和stop两个命令，其它的restart、status没有适配，有需求的话可以自行增加代码。
🎉</description>
    </item>
    
  </channel>
</rss>
