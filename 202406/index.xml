<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202406s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202406/</link>
    <description>Recent content in 202406s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 26 Jun 2024 21:20:25 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202406/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>联合文件系统mergerfs的安装和配置</title>
      <link>https://ruohai.wang/202406/mergerfs-install-and-config-guide/</link>
      <pubDate>Wed, 26 Jun 2024 21:20:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/mergerfs-install-and-config-guide/</guid>
      <description>前言 最近看到chiphell论坛一个网友分享的【基于Debian搭建的HomeNAS玩法】，文中提到了软raid、联合文件系统、snapraid三个方案。
软raid我知道，就是mdadm，而且我已经用五盘位无raid硬盘柜搭配任意一个能刷armbian的小盒子当host来实现了raid5阵列。mergerfs我也知道，之前在玩客云上装casaos的时候用过这个功能，可以把多个存储空间合并成一个使用。但snapraid我完全不了解，看名称像是给raid阵列做快照用的。
那看到了新的知识点，正好学习研究一下，看能不能应用到自己的使用场景里。这篇文章只记录联合文件系统的内容。
使用场景 联合文件系统有很多个软件方案，在debian的apt仓库里搜unionfs就有三个方案。
因为我搜到的教程文档关于mergerfs比较多，而且casaos也用的mergrefs方案，所以我选择也是mergerfs。
mergerfs有点类似unraid的存储池方案，把多个硬盘组合到一起成为一个大容量的存储池，那它和raid的区别是什么？
最大的区别就是，raid阵列是一个整体，往raid中写入文件，是把文件碎成多个文件块分散存储到阵列中的每个硬盘上，单独抽出一块硬盘没法读取数据。mergerfs是把多个已有文件系统的硬盘（比如ext4/btrfs/ntfs）通过软件整合成一个虚拟盘，往这个虚拟盘保存文件，文件是完整的保存到其中一个硬盘上，单独抽取一块硬盘，这块硬盘也可以插到任何支持ext4的机器上继续使用和读取数据。 raid除了raid0，其它raid5/raid6/raid10一般都要求硬盘容量相同(如果硬盘容量不同的话会以最小容量的盘作为标准），但mergerfs没有这个限制，可以200GB硬盘和1TB的硬盘拼成一个1.2TB的存储池。 mergerfs和raid0的区别，raid0没有数据冗余，一损俱损。mergerfs也没有数据冗余，但一损只损一，存储池中的其它硬盘不受影响。 mergerfs的扩容非常方便，只需要把新硬盘添加到mergerfs存储池即可。如果raid要扩容，🤔，比如raid5/6，每加一块硬盘就要整个阵列重建，比如把一个2TB * 4的阵列扩容成4TB * 4的阵列，至少需要重建5次才能完成（换盘4次 + resize一次），这对硬盘寿命和数据安全是一个非常严峻的考验。 组raid，或者往raid中加新硬盘，硬盘都需要先格式化清空数据。mergerfs不需要，可以把已经有数据的硬盘添加到mergerfs存储池中，文件依然存在。 mergerfs存储池的硬盘i/o性能就是单盘的性能，而raid是可以多盘的i/o性能叠加。 那mergerfs可不可以实现像raid一样的数据冗余？可以的，搭配snapraid就可以实现，后续有空的我再写，😂。
安装 &amp;amp; 配置 第一步：安装
这步没啥好说的，apt一把梭。
apt install mergerfs 第二部：配置
假定有三块硬盘，sdb1、sdc1、sdd1，现在准备用这三块硬盘组件mergerfs存储池。
首先需要把三个硬盘挂载到系统，假定挂载信息如下
/dev/sdb1 /mnt/disk1 /dev/sdc1 /mnt/disk2 /dev/sdd1 /mnt/disk3 然后用mergerfs把三个硬盘添加到一个存储池，假定新存储池的挂载点是/mnt/vpool。
mergerfs -o defaults,minfreespace=100M,allow_other /mnt/disk1:/mnt/disk2:/mnt/disk3 /mnt/vpool 参数释疑：
defaults：挂载文件系统的默认参数 minfreespace=100M：存储池中剩余容量小于100MB的硬盘会跳过使用 allow_other：允许其它用户访问虚拟磁盘 /mnt/disk1:/mnt/disk2:/mnt/disk3：需要加入存储池的三块硬盘 /mnt/vpool：存储池的挂载点 网上的其它教程文章中，一般还会加上use_ino/gnorepponrename=true/moveonenospc=true，这些参数的具体意思可以参考mergerfs的github仓库中的手册，根据自己的需求添加。其中allow_other从2.35.0版本之后已经是默认启用了，如果你的mergerfs版本高于2.35.0，这个参数可以不用加。
执行以上命令以后，就可以看到文件系统中多出了一个集合了三个硬盘容量的新的虚拟硬盘/mnt/vpool。
也可以把挂载信息写到/etc/fstab中，这样开机就会自动挂载。
# mergerfs /mnt/disk1:/mnt/disk2:/mnt/disk3 /mnt/vpool mergerfs defaults,minfreespace=100M,allow_other 0 0 然后记得重载让配置生效
# 重载配置 systemctl daemon-reload # 自动挂载 systemctl mount -a 读写文件 往/mnt/vpool中写入一个文件，默认规则是按照存储池中几个硬盘的剩余可用空间大小，按照从大往小的规则进行使用，也就是优先使用可用存储空间最大的那个硬盘。</description>
    </item>
    
    <item>
      <title>在Armbian上安装miniDLNA</title>
      <link>https://ruohai.wang/202406/minidlna-install-on-armbian/</link>
      <pubDate>Wed, 26 Jun 2024 14:11:28 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/minidlna-install-on-armbian/</guid>
      <description>前言 之前已经写过一篇了，但也懒得在旧文上更新，所以重写一篇。
局域网内影视资源的共享与播放，其实samba已经能够胜任。但minidlna也有好处，就是对移动端的支持会更好一些，很多app基本上是打开媒体库就能看到局域网内的minidlna，点击就能直接播放。很多移动设备对samba协议的支持都比较垃圾，而且如果samba没开启匿名访问的话，移动端对登录samba输入身份信息的支持会更烂。
不过minidlna也不那么完美，比如对字幕的支持就不是很好。所以minidlna和samba可以作为互补。
安装 第一步：安装
armbian的apt仓库就有minidlna，所以直接apt一把梭就行了。不过要注意minidlna的安装大概需要占用100~200MB的存储空间，如果你的armbian小盒子存储空间比较紧张的话，请提前预留足够的存储空间。
apt install minidlna 第二步：配置
minidlna安装好以后默认是以minidlan:minidlna的用户&amp;amp;组运行，这会有一些权限问题，比如没有权限扫描媒体文件库之类。
所以首先要配置minidlna运行的用户&amp;amp;组。
nano /lib/systemd/system/minidlna.service 修改下图位置中的两个参数即可，比如我用的是ruohai这个普通账号。当然了你直接用root也行，能省去很多麻烦。
然后要配置媒体库、端口号之类
nano /etc/minidlna.conf 有以下几个参数需要调整：
media_dir，媒体库，需要指向自己存放视频、音频的文件夹 db_dir，数据库，这个是minidlna用来存放扫描媒体库以后的数据信息，默认是/var/cache/minidlna，可以改成自己喜欢的目录。因为有些系统（比如openwrt）的/var目录实际指向的是/tmp，是一个临时目录，重启以后这个临时目录下的数据都会清空，导致每次系统重启以后minidlna媒体库信息丢失。 log_dir，日志文件目录，这个根据自己喜好，用默认的就行 port，端口号，如果系统装了防火墙的话记得放心这个端口，默认是8200 friendly_name，服务名称，局域网内看到的minidlna的名称，默认是hostname:username，可以根据自己喜好修改 这里有一点要注意，因为minidlna安装好以后是直接启用的，所以默认的db_dir和log_dir路径下都已经创建好了文件夹，而且所属用户&amp;amp;组都是默认的minidlna。如果你和我一样把minidlna的服务运行用户修改成了非root普通账号，而且db_dir和log_dir用的还是默认路径，那需要自己手动修改这俩目录的所属用户&amp;amp;组，要不然会报权限错误。比如我用的是非root的普通账户ruohai来跑minidlna，那就要如下进行修改。
# 修改db_dir数据库目录的权限 chown -R ruohai:ruohai /var/cache/minidlna # 修改log_dir日志目录的权限 chown -R ruohai:ruohai /var/log/minidlna 完成以上几处修改以后，就可以重启服务让配置生效了。
# 重载配置 systemctl daemon-relolad # 重启minidlna systemctl restat minidlna.service 重启成功以后，可以在浏览器中方位http://host-ip:8200查看minidlna的状态。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>Cpolar在Armbian和OpenWrt上的安装步骤分解</title>
      <link>https://ruohai.wang/202406/cpolar-install-guide/</link>
      <pubDate>Mon, 24 Jun 2024 20:33:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/cpolar-install-guide/</guid>
      <description>前言 看别人折腾电子垃圾盒子的视频知道了cpolar这个服务，免费账户可以薅一个1Mbps小水管、随机字符&amp;amp;24小时有效的二级域名。
在自己的arm小盒子上安装体验了会，单说这免费的羊毛，可以作为一个应急备用的内网穿透方案，没法重用。不管是想固定二级域名，还是绑定自定义域名，订阅的费用都已经超过了自己买一个gia cn2网络的海外vps了。
cpolar官网提供了很多文档和手册，没啥阅读障碍的话跟着官网手册一步步操作就行了。
但我为啥要多此一举写这篇文章呢，🤔，因为官方的手册在有一些步骤比较模糊，而且官方推荐使用的是一键脚本。我因为手上既有openwrt的盒子，也有armbian的盒子，在部署的过程中经常有一些需要自定义的地方，所以做个简单记录，方便以后回溯。
安装 第一步：下载
第一步肯定是找到适配自己硬件平台的安装包了。
我手上的硬件已经是大家的老朋友，迅雷赚钱宝一代（ws1408），系统是3.10内核的openwrt。
另一个是硬件是迅雷赚钱宝二代（ws1508），系统是armbian。
这俩硬件的cpu都是arm32/armv7/armhf架构的amlogic s805，下载arm32版本的安装包即可。
使用wget或者curl下载到本地，然后用unzip解压。如果提示unzip没有安装，openwrt的软件仓库里就有，debian的apt仓库里也有。
# 下载 wget -O cpolar-stable-linux-arm.zip https://www.cpolar.com/static/downloads/releases/3.3.12/cpolar-stable-linux-arm.zip # 解压 unzip cpolar-stable-linux-arm.zip 解压以后得到一个已经有可执行权限的二进制包cpolar，如果没有权限可以chmod +x cpolar授权。
可以把cpolar添加到环境变量。这里以openwrt为例，编辑/etc/profile文件，在PATH一栏的最后，按照格式加上cpolar的文件路径即可。
添加完成后，用命令source /etc/profile让配置生效。
想要验证配置是否生效，直接敲命令cpolar version，查看终端是否正确输出cpolar的版本信息即可。
第二步：验证
这一步很简单，官网手册也写的很明白。在官网的控制台，复制自己的token，或者直接复制命令，然后在本地执行即可。如果你和我一样已经配置了cpolar的环境变量，这一步就不需要敲前面的./了。
cpolar authtoken [token] 验证成功以后，默认的配置文件路径会保存在$home/.cpolar路径下。我这里是直接用的root账户，所以是/root/.cpolar。
第三步：启动web ui
这一步，不知道官方是有意还是无意，在手册和文档中都跳过了。根据官网提供的一键安装脚本方案，如果是systemd，只需要systemctl start/enable就行了，但我想装在openwrt上，sysv init脚本得自己写，所以在这一步就得自己琢磨。
现在具体说说怎么启动cpolar的web ui。根据官网一键安装脚本中的代码，提取出systemd模式下启动cpolar daemon的命令如下
cpolar start-all -dashboard=on -daemon=on -config=/usr/local/etc/cpolar/cpolar.yml -log=/var/log/cpolar/access.log 那我们只需要照葫芦画瓢，简单改动一下适配sysv init就行了，注意config参数指向的的cpolar.yml配置文件路径要根据自己的情况进行修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/cpolar/cpolar start-all -dashboard=on -daemon=on -config=/root/.cpolar/cpolar.yml -log=/var/log/cpolar/access.log } stop() { kill $(pidof cpolar) } 把上面的代码保存到/etc/init.</description>
    </item>
    
    <item>
      <title>拉不动镜像？给Docker配置代理服务器</title>
      <link>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</link>
      <pubDate>Fri, 21 Jun 2024 19:57:04 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</guid>
      <description>已经写了两篇文章记录怎么在debian和openwrt上安装和使用v2raya，顺便再水一篇文章记录下怎么给docker配置代理服务器。
docker官网提供了简单直白的英文文档，如果英文阅读无障碍的话可以直接看原文：【Configure the daemon with systemd】
注意一下这个方法有个前提，就是docker的部署环境使用的是systemd，而不是sysv init或者openrc之类。
方法一：编辑daemon.json
注意使用这个方法需要自己的docker engine版本大于23.0，低于这个版本号只能用方法二。
可以用docker version命令查看自己机器上的docker版本号。
在/etc/docker目录下新建daemon.json文件，然后根据以下内容的格式录入自己的代理服务器信息。
{ &amp;#34;proxies&amp;#34;: { &amp;#34;http-proxy&amp;#34;: &amp;#34;http://proxy.example.com:3128&amp;#34;, &amp;#34;https-proxy&amp;#34;: &amp;#34;https://proxy.example.com:3129&amp;#34;, &amp;#34;no-proxy&amp;#34;: &amp;#34;*.test.example.com,.example.org,127.0.0.0/8&amp;#34; } } 方法二：编辑docker.service
如果docker engine版本低于23.0，或者上面的配置没有效果，可以用方法二。
先创建目录和文件
mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/http-proxy.conf 然后编辑http-proxy.conf文件，然后根据以下内容的格式录入自己的代理服务器信息。
[Service] Environment=&amp;#34;HTTP_PROXY=http://proxy.example.com:3128&amp;#34; Environment=&amp;#34;HTTPS_PROXY=https://proxy.example.com:3129&amp;#34; Environment=&amp;#34;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp&amp;#34; 最后一步
完成了方法一或者方法二的编辑以后，重启docker。
systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker.service 查看变更是否生效，可以用命令docker info
也可以用命令systemctl show --property=Environment docker
好了，到这里给docker配置代理服务器就完成了，再也不用担心docker pull拉不动镜像惹。
🎉
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装和运行V2RayA</title>
      <link>https://ruohai.wang/202406/v2raya-install-guide-on-openwrt/</link>
      <pubDate>Fri, 21 Jun 2024 15:30:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/v2raya-install-guide-on-openwrt/</guid>
      <description>前言 前两天在刷了armbian的迅雷赚钱宝二代（ws1508）上通过添加软件源的方式成功的运行了v2raya，这个15块钱的arm小盒子可以当作一个代理服务器用惹。
但我手上不是还有好几个迅雷赚钱宝一代（ws1408）么，只能刷3.10内核的魔改openwrt固件，我想着能不能在这个10块钱的电子垃圾上跑v2raya，因为v2ray core和v2raya都提供了各种硬件架构的二进制包，理论上只要把二进制包下载到本地就行了。
那废话不多多，开搞。
安装 第一步：v2ray-core
我用的是v2ray core，也可以用xray core替代。
项目地址：【v2fly/v2ray-core】
在release页面找到armv7的版本
用wget或者curl命令下载到本地以后解压，解压以后的文件结构大致如下
然后需要把v2ray-core添加到环境变量。赚钱宝一代这个openwrt添加环境变量需要编辑的文件是/etc/profile。
# 没有nano可以用vim nano /etc/profile 在path一栏按照格式添加在末尾即可。
编辑完成后保存推出，再用source /etc/profile让配置生效。
第二步：v2raya
项目地址：【v2rayA/v2rayA】。
在项目的release页面找到armv7版本的二进制包。
用wget或者curl下载到本地以后进行解压，记得用chmod +x命令授权。
然后就可以试运行v2rays惹，直接敲命令
./v2raya --config=/mnt/data/v2ray/config 在控制台可以看到日志信息，v2raya已经成功启动，web ui的访问地址也打印出来惹。
从日志看有一个TPOROXY无法载入的报错，有两个解决办法。方法一就是透明代理的模式使用redirect，这样就不需要用到tproxy模块了，方法二就是给openwrt安装tproxy模块，根据网上找到的内容，需要安装以下依赖
opkg install kmod-ipt-tproxy iptables-mod-tproxy bind-dig 那接下去就只需要把v2raya添加到系统服务并设置启动项就完成了。
第三步：配置sysvinit
v2raya自带了systemd的配置，官网的手册里也提供了openrc的脚本，理论上openrc应该兼容sysv，但我实测没法用，所以只能自己瞎写了。你如果要抄的话记得根据自己的情况修改文件路径。
先创建sysv配置文件
cd /etc/init.d touch v2raya chmod +x v2raya 然后编辑v2raya，粘贴以下代码：
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/v2ray/v2raya --config=/mnt/data/v2ray/config } stop() { kill $(pidof v2raya) } 然后启动服务 &amp;amp; 设置启动项</description>
    </item>
    
    <item>
      <title>在Debian上安装和使用V2Ray</title>
      <link>https://ruohai.wang/202406/v2ray-install-guide-on-armbian/</link>
      <pubDate>Thu, 20 Jun 2024 12:14:28 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/v2ray-install-guide-on-armbian/</guid>
      <description>最近因为国内彻底屏蔽了dockerhub以及各种国内镜像站，所以使用docker也成功加入了翻墙大礼包。我之前一直用过国内的一些镜像站，虽然也不太好用但我装的容器也就那么两三个，所以忍一下也能用，但至此只能另谋出路了。
我在pc上一直用的v2rayn的客户端，所以可以通过配置局域网代理让docker正可以正常的拉去镜像
# 首先新建目录和文件 mkdir -p /etc/systemd/system/docker.service.d vim /etc/systemd/system/docker.service.d/http-proxy.conf # 然后在文件中粘贴以下内容, 注意代理地址需要换成你自己服务器的内网 ip 和代理端口 [Service] Environment=&amp;#34;HTTP_PROXY=http://192.168.8.125:10819&amp;#34; Environment=&amp;#34;HTTPS_PROXY=http://192.168.8.125:10819&amp;#34; Environment=&amp;#34;NO_PROXY=your-registry.com,10.10.10.10,*.example.com&amp;#34; # 重启 docker systemctl daemon-reload systemctl restart docker # 检查环境变量是否生效 systemctl show --property=Environment docker 但我的pc并不是24小时开机，而且ip也不固定，所以想着把v2ray部署到arm小盒子上去。这个时候很多捡垃圾玩家可能就直接上openwrt了，但我不想折腾openwrt也不想增加局域网内的网络复杂度，只是想简单部署一个v2ray用作docker的代理，就像pc电脑上装一个v2rayn那样。
经过一番搜索，最后确定使用v2ray core + v2raya web ui的方案。
【v2rayA/v2rayA】项目的官方文档提供了很多种安装方法的指导，我选择了直接添加软件源。
# 添加公钥 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc # 添加软件源 echo &amp;#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&amp;#34; | sudo tee /etc/apt/sources.list.d/v2raya.list # 更新 &amp;amp; 安装 sudo apt update &amp;amp;&amp;amp; sudo apt install v2ray v2raya -y # 启动 &amp;amp; 添加启动项 sudo systemctl enable --now v2raya.</description>
    </item>
    
    <item>
      <title>使用acme.sh获取Let&#39;s Encrypt免费数字证书</title>
      <link>https://ruohai.wang/202406/lets-encrypt-get-ssl-cert-by-bash/</link>
      <pubDate>Wed, 19 Jun 2024 04:09:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/lets-encrypt-get-ssl-cert-by-bash/</guid>
      <description>前言 我之前用的ssl证书买阿里云域名送的免费证书，有效期一年，有效期还剩150天。
但去年底很多云服务厂家调整了规则，新申请的免费证书有效期只有三个月，续费的话不清楚是否也是免费三个月，所谓未雨绸缪，我也要考虑下其它免费证书的方案，比如let&amp;rsquo;s encrypt。
申请let&amp;rsquo;s encrypt证书，官方默认推荐certbot的进行证书的自动申请、安装，但使用certbot需要安装snapd，这个方法跳过。
最后我选择了acme.sh，因为网上可以参考的方案比较多，出问题比较容易debug。
参考文章 用acme.sh完成let&amp;rsquo;s encrypt数字证书的申请、验证、安装，网上已经有非常完善的教程，我参考的主要是这几篇：
【acmesh-official/acme.sh】 【How to install】 【如何使用acme.sh与阿里云DNS自动签发Let’s Encrypt的免费数字证书】 基本上按照以上三篇文章中记录的步骤操作，就可以成功搞定。
我碰到的一些坑 网上的教程文章虽然很完善，但我在实际部署的过程中还是碰到了一些bug，这是我写这篇博客的主要原因，做个记录，方便日后debug。
问题一：中国特色的网络问题
在第一步获取acme.sh脚本的时候就碰到了问题，中国特色的网络问题，无论是默认的https://get.acme.sh还是备用的https://raw.githubusercontent.com/acmesh-official/acme.sh/master/acme.sh都提示无法连接。
这只是个小问题，自行解决即可。
也可以在有代理的电脑上访问以上链接，下载脚本以后用scp上传到服务器，记得chmod +x acme.sh授权，然后用以下命令执行脚本
./acme.sh --install -m my@example.com 执行完成后记得敲source .bashrc命令让新建的alias生效。
问题二：验证方式
验证有两个方法，http或者dns。
http方式需要指定网站根目录，我因为是用了一个跳板机（nginx转发请求到另一个机器），网站和nginx并不是在同一个服务器，尝试了许久都没有用http方式验证成功。
后来换用dns验证，我的dns服务器上是aliyun，在获取到aliyun的access key并配置以后，执行以下命令
acme.sh --issue --dns dns_ali -d ruohai.wang -d *.ruohai.wang 这个时候我又碰到了报错：can not find dns api hook for dns_ali
这个报错要临时解决的话倒也简单，红字提醒部分已经给出了方案，就是自己手动增加两个dns解析记录就行了。
验证成功以后，申请证书的流程就可以跑完了，最后成功的提示内容如下：
问题三：证书配置
我用的web服务器是nginx，我们要用的证书文件是就是前两个，fullchain.cer和ruohai.wang.key。可以在nginx目录下新建目录放这俩证书。
直接贴出配置文件吧（只保留了ssl有关的部分）
server { listen 443 ssl; server_name ruohai.wang; ssl_certificate /path/to/fullchain.cer; ssl_certificate_key /path/to/ruohai.wang.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!</description>
    </item>
    
    <item>
      <title>Uptime Kuma异常报错getaddrinfo EAI_AGAIN的处理</title>
      <link>https://ruohai.wang/202406/uptime-kuma-error-solve/</link>
      <pubDate>Tue, 18 Jun 2024 20:11:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/uptime-kuma-error-solve/</guid>
      <description>好几次想在自己的小主机上用docke方式部署uptime kuma来检测自己部署的几个服务的可用状态，但几乎每次都碰到同一个问题：getaddrinfo EAI_AGAIN。
网上也搜了好久的错误原因和解决方案，有得说网络问题，有的说dns解析问题。我也在项目的github仓库查看了大量的类似issues，但都没有找到有用的解决方案。
我觉得可能是我检测的几个服务都是套了cloudflare tunnel的缘故，但实测检测baidu.com这个域名也会报同样的错误。
因为一直没有debug的思路，所以我就放弃了uptime kuma。
但是今天写这篇文章，就是因为我知道这个报错的原因了！
先说一下我的部署方式：x86_64平台的debian，防火墙ufw，docker-compose方式部署，network_mode方式是默认的bridge。
出现getaddrinfo EAI_AGAIN的原因就是docker默认部署的应用都是network_mode:bridge，改成host模式就没问题了。
不过有一点要注意，network_mode改成host模式以后就不支持端口映射了，默认是3001端口，如果装了防火墙的话记得放行端口号。</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上运行Cloudflared</title>
      <link>https://ruohai.wang/202406/cloudflared-install-on-openwrt/</link>
      <pubDate>Wed, 05 Jun 2024 13:25:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/cloudflared-install-on-openwrt/</guid>
      <description>上个月已经写过一篇博客记录怎么在刷了openwrt固件的迅雷赚钱宝一代上面运行cloudflared，但是写那篇文章的时候对sysvint的脚本完全不熟悉，只是照虎画猫（现在也没有什么进步😂），但经过这一段时间的debug，发现了（看上去）没什么问题的运行方式，所以更新一下。
首先还是找到cloudflared的github仓库主页【cloudflare/cloudflared】，在release页面找到预编译的适配各硬件平台的二进制包。迅雷赚钱宝一代可以用arm或者armhf，我选择用armhf。
ssh连上openwrt，下载到本地
# 下载 wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/download/2024.6.0/cloudflared-linux-armhf # 授权 chmod +x cloudflared 然后在/etc/init.d目录下新建cloudflared文件，录入以下内容，注意我的cloudflared文件路径是/mnt/data/cloudflared/cloudflared，还有token的值，都需要你根据自己的情况修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/cloudflared/cloudflared --pidfile /var/run/cloudflared.pid --autoupdate-freq 24h0m0s tunnel run --token [你的token] } stop() { kill $(pidof cloudflared) } 保存文件后退出，记得chmod +x cloudflared授权。
然后启动并添加开机启动项即可。
# 启动 service cloudflared start # 添加启动项 service cloudflared enable 注意我的sysvinit脚本中没有只适配了start和stop两个命令，其它的restart、status没有适配，有需求的话可以自行增加代码。
🎉</description>
    </item>
    
  </channel>
</rss>
