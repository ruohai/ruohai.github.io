<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202401s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202401/</link>
    <description>Recent content in 202401s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Jan 2024 22:52:37 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202401/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ssh: connect to host github.com port 22: Connection timed out问题处理</title>
      <link>https://ruohai.wang/202401/github-connect-error/</link>
      <pubDate>Sun, 28 Jan 2024 22:52:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/github-connect-error/</guid>
      <description>今天准备push博客到github的时候发现push失败，错误提示内容如下
ssh: connect to host github.com port 22: Connection timed out 在中国上网，碰到国外网络服务无法连接的直觉就是网站被屏蔽了。😔
根据错误信息上网搜了搜，有个差不多情况的案例：
坑：ssh: connect to host github.com port 22: Connection refused
那就根据文章中的办法试试吧
在~\.ssh\config中指定github的端口号
Host github.com Hostname ssh.github.com Port 443 实测有效。</description>
    </item>
    
    <item>
      <title>Tailscale子网路由（Subnet routers）功能部署</title>
      <link>https://ruohai.wang/202401/tailscale-subnet-router/</link>
      <pubDate>Sun, 28 Jan 2024 21:03:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/tailscale-subnet-router/</guid>
      <description>前言 自己折腾nas或者linux小机器，都会碰到内网穿透的需求，tailscale就是其中一个非常方便、好用又免费的方案。
但我之前只是用它的最简单、基础的异地组网功能，这两天偶尔看到别人分享它的子网路由（subnet routers）功能，发现非常契合我的使用场景，所以抓紧时间折腾了一遍，顺便做个记录。
子网路由 简单文字描述这个功能，就是：
局域网内有很多个服务器 这些机器在内网都用192.168.*.*的内网ip进行访问 并不是每台机器都能装tailscale 在一台机器上部署tailscale，开启subnet routers作为跳板机，通过这台机器，直接用192.168.*.*的局域网ip访问内网的机器 看上去还是比较拗口，那就直接看官网的图片解释吧
部署 先贴上官网的subnet routers的指导手册：Subnet routers and traffic relay nodes
然后我自己部署过程的步骤拆解：
第一步：安装tailscale
官网下载页面指路：https://tailscale.com/download
注意：到安装完成那一步即可，不需要启动。
第二步：开启ip转发
使用子网路由功能必须开启本机的ip转发。
这里以linux为例，这里直接照搬官网内容：
如果你的linux系统存在/etc/sysctl.d目录，使用如下命令：
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf sudo sysctl -p /etc/sysctl.d/99-tailscale.conf 否则使用如下命令：
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.conf sudo sysctl -p /etc/sysctl.</description>
    </item>
    
    <item>
      <title>为什么我开始选择自建服务</title>
      <link>https://ruohai.wang/202401/why-i-choose-selfhosted-apps/</link>
      <pubDate>Wed, 10 Jan 2024 23:47:21 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/why-i-choose-selfhosted-apps/</guid>
      <description>twitter和memos 距离我的twitter账号被炸号，已经3个月了。时间过得好快啊。😄
我没有选择在twitter新建小号复活，也没有选择转向thread、mastodon、telegram channel、bluesky、微博等等其它平台。我转向了自建服务：memos。
memos是一个开源、轻量、方便、好用的笔记服务，github地址，官网地址。
我的memos服务跑在一个armbian小设备上，机器是海鲜市场上只要10块钱一个的矿渣，迅雷赚钱宝二代（ws1508）。硬件性能羸弱，cpu架构老旧，经过一番刷机以后，用一根u盘作为存储介质刷入armbian，功耗2w。😄
之前一直用【ipv6 + ddns + 域名】这套组合拳的模式来支持外网使用，最近弄了cloudflare tunnels，但实测不挂梯子几乎没法用。这里就不贴访问网址了，有心的可以telegram找我要。😄
不能指望memos能和twitter、thread、mastodon之类比，我只是把它当作一个单机版的twitter/微博在用。
它非常契合我的需求，但不一定满足你的需求：
安卓 app、ios app都有人开发了，网页也支持pwa。 我的更新动机是记录生活。之前频繁更新twitter，不是为了流量变现，不是为了当网红被围观生活，只是喜欢记录生活琐事，没人看我也会记录。没人看，我就更不用在意内容尺度、错别字、个人形象之类，少了很多顾忌。在twitter交了这么多朋友，是我的幸事。 频繁的sns账号被炸以后，对互联网大厂提供的网络服务没啥好感了 贴一下我的memos使用频率，😄
不过，memos也不是那么完美，我在这不短不长的使用过程中就碰到好几个非常明显的bug，还好我自己码力尚存还能自己动手修bug，最后都搞定了。😄
自建服务 想起之个月之前，因为停止订阅google one，导致我的gmail因为15GB免费空间耗尽而无法使用，至此开始放弃google photos服务转移到自建nas。
我似乎已经慢慢开始从使用互联网大厂提供的网络服务，慢慢转向了自建服务。
回想一下这些年我的炸号经历：
instagram账号突然退出，登录提示密码错误，选择重置密码，但一直收不到邮件。第一个instagram账号，卒。 instagram账号突然冻结，申请解冻要求拍摄本人手持签名的白纸的露脸照片证明自己是真人账号，感觉有点儿受辱，放弃解冻。第二个instagram账号，卒。 google photo权益缩水，这也没什么，互联网本就没有【永久】的承诺，没有【永久】免费的午餐。但google的photo、drive、gmail三者共享免费的15GB存储空间这事有点儿凹糟，我订阅100GB的google one，在photo上传了大量照片（超过15GB），之后取消google one订阅，竟然导致gmail无法使用。虽然事后想明白了这似乎很合理，但当时，我的主力邮箱突然无法使用以后是很慌的。至此我删除了photo里的照片，开始折腾nas。 twitter，或者应该按照新名字叫X，用了15年、马上16年的账号突然被冻结，多次申诉无效，我明白这个账号是gg了。甚至连获取archive存档数据让我保存在本地也行吧，对不起，没有。至此，我使用频率最高、几乎一日三餐、琐碎日常、感情八卦什么都往上发的twitter账号，消失在互联网上，消失在所有搜索引擎里了。 </description>
    </item>
    
    <item>
      <title>在玩客云上用systemd实现sd卡的开机自动挂载</title>
      <link>https://ruohai.wang/202401/systemd-auto-mount-sdcard/</link>
      <pubDate>Tue, 09 Jan 2024 16:12:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/systemd-auto-mount-sdcard/</guid>
      <description>前言 想要在linux系统上实现开机自动挂载磁盘，有好几种实现方案。手动的方法可以通过编辑fstab，自动的方法可以用过安装udevil。
但用fstab的方法，容易让系统无法启动。用udevil的方法，实测在玩客云上开机后无法自动挂载sd卡，需要手动插拔以后才能正常运行。
在网上找了一些解决方案，最后决定用systemd来实现开机以后自动挂载sd卡。
实现 首先要确定sd卡的硬件挂载点，比如我准备把sd卡设备挂载到/mnt/sdcard目录下。
第一步：创建systemd的mount配置文件
systemd配置文件存放目录/etc/systemd/system，在次目录下新建配置文件。
sudo touch mnt-sdcard.mount 注意点：
文件名mnt-sdcard和挂载路径要同名，但斜杠‘/’要转换成短杠‘-’，否则无法启动 文件后缀名是.mount而不是.service 第二步：编辑配置信息
这里直接抄一下参考文章中提供的用例：
[Unit] Description=sdcard auto mount After=network.target [Mount] What=/dev/mmcblk0p1 Where=/mnt/sdcard Type=ext4 Options=defaults [Install] WantedBy=multi-user.target 参数释疑：
What: 被挂载设备文件全路径 Where: 挂载点全路径 Type: 文件系统类型 Options: 挂载选项 第三步：启用
完成以上配置后，重新加载systemd配置然后启动即可。
systemctl daemon-reload systemctl start mnt-sdcard.mount systemctl enable mnt-sdcard.mount 参考文章 systemd 之 开机自动挂载 Systemd 开机自动挂载硬盘 </description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署Cloudflare Tunnels实现内网穿透（一）</title>
      <link>https://ruohai.wang/202401/cloudflared-deploy-on-onecloud-1/</link>
      <pubDate>Sun, 07 Jan 2024 21:31:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/cloudflared-deploy-on-onecloud-1/</guid>
      <description>前言 朋友们，2024年新年快乐~ 🎉
之前我在迅雷赚钱宝、玩客云这些armv7l系统架构、即将被放弃支持的电子垃圾上部署网络服务，公网访问的解决方案是【廉价域名 + ddns + ipv6】，因为我当前使用的中国移动宽带支持ipv6 + 提供了公网ipv6地址。这个方案很好用也很方便，公网访问服务也能达到宽带的上行带宽上限，但这方案也不是没有遗憾的地方：
国内很多老旧路由器，甚至新出厂的路由器，都默认关闭了ipv6功能，导致无妨访问我的自建网络服务 国外很多运营商不支持ipv6，导致我的自建服务内容项分享给国外好友的时候无法访问 国内宽带运营商屏蔽80/443端口，导致想要访问我的自建网络服务必须在域名后面加端口号 动态ipv6公网地址在dns解析生效上有滞后，导致服务有时候中断 我的赚钱宝系列和玩客云系列，经常会出现多个未过期、未注销的ipv6公网地址，但只有最新分配的那个才是有效的，这种情况ddns-go默认无法处理，需要自己写脚本选择真实有效的那个ipv6地址。 后来接触到了tailscales、frp、ngrok、zerotier，意识到如果自己拥有一台vps，就可以实现不需要端口号直接访问内网的自建网络服务（当然国内特情下需要完成备案）。当时我的twitter账号还没有被炸，推友告诉我，有免费的cloudflare tunnels方案实现同样的功能。但我这人又懒又拖延症，直到这周，才打起精神开始学习部署。
自己成功部署了cloudflare tunnels以后，发现整个过程非常简单，官方的安装引导已经非常直白易懂。但实际操作过程中，对于一些不熟的步骤，我还是卡了好久，也趟了几个坑。所以做个简单记录。
准备 想要实现cloudflare tunnels（以下简称tunnels）做内网穿透，需要提前准备：
一个域名 一个cloudflare账号 一张信用卡 步骤 整个部署过程，大致分成几个步骤：
注册一个cf账号 新建tunnels服务 信用卡验证 选择免费方案 在自己的机器上安装cf客户端 将域名的dns解析托管给cf 在tunnels中配置公网域名转发 耐心等待配置生效 部署 这两天又中流感了，咳嗽流鼻涕发热，先写到这里。下次来补充细节。
等不及的可以看最后参考文章中的链接。
参考文章 少数派：CloudFlare Tunnel 免费内网穿透的简明教程 </description>
    </item>
    
  </channel>
</rss>
