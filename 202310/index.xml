<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202310s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202310/</link>
    <description>Recent content in 202310s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 12 Oct 2023 18:48:49 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202310/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PhotoPrism的安装以及和Immich的优缺点对比</title>
      <link>https://ruohai.wang/202310/photoprism-install-guide/</link>
      <pubDate>Thu, 12 Oct 2023 18:48:49 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-install-guide/</guid>
      <description>前言 10月初因为google one订阅计划到期没续，导致google one存储空间耗尽，接着连锁反应导致我的gmail因为没有空间而无法使用，所以终于下定决心：
要自建相册服务，不能在关键时候被google卡脖子！
（开玩笑的
immich的优缺点 上周弄了个机器部署immich，实际使用一段时间后，几个最突出的优点：
全终端覆盖，除了web服务之外，官方就提供了ios和android的app web和app的ui/ux都模仿的google photos，所以上手使用没难度 但是，但是啊，immich用起来确实各方面都还可以，但也有不少槽点，列举一二：
immich只能指定一个目录，也就是上传目录、缩略图目录、原图目录、转码视频目录，统统都一个目录下（aka一个硬盘）。导致会有原始媒体文件体积的20%左右的空间，是被缩略图、缓存之类消耗掉的，这导致硬盘空间更容易耗尽，意味着会需要更频繁的更换大容量硬盘和迁移/恢复。
上传了7万多张照片+视频以后，web端浏览非常、非常的卡，首页时间线的瀑布流展示出来需要等5~10秒钟左右。
上传照片的流程：新照片被重命名并放到upload目录 → immich读取新照片的exif → immich把新照片归档到指定根目录并还原文件名。这个流程如果顺利的话就很完美，没有问题。但我在短短几天的时候过程中，出现了好几次上传的照片被积压在upload目录，无论怎么在管理员的Job管理页面重启读取照片metadata的任务，积压在upload目录的文件都毫无变化，无法正确归档。最后的解决方案，第一次碰到这问题时，我简单排查以后感觉是immich-microserver出了问题，也不知道咋bugfix，索性备份了400G的内容以后重新部署。第二次在重新部署的immich服务上又碰到了这个问题，还好这次积压的不多只有17个文件，我下载到本地，根据日期核对图库以后，确认原图已经存在于图库，所以直接清空了upload目录。
物色其它方案 因为使用中种种的槽点，尤其是照片积压在upload目录这个严重的bug，所以我又开始物色其它自建相册方案：lychee、piwigo、photoprism、etc&amp;hellip;
古人有云：少年不知愁滋味，乱花渐欲迷人眼。看着这么多的方案，一时不知道该先试哪个。
看了一圈官方文档以后，挑中了photoprism。
优点如下：
自定义图库目录、缩略图目录、原图目录、转码视频目录，可以分别指定路径。这就可以实现原图放一个硬盘（方便维护），缩略图和缓存放ssd（加速图片浏览）。这简直就是对着immich的弱点痛打啊。 多语言支持，自带中文。虽然相册服务那点简单的英文对我来说没有使用障碍，但有中文可选总是加分的。 web端使用起来体验比immich响应速度快，可配置的内容更多更细致。 看完photoprism的文档以后，十分心动，立刻就弄个虚拟机，开始部署。
部署photoprism 我的机器用的系统时debian 12 bookworm stable，使用官网推荐的docker compose方案进行部署。
使用的photoprism版本是Build 231011-63f708417，docker-compose.yml文件中指定的version是3.5。注意不同的版本可能部署方式会有出入，最终以官网的文档为准。
官网文档：https://docs.photoprism.app/getting-started/docker-compose/
第一步：安装docker和docker-compose。
apt install docker apt install docker-compose 第二步：下载docker-compose.yml文件。
mkdir ~/.photoprism cd ~/.photoprism wget https://dl.photoprism.app/docker/docker-compose.yml 第三步：配置参数。
**注意：**自建相册服务一般很少会反复折腾，都是部署好了以后就是24H运行除非硬盘满了。所以下面的10个参数一定要好好理解后进行配置，避免返工。
下载好docker-compose.yml以后，用文本编辑器打开，有以下几个参数需要修改：
账户密码类配置项：
1. PHOTOPRISM_ADMIN_USER：网页端管理员登录的用户名，默认是admin，建议修改 2. PHOTOPRISM_ADMIN_PASSWORD：网页端管理员登录的密码，建议修改 3. PHOTOPRISM_DATABASE_PASSWORD：数据库的密码，建议修改 4. MARIADB_PASSWORD：服务默认用的数据库是mariadb，这里配置photoprism数据库的密码。注意这个密码要和上一条中的PHOTOPRISM_DATABASE_PASSWORD的密码保持一致 5. MARIADB_ROOT_PASSWORD：数据库的root账户密码，建议修改 文件路径类配置项：
1. &amp;#34;~/Pictures:/photoprism/originals&amp;#34;：这项指定原图的归档目录，建议指向一个大容量hdd，一个硬盘专门用来放原图，方便后期维护。 2. &amp;#34;~/Import:/photoprism/import&amp;#34; ：这项指定需要导入的目录，默认是注释的（不启用），可选，有图库需要批量导入的可以这里指定路径，然后系统会把图片转移到originals目录进行归档。 3.</description>
    </item>
    
    <item>
      <title>Immich相册服务照片视频文件的批量上传</title>
      <link>https://ruohai.wang/202310/immich-bulk-upload/</link>
      <pubDate>Tue, 10 Oct 2023 19:06:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-bulk-upload/</guid>
      <description>前言 immich的网页端只支持选中多个文件上传，不支持选择文件夹。
官网有文档，批量导入需要用到npm。
啧，行吧，记录下怎么弄。
官网文档很细致，英文阅读无障碍的话直接看官网就行，我就是英翻中。
安装 我用来跑immich服务的机器装的是debian系统。
先装npm，大概600MB。
apt install npm 再装immich CLI模块
npm i -g immich 到此，安装完成。
批量导入 第一步：生成api key。
很抱歉我之前用的免费图床跑路了，所以不再传图，用文字记录下路径：
点击网页端的账户头像 —— account setting —— API Keys —— new api keys，name一栏随便填，然后点击create，然后把字符串复制保存。
第二步：文件夹批量上传。
immich upload --key API_KEY_STRING --server http://immich_host_ip:2283/api --recursive directory/ 有三个地方需要根据自己情况修改：
API_KEY_STRING，替换成第一步中生成的api key immich_host_ip，immich服务的ip地址，如果是同一台机器，写localhost就行。如果改过默认端口，那2283也要一并修改 directory/，需要上传的文件夹 执行以上命令后，会有提示：
Checking connectivity with Immich instance... Server status: OK Checking credentials... Login status: OK Successful authentication for user nibabawo@123.com Indexing local assets... Indexing complete, found 74868 local assets Comparing local assets with those on the Immich instance.</description>
    </item>
    
    <item>
      <title>UFW新增只开放IPV4/IPV6端口的规则</title>
      <link>https://ruohai.wang/202310/ufw-add-ipv4-only-rule/</link>
      <pubDate>Fri, 06 Oct 2023 20:24:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/ufw-add-ipv4-only-rule/</guid>
      <description>ufw防火墙在用基础的开放端口ufw allow 12345/tcp语法的时候，默认是同时开启ipv4和ipv6。
如果只想开启12345端口的ipv4访问
ufw allow proto tcp to 0.0.0.0/0 port 12345 如果指定ip端的ipv4访问
ufw allow proto tcp to 192.168.1.0/24 port 12345 同理，如果只想开启12345端口的ipv6访问
ufw allow proto tcp to ::/0 port 12345 </description>
    </item>
    
    <item>
      <title>UFW防火墙对Docker容器不生效的问题解决</title>
      <link>https://ruohai.wang/202310/ufw-solve-conflict-with-docker/</link>
      <pubDate>Fri, 06 Oct 2023 19:35:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/ufw-solve-conflict-with-docker/</guid>
      <description>在debian下用docker部署的方式安装了immich，默认端口2283。
为了安全，肯定不会用默认端口。部署完immich简单调试没问题以后，就开始安装ufw管理端口。
但实测发现ufw未开启2283端口的情况，immich的web服务依然可以访问，也就是ufw对docker服务不生效。
找了下解决方案。
在/etc/docker目录下新建daemon.json，添加配置项：
{ &amp;#34;iptables&amp;#34;: false } 保存退出。
# 重载 systemctl daemon-reload # 重启docker systemctl restart docker # 重启ufw systemctl restart ufw 因为ufw和docker都会操作iptables，这个方案选择禁掉docker，以ufw为准。
参考文章 Docker 和 UFW 一起用可能会出现问题 https://zhuanlan.zhihu.com/p/628899663 </description>
    </item>
    
    <item>
      <title>Immich配置SSL证书开启HTTPS访问</title>
      <link>https://ruohai.wang/202310/immich-update-to-https/</link>
      <pubDate>Fri, 06 Oct 2023 19:34:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-update-to-https/</guid>
      <description>注意事项 配置ssl证书开启https公网访问，请务必注意数据安全。
immich服务目前没有密码错误多次登录时触发登录保护的功能，所以存在暴力破解的可能性。
建议用tailscale、ngrok、frp、cloudflare tunnel之类内网穿透工具。
第一步：申请证书 申请证书这里不做赘述，阿里云送的免费证书，或者let&amp;rsquo;s encrypt的证书都可以。
我用的反代工具是nginx，所以证书是是nginx格式。
一共两个文件:
domain.key domain.pem 第二步：安装nginx 我用的系统是debian，直接apt安装
apt install nginx nginx安装好以后，默认配置文件路径/etc/nginx。
如果没有这个目录，执行以下命令，会显示nginx的配置文件路径
nginx -t 第三步：上传证书 在/etc/nginx目录下新建文件夹ssl，然后用工具（比如winscp/sftp等）把两个ssl证书文件放到ssl目录下。
最终ssl证书的路径如下：
/etc/nginx/ssl/domain.key /etc/nginx/ssl/domain.pem 第四步：配置反代 进入目录/etc/nginx/sites-available，把默认的default配置文件备份，新建一个default文件。
# 进目录 cd /etc/nginx/sites-available # 备份 mv default default.bak # 新建 touch default 如果不懂为啥，就根据这个操作，如果懂，就根据自己的习惯操作。
用编辑器编辑default文件，录入一下内容，保存后退出。假定新端口是12345。
server { # 监听端口 12345 listen 12345 ssl; listen [::]:12345 ssl; # 服务名 server_name domain; # 因为需要上传照片视频，这里设定最大上传文件50GB client_max_body_size 50000M; # ssl证书路径 ssl_certificate ssl/domain.pem; ssl_certificate_key ssl/domain.key; # ssl session缓存和时间 ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # ssl加密的相关配置 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!</description>
    </item>
    
    <item>
      <title>Linux下给新硬盘分区并挂载</title>
      <link>https://ruohai.wang/202310/linux-partion-mount-disk/</link>
      <pubDate>Fri, 06 Oct 2023 10:56:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/linux-partion-mount-disk/</guid>
      <description>前言 老是忘记，查别人文章也麻烦，索性自己记录一下
分区 第一步：获取设备名 lsblk 也可以用
fdisk -l 这里假定新硬盘是/dev/sdb，用fdisk开始分区
fdisk /dev/sdb 执行以上命令后，会进入fdisk工具的命令界面，输入m可以查看使用手册。
第二步：删除旧分区（可选） 如果是旧硬盘，或者已经有分区的硬盘，需要先删除旧分区表信息，输入d
d 提示内容如下
Command (m for help): d
Partition number (1-3, default 3):
提示内容是当前有三个分区，编号1-3，请输入需要删除的分区的编号。
依次输入分区编号，会提示删除成功。
Partition 1 has been deleted.
全部删除后，进入下一步。
第三步：创建新分区 新建分区，输入n
n 提示内容如下：
Command (m for help): n
Partition type
p primary (0 primary, 0 extended, 4 free)
e extended (container for logical partitions)
p主分区，e扩展分区。选择主分区p
p 提示如下：
Partition number (1-4, default 1):
确定分区编号，默认1，直接回车默认即可，提示如下：
First sector (2048-3907029167, default 2048):</description>
    </item>
    
    <item>
      <title>开源自托管相册服务Immich的安装</title>
      <link>https://ruohai.wang/202310/immich-installation/</link>
      <pubDate>Thu, 05 Oct 2023 16:35:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-installation/</guid>
      <description>前言 停用了google photos，虽然很早很早就开始用这个服务，但最近碰到了几件事，让我选择停用它。
权益缩水。从最初原图免费无限空间，缩水到高品质压缩图片免费无限空间，再缩水到免费15GB空间。不要相信云存储空间厂商的任何免费和永久的承诺，哪怕是google这样的大厂背书。 祸及gmail。存储空间缩水到15GB以后，这个15GB由gmail、photos、driver三个服务共享使用，意味着，如果因为photos上传图片过多，或者driver上传文件过多，耗尽了这15GB空间，会导致gmail无法使用，因为没有多余空间来收发邮件了。这种情况只有两个方案可选，清理photos和driver腾出空间给gmail使用，或者订阅google one扩充空间。如果选择订阅google one，一定要留意，如果哪个月订阅费用扣款失败，gmail会因为没有剩余空间而无法使用。 以上两点原因，尤其是第二点，导致我必须、立刻开始寻找替代方案。
其实几个月前开始折腾nas的时候我就有考虑自建相册服务，几个方案：群晖自带的photo station、moments、synology photo，或者第三方的lychee、piwigo、photo prism、librephoto、photoview。但了解和体验下来，有几个核心问题一直无解：
不支持h265/hevc的图片和视频。因为h265复杂的版权关系，h265的图片和视频（heic、heif)基本不支持查看和生成缩略图。群晖有解决方案，但需要登录群晖账号才能在套件商店下载解码包。黑群可以自己安装ffmpeg来实现对h265媒体的支持，但网上看到很多人反馈时灵时不灵，很让人头疼。 不支持自定义图库位置。我有一个庞大的、积累多年的照片文件夹，有自己的目录结构，如果想要导入到这些相册服务中去，只有一个办法：通过相册的导入入口。而且这些相册一般都会把媒体文件按照日期进行归档，破坏掉原有的目录结构。 目前我从google photos切换到了immich，不仅解决了我的所有痛点，而且它的web和app界面都几乎1:1的模仿google photos，上手使用毫无难度。
安装 我的安装环境是debian 12 stable（bookworm）。因为跑docker服务需要root权限（可以通过一些设置用非root跑），关于权限、用户的问题这里不再赘述，需要自行解决。
immich的安装步骤在【官网】有文档，英语阅读无障碍的话可以直接看官网。
注意事项： 安装需要占用5GB存储空间 immich自带的机器学习（图像主体识别、人脸识别）、视频转码非常占用资源，内存至少4GB cpu性能无要求，但更强的cpu，上传、转码、机器学习就会更快更效率，使用体验会更好 immich的视频转码支持qsv、nvenc、vaapi硬件加速 因为docker-hub被封，部署的时候拉镜像根本没速度，请改用国内镜像站，或者用VPN 写这篇文章的当下（2023/10/05），immich版本1.81，实测支持自定义图库位置，edit user界面有个external path设置项，可以填入自定义图库的位置。填写以后，immich从图库读取图片的metadata、生成缩略图、图像识别，不会变动原图库的目录结构和原图。 批量导入图片的方法请查看官网，入口：Bulk Upload (Using the CLI) 第一步：安装docker和docker compose。 apt install docker.io apt install docker-compose 第二步：在本地创建immich目录 这个目录只是用来下载immich的docker-compse配置文件和env配置文件，随便建在那边都行。
mkdir immich cd immich 第三步：下载两个配置文件 wget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml wget -O .env https://github.com/immich-app/immich/releases/latest/download/example.env 第四步：编辑参数。 用文本编辑器打开.env文件，1.81.1版本的默认内容如下
# You can find documentation for all the supported env variables at https://immich.</description>
    </item>
    
    <item>
      <title>Linux小主机（WS1608）折腾总结</title>
      <link>https://ruohai.wang/202310/ws1608-summary/</link>
      <pubDate>Wed, 04 Oct 2023 01:49:08 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/ws1608-summary/</guid>
      <description>前言 不知不觉，从4月份入手玩客云老母鸡，到6月份开始刷机折腾armbian，然后7月、8月爆肝写了几十篇博客来记录在linux下的一些基础的配置和软件安装，最后到9月、10月归于沉寂，已经有半年的时间。
时间过的真快啊。
玩客云这台小机器，刷入armbian以后，几个月用下来，优点如下：
价格便宜，只要25rmb 功耗极低，本体大概3~5w，挂两个2.5寸hdd硬盘盒也不超过10w，没有用电焦虑 armbian固件除了logo灯颜色其它完美适配，而且固件跟着armbian官方在维护更新，运行稳定 千兆网口没拖后退，下载和内网smb共享文件可以跑满usb2.0的带宽，峰值大概30M/s，够用 usb接口供电稳定，两个usb口，每个都挂上2.5寸hdd硬盘盒，稳定不掉线。这点对于需要24h挂着usb硬盘的场景非常非常重要 有sd卡槽，聊胜于无 刚拿到这台机器的时候，总想着给它刷各种各样的固件，armbian、openwrt、电视盒子、达菲等等，还想在armbian的基础上安装各种服务，挖掘它的可用性。但几个月以后就失去了兴趣，再多可可玩性，也得自己有需求才会有使用场景，目前我的小机器就是简单的当一个下载机和轻nas，安安静静的躺在角落。
这里简单记录一下，当下这台机器上我依然在高频使用的服务。
在用的服务 ddns-go
毋庸置疑这个服务是肯定需要装的，用ipv6+ddns+域名实现公网的访问。
nginx
用来做端口转发，装ssl证书实现https访问
file browser
简单的web端文件管理器
samba
局域网文件共享，必装
udevil
实现usb存储设备自动挂载
ufw
防火墙，只做了简单的端口管理
qbittorrent-nox
bt下载工具，当下载机必装，下热门资源很好用，冷门资源就算了
ttyd
web端的ssh工具，应急用一下
iperf3
用来局域网测速
navidrome
自建流媒体服务（类似qq音乐），很好用，pc客户端我用的sonixd，安卓客户端用substreamer和subtracks
speedtest-cli
用来外网测速
lm-sensors
查看芯片温度
smartmontools
查看usb外界硬盘的健康度
hugo
静态博客的本地环境，没有用hexo因为hugo安装配置很简单，主题也漂亮
git
用来配合hugo发布到github pages
tailscale
内网穿透方案，安装配置都很简单，装好以后简单测试了一下，方便好用。但我一直用的ipv6+ddns方案，保留tailscale只作为备用
准备用的服务 既然把机器当作轻nas使用，自然就要考虑到文件备份的安全性。提到文件备份，中年男人们肯定就不陌生了，著名的321原则：三个备份 + 两种介质 + 一份异地。
之前我常常取笑别人花钱买各种云盘服务保存自己那些数字垃圾，但当我碰到用了几十年的google photo服务，从当初的免费无限容量，缩水到压缩画质无限容量，到现在只给15GB免费容量，也不得不考虑用什么方案来保存自己每天生成的数字垃圾。尤其是作为google全家桶用户，gmail、photo、driver三者共享15GB的免费空间，当空间耗尽以后，会连累gmail被停用，无法收发邮件。
rclone
用来实现文件云端备份
rsync
用来实现文件多端同步备份
kopia
用来实现文件快照</description>
    </item>
    
  </channel>
</rss>
