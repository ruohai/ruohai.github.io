<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memos on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/memos/</link>
    <description>Recent content in memos on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Jul 2024 17:01:59 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/memos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memos从0.15升级到0.17新增评论功能</title>
      <link>https://ruohai.wang/202407/memos-update-from-0.15-to-0.17/</link>
      <pubDate>Sun, 28 Jul 2024 17:01:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202407/memos-update-from-0.15-to-0.17/</guid>
      <description>前言 我的memos部署在迅雷赚钱宝一代（ws1408）上，硬件架构是arm32/armv7，host系统是3.10内核的openwrt21，部署方式是预编译的后端二进制包 + 自己编译的前端。
最初是因为硬件架构限制，memos官方从0.15开始就不再维护针对arm32/armv7硬件的docker镜像，所以我一直停留在0.15.0这个版本。
后来搞定了非docker方式的部署（后端的二进制包 + 前端自己编译），但因为使用习惯 + 新版本功能没有需求，所以一直都没有动力升级。
自从我的twiter被炸号以后，我就迁移到了自建memos。之后一直有曾经的twitter好友以及现实里的朋友在关注我的memos更新，这份关注持续至今。非常感谢他们，他们的关注让我在这两年的潦草生活中依然感受到些许亮光。
为了方便和他们互动，我准备把memos从0.15版本升级。
memos在v0.16加入了评论功能
在v0.17加入了通知中心（inbox收件箱）
至此评论功能算是比较完善可用，所以我决定升级到v0.17.1。
升级 memos在v0.16的changlog中提到需要数据迁移 &amp;amp; 有表结构的变更。
而且在最初体验memos时，我确实碰到了升级新版以后对旧数据库不兼容的问题，需要手动执行sql更新脚本。所以我对memos的升级感到一点担心，因为需要迁移数据。
但是实际在测试升级的过程中发现是多虑了，从v0.15升级到0.17非常丝滑，不需要自己整理sql更新脚本，因为memos的作者已经内置了数据迁移脚本，在升级过程中会自动执行，整个过程非常丝滑，完全不需要人工干预。
如果是docker方式升级，拉取指定版本的镜像以后直接运行即可。
如果是非docker方式部署，前端需要自己编译，后端在【memospot/memos-builds】下载二进制包，覆盖原项目文件后重启memos即可。注意windows下载某几个版本的压缩包文件时windows defender会报毒，和项目作者反馈以后对方表示是windows defender误报，具体可以看这个【issue】。
以下是升级过程中用到的sql代码（适用于sqlite），如果你对自己动手更有信息，可以参考。操作之前请先备份数据库。
# 新加字段 ALTER TABLE resource ADD COLUMN memo_id INTEGER; # 更新数据 UPDATE resource SET memo_id = ( SELECT memo_id FROM memo_resource WHERE resource.id = memo_resource.resource_id LIMIT 1 ); # 建索引 CREATE INDEX idx_resource_memo_id ON resource (memo_id); # 删表 DROP TABLE IF EXISTS memo_resource; # 删表 DROP TABLE IF EXISTS shortcut; # 插入版本号（新版本号必须要加，要不然每次重启都会自动开始迁移数据） INSERT INTO migration_history (version, created_ts) VALUES (&amp;#34;0.</description>
    </item>
    
    <item>
      <title>在Windows上编译Memos的前端项目</title>
      <link>https://ruohai.wang/202405/memos-frontend-compile-on-windows/</link>
      <pubDate>Thu, 23 May 2024 19:03:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/memos-frontend-compile-on-windows/</guid>
      <description>前言 memos很好用，是我高频使用的一个服务，自从我的twitter炸号以后我已经把memos当作自建twitter（或者自建微博）在使用。
memos官方一直只维护docker部署的方式，确实挺方便的，一键安装不用操心什么环境、依赖、硬件架构的问题。
但我还是渐渐的想脱离docker环境使用memos。前几天写了一篇文章写怎么编译memos前端，那篇是根据项目的github仓库的issues中很多人的回答总结出来的。但写完文章就发现其实正确的编译方法已经完整的写在源码的dockerfile文件里了。
所以这次再次自己动手，开始编译前端项目。
你可能要问为什么后端项目也自己编译，🤔，因为后端二进制包受宿主系统的硬件架构限制，amd64上编译出来的包没法在arm32平台上跑，甚至我在arm32平台上编译的包（libc）在musl的openwrt上都跑不起来。所以后端项目我直接用了github上现成编译好的，就不自己折腾了。
又因为我是windows用户，所以我用来编译的环境就是windows惹，其它系统其实也没区别，自行理解就行。
编译 先准备前端项目的编译环境，参考dockerfile中要求的版本号，实测更高版本也可以。
node，版本18 buf，版本1.26.1 先从memos的官方github项目主页下载源码、解压这些就不说了。因为从v0.15升级到v0.16涉及到数据库的表结构变更，我暂时不想步子迈这么大，所以这次以v0.15.2为例。
buf官方提供了二进制包，可以直接下载使用。指路：【bufbuild/buf】
下载后最好放到memos项目源码的proto目录（windows下应该叫做文件夹，但这里还是用linux的习惯叫目录）。
然后打开windows terminal（没有terminal就用cmd，下同），进入这个目录，执行buf-Windows-x86_64.exe generate。因为没有设置环境变量，所以这里buf命令需要用完整的文件名。
运行完以后没有报错的话就ok惹。
然后用管理员权限启动windows terminal（因为非管理员账户执行pnpm可能会提示权限不足）。
进入到memos项目源码的web目录，执行以下命令：
corepack enable &amp;amp;&amp;amp; pnpm i --frozen-lockfile 等命令跑完以后，提示内容大致如下：
然后继续执行命令pnpm build
跑完以后提示如下：
到这里整个前端项目的编译工作就结束惹，接下去只需要把web目录下的dist目录整个复制出来放到项目的server目录下即可。
项目结构示意：
--memos --server | --dist 不过这个目录结构仅限于v0.15，后续版本我看到是调整过目录结构，具体请根据dockerfile里的部署方式来调整。
好了，恭喜你编译成功，接下去就可以脱离docker环境直接跑memos惹。
🎉</description>
    </item>
    
    <item>
      <title>非Docker方式在Openwrt上运行Memos</title>
      <link>https://ruohai.wang/202405/memos-run-on-openwrt-without-docker/</link>
      <pubDate>Mon, 20 May 2024 00:32:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/memos-run-on-openwrt-without-docker/</guid>
      <description>前言 长话短说了。
Memos的开发者只提供了docker镜像这一种部署方式，而且从v0.15.0以后已经停止维护针对arm32/armhf/armv7l的版本。
我的系统是3.10内核的openwrt 21，因为内核太老所以不支持安装docker。
我的硬件是迅雷赚钱宝一代，硬件型号ws1408，芯片amlogic s805，内存228MB。
我用的memos后端是v0.15.2，是从github下载的，指路：【memospot/memos-builds】。
你可能会问为什么不用更高的版本，😂，有苦衷的。其一是因为前端部分需要自己编译，我只成功编译出了v0.15.0版本，更新的版本我本地编译都会报错，暂时没有精力去debug。其二是因为之前受arm32平台的限制，我一直用的是v0.15.0的docker镜像，而从v0.16开始的更新就涉及到数据库表结构的变更，没法平滑的升级，所以本次还是停留在v0.15这个大版本。
至于后端v0.15.2 + 前端v0.15.0这种奇怪的版本组合，😂，我用了一个周末，还没有发现什么bug，可以正常使用。
我自己编译的v0.15.0的前端项目的下载放在文章最后。
这种方式也适用于在其它linux版本上直接用编译好的二进制包运行memos，自行调整配置文件即可。
配置 先把v0.15.2的后端 + v0.15.0的前端上传到服务器，然后按照项目结构进行组织。后端文件memos不要忘记添加可执行权限，chmod +x memos。
--memos --server | --dist 我的项目结构如下图，其中data用来存放memos的数据。
接下去就是配置启动脚本以及一些bug处理。
第一步：sysv脚本
在/etc/init.d目录下新建文件memos，记得添加可执行权限chmod +x memos，然后粘贴以下代码。其中的文件路径、端口号、数据存放目录请自行修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/memos/memos --mode=prod --port=5203 --data=/mnt/data/memos/data } stop() { kill $(pidof memos) } 保存后退出，然后启动服务并设置开机启动。
# 启动服务 service memos start # 添加启动项 service memos enable 注意这个脚本只设置了start和stop两个命令，其它的restart之类都没有适配，有需求的话请自行添加代码。
第二步：设置缩略图目录
memos应该是硬编码了到/var/opt/memos/assets这个附件目录下索引图片来生成缩略图，但我们用二进制包运行memos的话，数据存放路径都会自定义设置，其次是openwrt系统下，/var目录是个临时目录，一重启就会清空数据，所以肯定要修正这个bug。
比如我的memos数据都存放在/mnt/data/memos/data目录下。
解决的方法是建立一个软连接，把附件目录指向我们自定义的附件目录。
# 新建目录 mkdir -p /var/opt/memos/ # 把硬编码的目录通过软链接指向我们自己的数据目录 ln -s /mnt/data/memos/data/assets/ /var/opt/memos/assets 但机器可能偶尔会重启，一重启整个/var目录会被清空，不可能每次重启都手动创建一遍目录 + 软连接，所以需要把这个操作添加到启动项。</description>
    </item>
    
    <item>
      <title>在刷了Armbian的玩客云（WS1608）上编译Memos教程</title>
      <link>https://ruohai.wang/202405/memos-compile-one-onecloud/</link>
      <pubDate>Fri, 17 May 2024 12:52:28 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/memos-compile-one-onecloud/</guid>
      <description>前言 memos是一个很不错的开源笔记服务，我在刷了armbian的迅雷赚钱宝二代（下称小飞碟）上用docker方式部署了一个自己的memos，已经高强度使用至今。
但玩过迅雷赚钱宝系列的垃圾佬肯定知道这系列机器从一代到三代，用的芯片都是amlogic s805，架构是arm32/armv7l/armhf，而memos官方从v0.15.0开始就不再发布针对该硬件架构的docker镜像。因为如此，所以我使用的memos一直停留在0.15.0，坏处当然是用不上最新版、体验不到新特性，不过也有好处，至少稳定、不折腾了用了半年。
在docker hub上也能搜到第三方发布的针对各个硬件架构的memos的镜像，比如这个：【lincolnthalles/memos】，几乎覆盖了全部可能的硬件。
但我还想更geek一点，我想不再囿于docker，而是直接用源码编译出memos的二进制包，然后把编译出来的memos丢到刷了openwrt的机器上跑。
先说一下结果：
成功的编译出了arm32/armv7l/armhf版本的memos，可以在刷了armbian的玩客云/小飞碟上正常跑 编译出来的memos在openwrt上跑不起来，目测应该是openwrt是musl而编译出来memos用的libc 尝试直接在openwrt上编译，没成功 虽然最终的目的没有达成，但至少也成功了一半。所以写篇博客，记录一下过程，也许能帮到你。
环境准备 编译memos项目，分成前端和后端两个部分。
编译后端，需要golang，我用的debian仓库里的golang，直接apt install golang即可，版本1.19。
编译前端需要nodejs，最好再装个yarn。
因为玩客云的内存太小，我尝试在玩客云上直接编译前端项目时会因为oom而中断。考虑到前端项目的代码不区分硬件平台，所以我是在windows电脑上编译的前端项目然后再copy到玩客云上。
nodejs设置镜像源、go设定GOPATH、解决网络问题这些属于基操了，不再赘述。
编译环境准备好了以后，接下去就开始吧！
开始编译 从github下载源码，解压，进入项目根目录这些操作略过。
前端
进入web目录用yarn编译，执行以下命令
# 进目录 cd web # 安装依赖 yarn # 打包 yarn build 编译完成后，把web目录下生成的dist/目录整个复制到/server/dist/下，也就是
mv web/dist server/dist 如果你跟我一样在其它机器上编译的前端项目，同样只需要把web目录下的dist/复制到最终机器上的server目录下就可以了。
到这里，前端项目编译完成。
后端
在项目根目录执行命令
go build -o memos ./main.go 命令跑完以后在项目根目录下会出现一个memos的文件，就是编译好的后端了。
关于后端编译有一个坑需要注意，就是，比如我在/mnt/data/memos.v0.15.0目录下编译出了一个memos后端，那这个memos后端只会去/mnt/data/memos.v0.15.0/server/dist目录下找前端，aka后端文件中的前端项目路径在编译的时候就写死了。如果把编译好的memos后端放到其它目录下，就会找不到前端项目。
运行
前端和后端都编译完成后，最终我们需要的项目结构如下：
----memos_project |--memos |--server |--dist |--assets |--index.html |--logo.webp |--manifest.json |--sw.js |--... 最后在项目根目录下执行命令即可，记得根据自己喜好调整端口号和数据保存路径。
./memos --mode=prod --port=5230 --data=/path/to/save/data 看到这个界面就算是成功惹，打开浏览器，访问http://host-ip:5230就可以使用自己编译的memos。
systemd配置文件</description>
    </item>
    
    <item>
      <title>从0自建Memos服务教程</title>
      <link>https://ruohai.wang/202402/memos-self-hosting-guide/</link>
      <pubDate>Fri, 23 Feb 2024 14:28:43 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/memos-self-hosting-guide/</guid>
      <description>前言 之前已经写过一篇博客，【在玩客云上用Docker部署memos】。
但几个月过去，memos进行了大量的更新，托管的docker镜像也从ghcr.io转移到了docker hub，而且经过这段时间的安利，有好几个朋友有兴趣玩memos，想自己部署一个。
所以重新记录一下部署memos的过程，这次不针对玩客云，所有硬件通用。
当然，如果你有基础的英文阅读能力，也有基础的linux操作经验，可以直接看【memos官网的操作手册】
准备 一个装了linux的vps，或者是电脑、电视盒子甚至其它电子垃圾 linux发行版最好选debian，因为我喜欢用debian，😄 因为要拖docker镜像，国内的网络环境你懂的，注意配置好docker镜像加速 部署 第一步：安装docker环境
ssh连上debian安装docker。个人建议使用docker-compose方式部署，因为这种方式会有一个配置文件，方便编辑和管理。
sudo apt install docker.io docker-compose 第二步：配置docker镜像加速器（没需求可以跳过）
国内特殊的网络环境，如果不配置docker镜像加速，在拉取镜像的时候那叫一个折磨人。目前的docker国内镜像源，我测过很多，不管是网易云、百度云、上海交大，在拉取memos镜像时都没有效果，最后还是得用阿里云的镜像加速服务。
阿里云的docker镜像加速没有公共的地址，而是针对不同的用户有唯一的地址，所以需要登录自己的阿里云查看。
获取到自己的阿里云镜像加速其地址以后，进入/etc/docker/目录看下是不是有daemon.json文件，没有的话新建一个
sudo touch /etc/docker/daemon.json 然后用nano或者vim编辑daemon.json
sudo nano daemon.json 往文档中添加如下内容
{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://&amp;lt;你的加速器地址&amp;gt;.mirror.aliyuncs.com&amp;#34;] } 最后重启docker即可
sudo systemctl restart docker.service 重启以后，可以执行以下命令确认变更是否生效
sudo docker info 显示结果如图
第三步：编辑memos配置文件
通过docker-compose方式部署memos，需要提前准备一个docker-compose.yml的配置文件，里面设定安装目录、重启方式、端口号、运行用户等几个细节。
首先在debian系统中找一个自己喜欢的目录，新建文件
touch docker-compose.yml 然后用nano或者vim编辑
nano docker-compose.yml 最后往文件中粘贴以下内容
version: &amp;#34;3.0&amp;#34; services: memos: image: neosmemo/memos:stable container_name: memos user: 1000:1000 restart: always volumes: - ~/.memos/:/var/opt/memos ports: - 5230:5230 配置文件的简单释疑：</description>
    </item>
    
    <item>
      <title>土法解决Memos的SQLite3 WAL模式下丢失数据问题</title>
      <link>https://ruohai.wang/202312/memos-turn-off-wal-log/</link>
      <pubDate>Mon, 25 Dec 2023 00:31:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202312/memos-turn-off-wal-log/</guid>
      <description>前言 自从我的twitter账号被冻结以后，就自建了memos用来发一些日常琐碎的记录。
不得不说memos还挺好用的，轻量级，docker一键部署，全终端覆盖，多平台适配，自己一个人发发牢骚很好用。
但在使用的过程中也碰到过一两次bug，小bug自己解决一下就算了，没当回事。
但这次碰到一个大bug，直接导致丢失了半天的数据。
痛定思痛，找了一个土法解决方案，这里做简单记录。
问题 memos默认使用sqlite3数据库，默认开启wal模式。wal模式，write-ahead logging，可以简单理解为缓存数据库，就是写入、编辑的数据并不是实时写入db，而是缓存在db-wal文件中。当db-wal中缓存的数据记录条数达到指定数量时，触发check-point，再写入db。
我碰到的问题：
存储介质（一根2gb的u盘）出现了disk i/o error db-wal中有一部分数据还没有写入db memos出现报错无法使用，直接重启memos服务后db-wal缓存的记录全部丢失 因为过了几个小时才到家开始处理这个bug，设定的每小时rsync备份的那版db-wal数据也没了 解决方案 最佳的解决方案，那肯定是换掉那根出现disk i/o error的u盘，把memos部署到一个安全的存储介质上。
或者禁用wal
PRAGMA journal_mode = OFF; 或者调小wal_checkpoint的记录数
PRAGMA wal_autocheckpoint = 100; 以上两个方法我都试过，但实测重启memos以后，sqlite配置会被重置。
最后直接上粗暴土法：
重启memos会把db-wal数据写入db，设定一个crontab定时任务，每隔4小时重启memos，实现每隔4小时把缓存数据写入db的auto-check-point。 0 */4 * * * docker restart memos </description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署memos</title>
      <link>https://ruohai.wang/202311/memos-install-on-onecloud/</link>
      <pubDate>Tue, 14 Nov 2023 13:03:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/memos-install-on-onecloud/</guid>
      <description>前言 开篇先来个提醒：目前memos这个项目正处于快速更新迭代中，重要数据记得做好备份。
memos，轻量、方便好用、开源的自建笔记服务，可以拿来记笔记，也可以拿到当做一个自建小微博（或者自建小twitter）来用。
memos的部署，目前官方只推荐docker或者docker-compose两种方式。
那其实要部署就非常简单，准备好docker环境，然后一条命令/一个配置文件就搞定了。
但在玩客云上安装稍微有点麻烦，因为玩客云的硬件是armv7，memos的的新版已经不支持这个架构。
所以本次安装的核心就是找到支持armv7的docker镜像。
部署 第一步：准备docker环境
直接用debian仓库里的docker
sudo apt install docker.io 我更喜欢用docker-compose，配置文件方便管理
sudo apt install docker-compose docker环境到此安装完毕
第二步：准备memos的docker镜像
memos最新发布的docker镜像已经不支持armv7架构，有两个解决方案：
如果你动手能力比较强，那就下载源码自己编译一个支持armv7的版本 如果和我一样比较懒，那就找一下支持armv7的版本 在docker hub找到【neosmemo/memos】，点开tags标签，一直往前翻，可以看到2023年9月发布的0.15.0版本支持armv7。这就好办了，docker pull的时候指定版本即可。
在memos的github releases页面看一下0.15之后发布版本增加的新功能，最大的区别就是增加了用户之间评论 + 回复 + 留言的功能吧，memos从单机版变成了在线多人互动版。无奈玩客云硬件太老没有新版本可用，就安心玩单机版吧。😄
第三步：部署memos
我用的docker-compose方式部署，新建一个配置文件
# 新建目录 mkdir ~/.memos ; cd $_ # 新建配置文件 touch docker-compose.yml 然后用编辑docker-compose.yml文件，录入以下内容。
version: &amp;#34;3.0&amp;#34; services: memos: image: ghcr.io/usememos/memos:0.15.0 container_name: memos user: 1000:1000 restart: always volumes: - ~/.memos/:/var/opt/memos ports: - 5230:5230 注意，针对官方提供的配置文件，我调整了几个参数：
版本号，从latest指定为0.15.0 用户，默认是root用户运行memos，调整为UID:GID=1000:1000的non-root用户 重启方式，默认没有restart配置参数，调整为总是重启（always） 编辑好配置文件以后，开始部署即可</description>
    </item>
    
  </channel>
</rss>
