<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tailscale on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/tailscale/</link>
    <description>Recent content in Tailscale on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 14 May 2024 18:42:33 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/tailscale/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装Tailscale教程</title>
      <link>https://ruohai.wang/202405/tailscale-install-on-ws1408/</link>
      <pubDate>Tue, 14 May 2024 18:42:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/tailscale-install-on-ws1408/</guid>
      <description>前言 先说明一下我的迅雷赚钱宝一代ws1408（下文称做小方块）刷的系统是openwrt 21.02.7（文章末尾有下载链接），内核3.10.33。
之前没有想到这个小方块的可玩性还挺强，因为内核太老、内存太小导致没有什么可用的固件，只能基于现有的openwrt固件来屎上雕花，让它继续发光发热了。
tailscale官方只提供了一键安装的脚本，那我们只能找第三方编译好的安装包了，项目地址：【Azathothas/Static-Binaries】。
有了已经编译好的安装包，那我们就开始吧！
安装 【Azathothas/Static-Binaries】项目的release页面提供的二进制包，不仔细看还以为同样的包提供了两份，仔细看一个是tailscale，另一个是tailscaled。
根据我浅薄的linux使用经验，名称中带d的那个肯定就是守护进程的版本惹。
项目的手册中提供了安装教程，地址【Install TailScale】，英文阅读无障碍的话直接看项目手册就行。
根据我实际安装的经验，tailscale不带d的这个安装包，是用来进行初始化配置的（比如设置子网路由、关联tailscale账号），tailscaled带d的安装包，是实际运行的服务程序。所以，想要跑tailscale，需要两个安装包都下载到本地。
不过项目的release页面还提供了merged版本，看名字我觉得是二合一版本，但实际测试发现还是俩包分开的比较容易上手，所以这篇文章不聊这个merged版本。
第一步：下载
小方块用的芯片是我们的老朋友amlogic s805，硬件架构是arm32/armv7l/armhf，固件openwrt用的init系统是sysv，根据这些信息找到正确的安装包：
注意有两个安装包，一个是初始化配置用的、不带d的tailscale，一个是带d的tailscaled。
# 下载tailscaled wget -O tailscaled https://github.com/Azathothas/Static-Binaries/releases/download/tailscale_v1.66.1/tailscaled_arm_abi_Linux # 下载tailscale wget -O tailscale https://github.com/Azathothas/Static-Binaries/releases/download/tailscale_v1.66.1/tailscale_arm_abi_Linux # 给俩文件添加可执行权限 chmod +x tailscale tailscaled 到这里，下载的步骤就完成了。
第二步：将tailscaled添加为sysv服务
网上搜了一圈没找到tailscale的sysv配置文件，所以根据以往经验，再参考systemd版本的配置文件，可用的sysv配置文件如下。我的tailscale文件保存在/mnt/sdcard目录下，请根据自己的实际情况调整这个路径。
# 进入目录 cd /etc/init.d/ # 创建配置文件 touch tailscaled # 编辑配置文件(没有nano可以用vim) nano tailscaled 然后把这段代码粘贴进去，保存退出。
#!/bin/sh /etc/rc.common START=96 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/sdcard/tailscaled } stop() { service_stop /mnt/sdcard/tailscaled --cleanup } 最后给文件添加可执行权限并启动</description>
    </item>
    
    <item>
      <title>Tailscale出口节点（Exit Nodes）功能部署</title>
      <link>https://ruohai.wang/202402/tailscale-exit-nodes/</link>
      <pubDate>Tue, 06 Feb 2024 10:04:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/tailscale-exit-nodes/</guid>
      <description>前言 这段时间忙着照顾家人，因为老母亲又双叒叕因为主动脉夹层的原因做了第二次心脏手术，需要24小时陪护，所以我大部分时间呆在乡下，就有了乡下 &amp;amp; 杭州异地组网和通讯的需求。
上一篇文章记录了tailscale的子网路由（subnet routers）功能，我拿它作为跳板机，这样我只需要在一台设备上安装tailscale，就可以直接通过原来的 192.168.1.* 的内网ip地址直接访问局域网里的nas、玩客云、openwrt，甚至可以直接访问光猫的后台地址，不需要再每台机器装tailscale然后使用100开头的vpn网络IP地址来访问。
tailscale还有另一个功能：出口节点（exit nodes）。看了官方文档，作为中国人，我第一时间想到的应用场景，就是翻墙。😄
正好我好友jrr在澳洲，和他一起玩了一下这个exit nodes功能，自此我有了一个悉尼的网络出口，😄。
功能释疑 exit nodes的官方文档：Exit Nodes (route all traffic)
通俗来讲，就是在一个设备上安装tailscale，启用exit nodes功能。然后其它装了tailscale的机器，比如机器A，可以指定这台设备为出口（exit node）。之后机器A的所有网络流量都会由指定的出口节点进行路由转发。
官网的示意图。
部署 第一步：下载&amp;amp;安装tailscale
官方地址：Download
第二步：开启ip转发功能
这里以linux为例，因为我把tailscale装在linux小盒子上。
官方文档：Exit Nodes install
如果你的linux系统存在/etc/sysctl.d路径，执行以下命令
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf sudo sysctl -p /etc/sysctl.d/99-tailscale.conf 否则执行以下命令
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.</description>
    </item>
    
    <item>
      <title>Tailscale子网路由（Subnet routers）功能部署</title>
      <link>https://ruohai.wang/202401/tailscale-subnet-router/</link>
      <pubDate>Sun, 28 Jan 2024 21:03:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/tailscale-subnet-router/</guid>
      <description>前言 自己折腾nas或者linux小机器，都会碰到内网穿透的需求，tailscale就是其中一个非常方便、好用又免费的方案。
但我之前只是用它的最简单、基础的vpn组网功能，这两天偶尔看到别人分享它的子网路由（subnet routers）功能，发现非常契合我的使用场景，所以抓紧时间折腾了一遍，顺便做个记录。
子网路由 简单文字描述这个功能，约等于就是个跳板机：
局域网内有很多个服务器 这些机器在内网都用192.168.*.*ip进行访问 并不是每台机器都能装tailscale 在一台机器上部署tailscale，开启subnet routers，通过这台机器，在已经用tailscale组网的机器上，可以直接用192.168.*.*ip访问内网的机器 看上去还是比较拗口，那就直接看官网的图片解释吧
部署 先贴上官网的subnet routers的指导手册：Subnet routers and traffic relay nodes
然后我自己部署过程的步骤拆解：
第一步：安装tailscale
官网下载页面指路：https://tailscale.com/download
注意：到安装完成那一步即可，不需要启动。
第二步：开启ip转发
使用子网路由功能必须开启本机的ip转发。
这里以linux为例，这里直接照搬官网内容：
如果你的linux系统存在/etc/sysctl.d目录，使用如下命令：
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf sudo sysctl -p /etc/sysctl.d/99-tailscale.conf 否则使用如下命令：
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.conf sudo sysctl -p /etc/sysctl.</description>
    </item>
    
    <item>
      <title>Linux下Tailscale的安装和配置</title>
      <link>https://ruohai.wang/202307/tailscale-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:25:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/tailscale-setup/</guid>
      <description>前言 我的nas和玩客云armbian小主机的外网访问方案一直用的是ipv6 + ddns，因为我手上正好有个域名，这个方案确实很好用，不仅方便而且配置也很简单，除了ipv6地址更新的十分钟左右的时间会短暂掉线，其它方面我觉得已经十分完美。
今天在twitter有朋友问题玩客云机器刷armbian后能不能跑tailscale，我说没用过不清楚，但勾起了我的好奇心，所以按照官方文档的手册安装配置了一下，emmm，同样很好用，同样很方便而且配置简单，简单到压根就没有几步操作，教程都没什么好写的。
但我在安装组网好了以后还是碰到了一点简单的使用小疑惑。而且tailscale和ipv6公网使用场景虽然存在重叠，也是有一些差异化的，所以记录一下。
安装 首先就是去【tailscale官网】注册账号了，没啥好说的，根据官网提示操作就行了。注册好了以后，ssh进linux机器，开始安装。
第一步：安装，一条命令，耐心等它跑完，跑完会提示安装成功。
curl -fsSL https://tailscale.com/install.sh | sh 安装成功的提示
第二步：根据终端里安装成功的提示，启动tailscale。
tailscale up 启动成功以后，终端会出现一个url链接，复制链接到浏览器中打开，根据提示下一步再下一步，把设备添加到自己账号。
第三步：在tailscale的个人中心的machines标签页，可以看到自己账号下的设备。
可以看到每个设备后面都分配了一个100开头的ipv4地址。到这一步就完成了tailscale的安装、添加设别和异地组网。
使用 假定我现在需要在debian这台机器上访问onecloud机器上的一个服务（比如群晖，端口是5000)，那只需要在debian机器上打开浏览器，输入onecloud的tailscale分配的ipv4地址和端口号，也就是100.xxx.xx.xx:5000，就可以惹~~实测基本能跑满带宽。
实际体验下来，注册、安装、使用，完全就是傻瓜式操作，0配置就可以使用，比ipv6 + ddns的方案还要简单。
使用场景 再说一下tailscale和ipv6方案使用场景的不同。默认配置下，ipv6是公网开放的，意味着只要知道ipv6地址和端口号，所有人都可以访问到，这就带来一个安全上问题，需要用户自己进行一些安全加固的配置，比如装防火墙、修改服务的默认端口、使用复杂密码等等。但tailscale只是一个账户下的局域网之内的设备之间开放访问，并不对公网开放，而且tailscale服务本身的安全措施就拉满。
所以比较合适的使用场景是：
公开资料，比如网络资源（网上能下载到的各种电影电视剧电子书音乐图片文章），用ipv6 + ddns即可，泄露也无妨。 个人资料，（工作生活家庭中的照片音频文档等私密材料），用tailscale，杜绝私密资料泄露。 </description>
    </item>
    
  </channel>
</rss>
