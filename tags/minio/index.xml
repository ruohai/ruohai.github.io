<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MinIO on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/minio/</link>
    <description>Recent content in MinIO on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Sep 2024 21:08:37 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/minio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Picgo上传文件到MinIO</title>
      <link>https://ruohai.wang/202409/picgo-plugin-for-minio/</link>
      <pubDate>Fri, 06 Sep 2024 21:08:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/picgo-plugin-for-minio/</guid>
      <description>前言 上一篇文章中完成了minio的部署和存储桶的创建，接下来就简单记录下用picgo作为客户端往minio传文件吧。
我这里用的词是【传文件】而不是【传图片】，因为minio是一个oss服务，它可以保存任何格式的文件。而picgo虽然定位是一个【图片上传】软件，但实际它并不会限制文件格式，因为文件格式的校验是由【服务端的图床程序】来完成的。
所以picgo + minio的组合，就可以当作一个【文件上传客户端 + 文件存储服务器】来使用。
配置 第一步：在minio中创建 access key
要开启minio的api上传功能，首先要在minio配置一个access key。
创建access key以后记得保存key和secret信息，因为minio只会展示一次secret。
第二步：在picgo中安装minio插件
picgo中安装插件需要本地有nodejs环境，自行安装即可，不在赘述。
在picgo硬件内的插件设置中，搜索minio，安装红色icon的这个插件。
插件安装号以后，在【图床设置】中进行配置
第三步：图床配置
每一个配置项的具体意思，可以查看插件【picgo-plugin-minio】在github项目主页的介绍。
也可以参考网友Gzzz制作的图表
完成配置后保存即可。
到这里所有配置都完成了，🎉
参考文章 使用 MinIO+PicGo 在服务器搭建图床 使用Minio与Picgo搭建个人图床 Herbertzz/picgo-plugin-minio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用MinIO自建OSS服务</title>
      <link>https://ruohai.wang/202409/minio-install-guide/</link>
      <pubDate>Fri, 06 Sep 2024 09:20:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/minio-install-guide/</guid>
      <description>前言 minio是一个对象存储方案（oss），一般都是公司企业之类的商业用途，个人用到的场景很少🤣，不过我还是找到了一个对我来说可以使用的场景，那就是用来做自建图床！
话不多说，记录以下minio的部署。我用的部署方式是下载已经编译好的二进制包，没有选择docker部署是因为我用来做host的机器是迅雷赚钱宝一代，系统是3.10内核的openwrt，用不了docker。
注意事项 minio从2022年开始，存储文件的方式就采用了纠删码格式，说人话就是上传的文件不再保留原格式，在文件系统里看到的是文件夹 + xl.meta文件。
如果需要获取源文件，必需要通过api或者web后台下载。
这个设计可以理解，minio毕竟是为了分布式存储设计的，纠删码可以理解为一种文件分片算法，类似raid但是比raid更先进，但缺点就是不适合个人用户。所以用minio来搭建图床服务就像杀鸡用牛刀，请根据自己的使用场景谨慎选择。
部署 第一步：安装
首先到【minio下载页面】找到对应自己硬件架构的二进制包，我的硬件是arm32/armv7，所以文件路径是/server/minio/release/linux-arm/minio。
用wget下载到本地后记得添加可执行权限
# 下载 wget -O minio https://dl.min.io/server/minio/release/linux-arm/minio # 添加可执行权限 chmod + x minio 第二步：启动
作为一个oss服务，肯定需要指定用来保存文件的路径了，所以最简单的启动命令如下
./minio server /path/to/save/data minio的默认监听端口是9000，启动成功以后可以打开浏览器访问http://host_ip:9000就进入minio的web控制台 了，默认账户名和密码都是minioadmin。
如果要指定端口号，启动命令添加--address参数即可。
./minio server --address=:12345 /path/to/save/data 这里有一个注意事项，minio区分了api的端口和web控制台的端口，默认的9000端口，或者在启动命令中指定的端口号，其实都是api端口。在浏览器中访问api端口时会自动跳转到webui的端口，如果装了防火墙的话记得放行端口。
如果要指定配置文件目录，在启动命令中添加--config-dir参数
./minio server --address=:12345 --config-dir /path/to/config /path/to/save/data 第三步：修改默认账户密码
从服务的启动日志中可以看到默认的账户密码都是minioadmin，而且会有黄字提醒修改账户密码。
修改密码的方式是在用户环境变量中添加两个参数MINIO_ROOT_USER和MINIO_ROOT_PASSWORD。根据自己的情况，在~/.bashrc或者/etc/profile中添加两行。
export MINIO_ACCESS_KEY=jackma export MINIO_SECRET_KEY=1234567890 编辑保存后，记得重新加载配置文件使配置生效
# 根据自己情况二选一 source .bashrc source /etc/profile 第四步：创建存储桶并配置匿名权限
创建存储桶
命名后确定即可。下面三个开关分别指版本控制、文件锁定、数量限制，根据自己需求选择是否启用。
创建的存储桶默认是私有private权限。如果要用作图床，也就意味着匿名访客需要有只读权限。
点击要编辑权限的桶，这里以2024为例
点击Anonymous后点击add access rule添加规则
在prefix一栏输入/（斜杠的意思是所有规则中优先级最高），access一栏选择readonly即可，然后保存。
第五步：编辑systemd/sysvint服务文件
systemd的配置文件</description>
    </item>
    
  </channel>
</rss>
