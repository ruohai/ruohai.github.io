<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/linux/</link>
    <description>Recent content in Linux on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 Jul 2023 21:06:10 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux下udevil无法自动挂载exfat格式U盘的问题解决</title>
      <link>https://ruohai.wang/202307/udevil-doesnt-amount-exfat-bugfix/</link>
      <pubDate>Tue, 25 Jul 2023 21:06:10 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/udevil-doesnt-amount-exfat-bugfix/</guid>
      <description>前言 之前文章提到过，我在linux下用来实现u盘、移动硬盘自动挂载的方案是udevil。这个方案的好处是安装了udevil以后，几乎是0配置，随便插任何u盘、移动硬盘都可以自动挂载。而且udevil的软件包依赖关系非常简单，不会出现本体几百kb但是需要几个mb的依赖包。
但是今天碰到了一个bug，就是udevil无法自动挂载exfat格式的u盘，换ext4、ntfs都正常，只有exfat不行。
照例上网搜解决方案，最后在官方repo的issue里找到了。
bugfix 先贴上两个解决方案的链接：
Udevil dont mount usb-stick (exfat fs) with linux kernel 5.5.3 udevil doesn&amp;rsquo;t mount exfat media 可以留意到其中一个issue的发布时间是2014年，也就是从2014至今，快10年的时间了，这个bug都没有修复。
解决方案就是编辑udevil的配置文件，路径/etc/udevil/udevil.conf，找到default options的配置块，其中有一条default_options_exfat记录，把这条记录中的noempty参数删掉，然后重启udevil服务即可。
修改完以后重启udevil服务。注意命令中的jack改成自己linux系统的用户账户名。
systemctl restart devmon@jack.service </description>
    </item>
    
    <item>
      <title>Linux使用dd命令克隆磁盘（制作系统镜像）</title>
      <link>https://ruohai.wang/202307/linux-use-dd-to-clone-disk/</link>
      <pubDate>Mon, 24 Jul 2023 06:57:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-use-dd-to-clone-disk/</guid>
      <description>前言 最近经常玩电子垃圾，之前都是刷别人制作好的初始系统镜像img文件，每次刷机都要进行一些基础配置：替换固件中的一些文件、设置账户和密码、改国内源、改ssh配置、装基础软件。
但因为我经常重刷，每次重刷又要把上面提到的基础配置流程走一遍，少说也要半个小时。重复了一次又一次以后，我肯定要考虑自己制作镜像文件了，类似早年的windows ghost，把完成了基础配置的系统直接做成镜像，下次刷机就不用再无意义的重复了。
linux下实现这个功能，用dd命令。
准备工作 目的是备份整个系统盘 假定系统盘是/dev/sda 要另一个u盘或者移动硬盘做备份盘，这里假定备份盘为/dev/sdb。 制作镜像 第一步：插上备份盘，用命令lsblk确认系统盘和备份盘的名称，系统盘为/dev/sda，备份盘为/dev/sdb。
第二步：挂载备份盘到/mnt
mount /dev/sdb /mnt 第三步：制作镜像。
dd if=/dev/sda of=/mnt/sda_bakcup.img 这是最简单的备份方式，不考虑任何其它参数（比如bs和count），就是1:1的备份，如果系统盘是2GB（指整个盘的大小，不是指已使用的空间），那制作出来的镜像也就是2GB。
如果想制作的镜像是压缩包，减少占用空间，这里以xz格式为例
dd if=/dev/sda | xz &amp;gt; /mnt/sda_backup.img.xz 优化 dd命令可以通过增加-bs和-count来优化传输速度和镜像大小。
先看下bs和count的定义：
bs=bytes：同时设置读入/输出的块大小为bytes个字节，可以分成ibs和obs两个参数分别设定读和写。
count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数
bs用来设定每次读写的数据量，读取指定数据量为一个块（block）到缓存，然后从缓存把指定的数据量写到备份盘。无论是u盘、hdd还是ssd，一般大文件的连续读写速度都是远远高于小文件的随机读写，所以这个值可以设置的大一些。但也要根据自己的实际情况调整，比如小文件特别多时，可以分开设定读的数据量（ibs）和写的数据量（obs），更好的优化速度。
count用来设定读取多少个块（block）以后停止读取。如果这个值留空，全盘克隆时，原盘200G，生成的镜像也是200G，所谓1:1复制。但其实只需要克隆数据就可以了，没有使用的空白空间不需要写到镜像里，比如200G的盘，实际只使用了8GB，假定bs=1M，计算以后可得count应该是8192，考虑到空间冗余，可以设定count=9000，那生成的镜像文件就是9000M，不会出现无意义的空白空间占用镜像体积。
xz命令可以通过-T增加线程数，默认是1
增加三个参数以后的例子：
dd bs=1M count=1400 if=/dev/sda | xz -T3 &amp;gt; /mnt/ws1508-backup-20230724.img.xz ╮(╯▽╰)╭
参考文章 1： https://www.runoob.com/linux/linux-comm-dd.html</description>
    </item>
    
    <item>
      <title>Linux下从0开始部署WordPress（一）</title>
      <link>https://ruohai.wang/202307/wordpress-installation-guide/</link>
      <pubDate>Sat, 22 Jul 2023 21:51:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-installation-guide/</guid>
      <description>前言 虽然上一篇文章说我炸了，哦不是，我悟了，以后不用linux了。但奈何我还有好几篇软件/服务的安装记录没有写，比如这篇wordpress的部署安装。
wordpress的安装教程网上多如牛毛，本来也不差我这一篇。但我在wordpress这个坑，不是，这个软件上耽搁了十多年，有很大的原因正是网上的教程多如牛毛。十多年前如此，现在依然如此。
wordpress官方有著名的5分钟安装教程，但这个教程前提是已经搭好了环境。很多热心网友写了很多教程，但大部分在记录的时候都省略了很多细节且毫无条理，有很多一上来就让装宝塔面板、让装xmapp。NO，这些都不是我想要的，我想要一个从一个干净的linux系统开始一步步记录的，我想要的是一个小白按照这篇文章一步步操作就能完成搭建自己的wordpress。
wordpress说白了就是一个php网站模板，既然是网站，就需要一些配套的服务，简而言之，搭建wordpress，分为5个步骤：
有一台主机或vps（系统选linux，这里以debian为例） 安装web server(选apache2) 安装数据库（选mariadb） 安装php 配置wordpress 因为内容比较多，所以准备分成几篇来写。这篇的主要内容是：apache2的安装和配置。
前期准备 有一台linux主机，或者vps。这里以debian为例。
安装apache2 web server可选nginx或者apache2，这里以apache2为例。
apt install apache2 等命令跑完以后，在浏览器中访问主机的地址，http://host-ip，看是否显示apahce2的欢迎页面。
默认到这一步就完成了apache2的安装，但这里有一些进阶内容（如何修改apache2配置文件），如果没有兴趣看的话，恭喜你，下面内容都不用看了！
进阶内容 apache2的网站根目录默认路径是/var/www/html，有很多教程确实就会把wordpress安装到这个目录下。但这有两个问题，一个是我想自定义网站目录方便管理（假定/data/wordpress），二是var目录下涉及root权限。
要自定义网站目录，就要编辑apache2的配置文件，路径/etc/apache2，目录结构如下：
apache2.conf是总配置文件，一般不动 网站配置文件放在sites开头的两个文件夹下，其中sites-available是可用的配置，sites-enabled是实际生效的配置。 sites-enabled里面的的那个默认文件000-default.conf只是个软链接，真实文件在sites-available 所以合理的配置方法是：在sites-available修改或者直接新建，然后把配置文件通过软链接放到sites-enabled使其生效 那就开始配置吧！这里选择删掉默认的那个000文件，新建wordpress.conf，方便辨认和管理。
# 进目录 cd /etc/apache2/sites-available # 删掉默认文件 rm 000-default.conf # 创建新文件 nano wordpress.conf 添加如下内容，保存后退出。网站默认80端口，端口要自定义的话改掉80。
&amp;lt;VirtualHost *:80&amp;gt; DocumentRoot /data/wordpress &amp;lt;Directory /data/wordpress&amp;gt; AllowOverride none Require all granted &amp;lt;/Directory&amp;gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &amp;lt;/VirtualHost&amp;gt; 然后创建软链接
# 进目录 cd /etc/apache2/sites-enabled # 创建软链接 ln -s .</description>
    </item>
    
    <item>
      <title>我悟了~</title>
      <link>https://ruohai.wang/202307/i-boomed/</link>
      <pubDate>Sat, 22 Jul 2023 17:56:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/i-boomed/</guid>
      <description>翻看了闲鱼捡垃圾的记录，还有网心云的收益记录，开始折腾armbian应该是从6月18号开始，今天是7月22号，算起来一个月多4天。
但给我的感觉是最近半年似乎都在折腾armbian/debian/linux。
今天又是准备刷机，但不是给ws1608刷，不是给ws1508刷，是给闲置了两年多的intel nuc11pahi5刷，准备刷个debian。
但一下午都在翻车，从中午12点开始，翻车到傍晚5点，整整5个小时。一开始是忘记了给x86刷机的U盘只是做引导 + 系统镜像的作用，不像armbian小主机那样u盘是启动盘+系统盘二合一。后来是debian netinst版本在装机的时候必须要联网，这我能理解，而且我已经在虚拟机里装过好多次了，虽然联网下载软件确实有点耗时，但之前每次耗时大概也就5~20分钟左右。不过下午在nuc上安装的时候，联网下载的预计时间竟然离谱的要3~4小时甚至一度出现了天（D）这个时间单位，卧槽我明明已经选择了国内ustc的镜像站啊，马勒戈壁。再然后我依然用netinst的镜像安装但是这次选择不选镜像站而是跳过这一步！结果还没来得及称赞自己机智就被debian打了脸，离线安装以后竟然连open ssh server都没有，意思是ssh都没法连。既然netinst版翻车，我换完整版吧，完整版（dvd）的体积竟然达到了惊人的3.7GB。作为debian衍生的ubuntu server才1.7G啊。我估计完整版里应该是塞了所有的桌面环境吧。
到这一刻我对debian的厌恶已经达到了顶峰，为什么要有必须联网安装的netinst版，为什么完整版要塞那么多东西进去，为什么不能像ubuntu那样分出各种flavor的单独安装包和单独的server版本。马勒戈壁。
(╯‵□′)╯︵┻━┻
然后我觉得自己悟了（i boomed），获得了inner peace。我拆掉了nuc和它硕大笨重的电源适配器，重新装进包装盒，拆掉了显示器，拆掉了ws1508，删掉了虚拟机里的debian，重置了vps上的debian，把各种线缆绕好再用捆扎带邦好统统放进收纳箱。
只保留了一台ws1608当作qbit下载机器和samba文件服务器。
看了下时间，7月22号。
不玩linux了。</description>
    </item>
    
    <item>
      <title>Linux下user is not in the sudoers file问题的解决</title>
      <link>https://ruohai.wang/202307/linux-sudo-previlege-error-fix/</link>
      <pubDate>Sat, 22 Jul 2023 01:52:09 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-sudo-previlege-error-fix/</guid>
      <description>前言 最近linux使用的越来越频繁，对用户、组、权限开始慢慢多了一些了解，慢慢就从之前root一把梭改成用禁掉root登录 + 低权限账号配合sudo进行系统管理。
但这样谨慎的操作的日常使用中碰到了一些问题，比如在vps和自己的虚拟机上安装debian时，从root切换到低权限账户（假定是jack），用sudo会提示jack is not in the sudoers file，甚至在root账号下也会提示sudo: command not found。
这种情况之之前在用ubuntu和armbian的时候没见过啊，搜了一些解决方案，这里做简单记录。
报错：sudo: command not found 这个报错通常情况下是因为sudo没有安装。讲真我也用过好多linux发行版（在虚拟机里简单体验），这还是第一次见到连sudo都没装的。
apt install sudo 报错：jack is not in the sudoers file 网上有一些劣质的文章里说这个报错的解决方案是在/etc/sudoers加一条。
jack ALL=(ALL:ALL) ALL NO，不是这么改的。不是直接给用户授权，而是给sudo组授权，通过sudo命令来让低权限用户临时使用root权限。
先确认/etc/sudoers配置文件里有没有这一条，没有就加上去，保存退出。
%sudo ALL=(ALL:ALL) ALL 然后执行以下命令，把用户jack添加到sudo组。
usermod -aG sudo jack 到这里就完成配置了。默认jack是低权限账户，需要root权限时通过加sudo命令来授权。</description>
    </item>
    
    <item>
      <title>这个10多年的坑我今天终于把他趟平了~</title>
      <link>https://ruohai.wang/202307/wordpress-i-nailed-it/</link>
      <pubDate>Fri, 21 Jul 2023 22:10:19 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-i-nailed-it/</guid>
      <description>说起来大学的时候就想自己折腾wordpress了，但毕竟不是计算机专业，网上的教程搜了好几天，从vps到域名，从环境搭建到参数配置，各种wordpress五分钟教程琢磨了好几天，愣是没搞明白。
这件事就这么搁置了，一搁置就是这么多年。因为之前受的折磨给我留下的太深的伤害，所以之后再弄博客，选hexo选typecho选hugo我都不会去选wordpress。
但今天心血来潮，准备把这个坑填了。
说来惭愧，虽然这些年中间我也转行当了几年水货程序员（java web），但今天弄wordpress，十多年前的那种茫然无措的感觉再一次体验到了。
但是现在，right now，我搞定它了~
明天我就写一篇【从0开始动手搓一个wordpress网站】的教程，要为wordpress的安装教程正本清源！让完全没有编码经验的小白也可以按部就班的完成搭建！
😄</description>
    </item>
    
    <item>
      <title>Linux下CIFS设置开机自动挂载smb共享文件夹</title>
      <link>https://ruohai.wang/202307/cifs-auto-mount-at-linux-start-up/</link>
      <pubDate>Fri, 21 Jul 2023 00:37:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/cifs-auto-mount-at-linux-start-up/</guid>
      <description>前言 前两天写过一篇用cifs挂载smb共享文件夹的文章，但那篇文章中多有疏漏，本来直接在那篇文章中update补漏修正就行，但最近懒了，直接择重点重写一篇。
linux挂载smb共享文件夹涉及到很多权限分配的设置，比如smb服务端设置的用户和组、本地分配的用户和组、是不是指定文件和文件夹的默认权限。如果实在搞不清，那就直接root:root和0777一把梭，但千万而且一定要意识到root和0777的潜在风险。
设定 注意下面出现的配置文件中的ip地址、用户名、组名、密码都要根据自己的情况做修改。😄
设定本地用户都是jack，所属的组是jack-group 设定的smb共享文件夹的访问地址是//192.168.1.1/share，访问用户smb，访问密码123456 设定本地挂载smb共享文件夹的路径是/mnt/share 挂载 linux下安装cifs-utils后，挂载局域网smb共享文件夹，注意-o参数中别忘记加上iocharset=utf8以避免中文乱码的问题。
mount -t cifs //192.168.1.1/share /mnt/share -o username=smb,password=123456,iocharset=utf8 取消挂载
umount /mnt/share 开机自动挂载 编辑/etc/fstab文件，添加一行：
//192.168.1.1/share /mnt/share cifs credentials=/home/jack/.cifs_creds,file_mode=0755,dir_mode=0755,iocharset=utf8,uid=jack,gid=jack&amp;#39;s_group 0 0 注意：
smb访问账户的用户名和密码，建议单独新建一个文件来保存而不是明文写在fstab。我这里新建/home/jack/.cifs_creds。认证文件的格式如下： username=smb password=123456 # 下面这一栏可以不要 domain=WORKGROUP domain一栏可选，不填的话系统会自动猜（意味着猜不中就无法挂载），一般默认都是WORKGROUP uid=jack,gid=jack&#39;s_group，这是指定挂载的smb共享文件夹的本地用户和组分配给谁、给哪个组，如果没有指定uid和gid，默认就是root:root。 file_mode=0755,dir_mode=0755，这俩很好理解，文件的权限和文件夹的权限，0755什么意思不再赘述，不懂得话0777一把梭。 iocharset=utf8用来处理中文乱码问题 编辑完/etc/fstab，执行以下命令使配置生效：
# 重载 systemctl daemon-reload # 重新挂载 mount -a OK，大功告成~
😄</description>
    </item>
    
    <item>
      <title>Linux报错Read-only file system的问题处理</title>
      <link>https://ruohai.wang/202307/linux-read-only-filesystem-bugfix/</link>
      <pubDate>Wed, 19 Jul 2023 17:35:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-read-only-filesystem-bugfix/</guid>
      <description>前言 吐槽完赚钱宝二代（ws1508）的鸡肋配置以后，今天还是不太甘心，想来想去，最后给它刷了支持nand的那版固件，基于debian 10（buster），内核3.10。
这版固件有很多先天不足：
内核太老 只能识别4GB的nand存储空间（虽然我俩机器的包装盒上都标了32GB的nand存储） debian 10（buster）已经EOL，源仓库已经不再更新，里面的包都太老了 但如果能接受以上这些缺点，似乎也算是一个不错的选择。毕竟那个珍贵的usb2.0接口需要用来外挂数据盘。
装samba测试了一下，可以跑满百兆带宽，也不会出现缓存写满以后卡io导致系统假死的问题。但就算跑满了百兆也就10~12MB/s而已，不堪大用。
但是 没错，重点来了，系统直刷nand，我体验了2天以后，最大的问题是：nand很容易出现坏块！！！！
这个问题非常致命，当系统检测到nand坏块以后会报错errors，然后这版固件/etc/fstab配置的挂载参数中，有一个errors=remount-ro，也就意味着一旦使用过程中碰到坏块的block，整个系统立刻就会重新挂载为只读（readonly）模式保护数据。
而赚钱宝二代这玩意是2015~2016年的设备，产品定位就是为了跑pdcn，至少是7年的老矿机了，nand出现坏块几乎是必然。
解决方案 系统盘进入只读保护模式以后，任何写操作都会报错，提示如下：
Read-only file system 解决办法就是文件系统修复。先用df -hT查看根目录挂载的分区和格式。
Filesystem Type Size Used Avail Use% Mounted on udev devtmpfs 231M 0 231M 0% /dev tmpfs tmpfs 48M 4.0M 44M 9% /run /dev/data ext4 2.8G 795M 1.9G 30% / tmpfs tmpfs 238M 0 238M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock tmpfs tmpfs 238M 0 238M 0% /sys/fs/cgroup tmpfs tmpfs 238M 4.</description>
    </item>
    
    <item>
      <title>Linux更新源时提示the public key is not available问题解决</title>
      <link>https://ruohai.wang/202307/apt-update-public-key-error/</link>
      <pubDate>Mon, 17 Jul 2023 15:02:31 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apt-update-public-key-error/</guid>
      <description>手上的赚钱宝二代（ws1508）尝试刷入了【唯一一个支持nand flash的版本】，这版固件是基于debian10/buster，内核3.10，不论是debian版本还是内核都比较老。
刷入系统，启动成功以后，根据帖子内容进行了简单的基础配置，然后操作apt update，很快就出现了错误提示。
Err:4 http://mirrors.ustc.edu.cn/debian buster-backports InRelease The following signatures couldn&amp;#39;t be verified because the public key is not available: NO_PUBKEY 0E98404D386FA1D9 NO_PUBKEY 6ED0E7B82643E131 Reading package lists... Done W: GPG error: http://mirrors.ustc.edu.cn/debian buster-backports InRelease: The following signatures couldn&amp;#39;t be verified because the public key is not available: NO_PUBKEY 0E98404D386FA1D9 NO_PUBKEY 6ED0E7B82643E131 E: The repository &amp;#39;http://mirrors.ustc.edu.cn/debian buster-backports InRelease&amp;#39; is not signed. N: Updating from such a repository can&amp;#39;t be done securely, and is therefore disabled by default.</description>
    </item>
    
    <item>
      <title>Linux下安装DDNS-GO</title>
      <link>https://ruohai.wang/202307/ddns-go-install/</link>
      <pubDate>Mon, 17 Jul 2023 00:24:52 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ddns-go-install/</guid>
      <description>前言 没有前言，懒得写了。
DDNS-GO官方github repo指路：https://github.com/jeessy2/ddns-go
下载 在系统里创建安装目录
mkdir -p /usr/local/ddns-go 根据自己的硬件平台下载对应版本的安装包。我的设备依然是它，赚钱宝二代（ws1508），armv7。
# 进目录 cd /usr/local/ddns-go # 下载 wget https://github.com/jeessy2/ddns-go/releases/download/v5.3.7/ddns-go_5.3.7_linux_armv7.tar.gz # 解压 tar -zxvf ddns-go_5.3.7_linux_armv7.tar.gz 运行 解压以后得到的ddns-go默认就有执行权限，所以直接./ddns-go就可以跑起来了。但我们肯定是要把添加到systemd服务，并设置开机自启的。
# 新建服务文件 nano /etc/systemd/system/ddns-go.service 粘贴以下内容
[Unit] Description=The DDNS-GO Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/ddns-go/ddns-go -c /usr/local/ddns-go/ddns_go_config.yaml ExecStop=/bin/killall ddns-go [Install] WantedBy=multi-user.target 然后就是大家都喜欢的systemd reload/start/enable三板斧了。
# 重载 systemctl daemon-reload # 启动 systemctl start ddns-go.service # 开机启动 systemctl enable ddns-go.service 配置 ddns-go跑起来以后，默认端口是9876，打开浏览器，访问http://host-ip:9876，就进入ddns-go的webui了，之后就根据自己的需求进行配置。</description>
    </item>
    
    <item>
      <title>Linux下用Nginx给qBittorrent设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/qbittorrent-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 20:14:40 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/qbittorrent-update-to-https/</guid>
      <description>用nginx反向代理给qbit实现https访问，99%的设置都和【Linux下用Nginx给File Browser设置SSL开启HTTPS访问】一样，没错，又是99%的内容都是和filebrowser那篇一样。但还是那个问题，直接照搬的话会有一个坑，完成配置以后，用https访问qbit-webui会显示空白页面并提示unauthorized。
很明显这是碰到了一个安全设置问题，访问被qbit拒绝了。
有两个解决方案。
方案一：关闭qbit的一些安全设置 qbit webui设置中的【启用host header属性验证】和【启用跨站请求伪造保护】两个功能去掉勾选。
方案二：修改nginx反向代理的配置 参考qbit【官方wiki给出的方案】，调整nginx中的一些配置。
假定原规则如下：
location / { proxy_pass http://localhost:8089; } 调整以后的配置如下：
location / { proxy_pass http://localhost:8089; proxy_http_version 1.1; proxy_set_header Host localhost:8089; proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Forwarded-For $remote_addr; # qbit版本v4.2.2以上加入这条保护cookie安全 proxy_cookie_path / &amp;#34;/; Secure&amp;#34;; } 使用以上配置以后，实测qbit webui中可以开启安全设置，注意服务器域名哪里要填localhost。</description>
    </item>
    
    <item>
      <title>Linux下安装Samba服务开启文件夹共享功能</title>
      <link>https://ruohai.wang/202307/samba-setup-to-share-files/</link>
      <pubDate>Sun, 16 Jul 2023 13:15:51 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/samba-setup-to-share-files/</guid>
      <description>前言 局域网如果里有一台24小时开机的低功耗linux主机，那自然是要给它装上samba开启文件共享功能，把它作为一个文件服务器来用。可能有人会问，想开共享文件夹，直接给主机装casaos不就好了，就算不用samba也可以用filebrowser、alist、dufs、chfs之类。emmm，说的很对，但那不是少了很多手动挡的乐趣嘛。而且自己手搓一边，也方便更好的理解samba。
在记录安装和配置的内容时，确实会发现很多细节没法具体一一记录，只能记录下符合我的需求的配置。这时候就会觉得类似casaos这种webui上直接鼠标点点就开启共享的方式方便多了。
前期准备 一台24小时开机的低功耗linux主机，我这里用的是赚钱宝二代（ws1508） linux系统有一个非root的低权限账户，这里假定：jack 如果系统安装了防火墙，记得放行samba服务 samba的安装 debian仓库里就有samba，直接一键安装
apt install samba 安装完成后，可以执行systemctl status smbd看下服务的运行状态。
● smbd.service - Samba SMB Daemon Loaded: loaded (/lib/systemd/system/smbd.service; enabled; preset: enabled) Active: active (running) since Sun 2023-07-16 13:44:59 CST; 11min ago Docs: man:smbd(8) man:samba(7) man:smb.conf(5) Process: 4040 ExecCondition=/usr/share/samba/is-configured smb (code=exited, status=0/SUCCESS) Process: 4043 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS) Main PID: 4044 (smbd) Status: &amp;#34;smbd: ready to serve connections...&amp;#34; Tasks: 4 (limit: 986) Memory: 4.9M CPU: 9.725s CGroup: /system.</description>
    </item>
    
    <item>
      <title>Linux下用Nginx给ttyd设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/ttyd-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 01:17:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ttyd-update-to-https/</guid>
      <description>用nginx给ttyd实现https访问，99%的设置都和【Linux下用Nginx给File Browser设置SSL开启HTTPS访问】一样，直接照搬即可。但如果完全照搬，会发现https下登录ttyd以后，页面全黑，有一个浮窗显示【press enter to reconnect】，没有光标，也没有命令提示符。
很容易就明白出现这个问题是因为ttyd使用的是websocket协议，通过nginx代理转发以后出现了bug。
网上搜了一下解决方案，根据【这个页面】和【这个页面】上的两个解答，需要对nginx的配置内容稍微修改。
注意 设定域名为：jackiechang.cn 设定外网端口为：11111 设定内网端口为：4533 配置文件 server {listen [::]:11111 ssl;server_name jackiechang.cn;ssl_certificate ssl/jackiechang.cn.pem;ssl_certificate_key ssl/jackiechang.cn.key;ssl_session_cache shared:SSL:1m;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;ssl_prefer_server_ciphers on;error_page 497 https://$host:$server_port$uri$is_args$args;location / {# #################################### 这部分定义header是新加的，指定websocketproxy_set_header Host $host;proxy_set_header X-Forwarded-Proto $scheme;proxy_set_header X-Forwarded-Port $server_port;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection &amp;#34;upgrade&amp;#34;;proxy_http_version 1.1;# ###################################proxy_pass http://localhost:4533;}} </description>
    </item>
    
    <item>
      <title>Linux下用Nginx给File Browser设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/filebrowser-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 00:25:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/filebrowser-update-to-https/</guid>
      <description>前言 我用赚钱宝二代（ws1508）和玩客云（ws1608）刷入armbian，然后搓了很多服务，比如file browser、qbittorrent、ttyd、alist、ddns-go、navidrome。这些应用在启动以后，都提供了webui用来管理和控制。再配合当下ipv6的公网ip，实现了外网访问。
但现在又碰到了新的需求（或者说问题），就是这些应用的webui都是http，为了安全，我准备升级到https。其中有一些应用（比如ttyd、firebrowser）确实支持ssl，但也有很多不支持ssl。而且就算支持ssl的应用，各自配置的方式也不相同，不方便后期统一管理。
为了实现这个需求，就需要使用nginx做反向代理。这里以filebrowser为例，做一下简单记录。
前期准备 设备已经实现了ipv6的外网访问，假定域名为：jackiechang.cn 系统已经安装了filebrowser且可以正常访问，假定端口为：8600 以上两个前提已经OK，那外网访问filebrowser的url应该是：http://jackiechang.cn:8600 已经有ssl证书，不管是阿里云买域名送的证书，还是Let&amp;rsquo;s Encrypt的免费证书。 ssl证书需要是nginx的格式，一共两个文件：jackiechang.cn.pem和jackiechang.cn.key。 8600一个端口不能被nginx和filebrowser同时监听，这里假定nginx监听端口是：22222 这里假定的外网端口、本地端口、域名、证书名称，在下面教程中记得根据自己的情况进行修改。 安装nginx 我的主机系统是armbian，debian仓库里有nginx。
apt install nginx nginx安装好以后，可以先执行nginx -t测试一下nginx.conf配置文件的语法是否正确，顺便看一下nginx的路径。我的nginx目录是/etc/nginx。
上传ssl证书 在nginx目录新建ssl文件夹，把两个证书文件放到ssl目录下
mkdir /etc/nginx/ssl 配置nginx nginx的默认配置文件是nginx.conf，但现在为了整洁和方便管理，nginx分出了conf.d、sites-available、site-enabled三个文件夹用来分别存放不同用途的配置文件。我这里用的sites-available/default文件进行配置。
nano sites-available/default 添加如下配置内容，然后保存退出。
server { # 监听ipv6的22222端口 listen [::]:22222 ssl; # 域名 server_name jackiechang.cn; # ssl证书的位置 ssl_certificate ssl/jackiechang.cn.pem; ssl_certificate_key ssl/jackiechang.cn.key; # ssl session缓存和过期时间 ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # ssl的一些加密配置 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; # 这句是用来http重定向到https。http访问时nginx会报错误码497，直接把error_page重定向到https # 同一个端口实现http重定向到https，也有另外更优雅的实现方式，但我用下来这个拦截error_page是最方便的 error_page 497 https://$host:$server_port$uri$is_args$args; location / { # 把请求转发到本机的8600端口 proxy_pass http://localhost:8600; } } 重启nginx 完成上面的配置以后，先执行nginx -t测试配置文件的语法，没有报错就说明配置OK，接下去重启nginx即可。</description>
    </item>
    
    <item>
      <title>Linux下ttyd使用Git提示Author identity unknown和fatal: $HOME not set问题的解决</title>
      <link>https://ruohai.wang/202307/git-home-not-set-bugfix/</link>
      <pubDate>Sat, 15 Jul 2023 17:50:39 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/git-home-not-set-bugfix/</guid>
      <description>我在ttyd下使用git commit -m &#39;xxx&#39;命令时，出现了一个无法识别git用户信息的错误。
具体报错信息如下：
Author identity unknown *** Please tell me who you are. Run git config --global user.email &amp;#34;you@example.com&amp;#34; git config --global user.name &amp;#34;Your Name&amp;#34; to set your account&amp;#39;s default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got &amp;#39;user@hostname.(none)&amp;#39;) 意思就是git的用户身份认证信息未知，需要用git config --global进行配置。但我已经在系统中配置了git username&amp;amp;email，在本地终端中使用都正常，仅在ttyd中出现了这个bug。
那既然都提示要设置了，就先git config --global设置一下，这时又出现了第二个报错。
fatal: $HOME not set 到这里基本就明白错误原因了，ttyd下git无法识别$HOME环境变量，所以无法读取到~/.gitconfig文件内配置的username&amp;amp;email信息。
解决方案 根据这个报错搜了一下解决方案，根据【stackoverflow上的这个帖子】，解决方案就是用git config --system来设定git用户信息
git config --system user.</description>
    </item>
    
    <item>
      <title>Linux下安装ttyd</title>
      <link>https://ruohai.wang/202307/install-ttyd/</link>
      <pubDate>Sat, 15 Jul 2023 16:38:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-ttyd/</guid>
      <description>前言 ttyd，webui版本的终端，和本地终端功能一致，特别适合出门在外没有带自己电脑但又需要访问自己vps进行操作的场景，只需要打开浏览器，访问配置好的ttyd就OK。
第一步：在系统上创建安装目录
mkdir -p /usr/local/ttyd 第二步：访问ttyd的【github repo】，根据自己的硬件平台，下载对应的的安装包。我是装在ws1508上，选择armhf版本。
# 进安装目录 cd /usr/local/ttyd # 下载安装包 wget https://github.com/tsl0922/ttyd/releases/download/1.7.3/ttyd.armhf 第三步：授权
# 增加可执行权限。这里`ttyd.armhf`，以及下文中出现的`ttyd.armhf`，记得都改成自己的安装包的名字。 chmod +x ttyd.armhf 第四步：先学习一下ttyd的手册。有两个参数后面需要用到，-p指定端口，-c设定认证信息，也就是webui的登录账户和密码，格式是username:password。
USAGE: ttyd [options] &amp;lt;command&amp;gt; [&amp;lt;arguments...&amp;gt;] OPTIONS: -p, --port Port to listen (default: 7681, use `0` for random port) -i, --interface Network interface to bind (eg: eth0), or UNIX domain socket path (eg: /var/run/ttyd.sock) -U, --socket-owner User owner of the UNIX domain socket file, when enabled (eg: user:group) -c, --credential Credential for basic authentication (format: username:password) -H, --auth-header HTTP Header name for auth proxy, this will configure ttyd to let a HTTP reverse proxy handle authentication -u, --uid User id to run with -g, --gid Group id to run with -s, --signal Signal to send to the command when exit it (default: 1, SIGHUP) -w, --cwd Working directory to be set for the child program -a, --url-arg Allow client to send command line arguments in URL (eg: http://localhost:7681?</description>
    </item>
    
    <item>
      <title>Linux下用SFTP命令操作文件上传下载</title>
      <link>https://ruohai.wang/202307/use-sftp-to-handle-file/</link>
      <pubDate>Sat, 15 Jul 2023 14:48:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/use-sftp-to-handle-file/</guid>
      <description>一般要在一台远程vps上进行文件上传下载，一两个文件会用lrzsz(前提是你的终端要支持zmodem），批量文件会用winscp/xftp之类的客户端。但如果自己的终端不支持zmodem，也不想用第三方软件，而且文件也就一两个就想敲命令来完成，因为敲命令泰裤辣，那就用sftp命令。
sftp连接服务器。连接成功后光标处的命令提示符变成 sftp&amp;gt; 。想要免密登录设置同ssh免密登录，可以看这篇文章。
sftp jack@192.168.1.10 -p 22 sftp下载文件并保持源文件名
get /home/jack/robots.txt C:\Users\Jack\Desktop\ sftp上传文件并保持源文件名
put C:\Users\Jack\Desktop\robots.txt /home/jack/ 如果要上传下载一个文件夹，在put/get后面跟一个参数 -r 即可。</description>
    </item>
    
    <item>
      <title>Linux下实现挂载SMB共享文件夹</title>
      <link>https://ruohai.wang/202307/linux-smb-mount/</link>
      <pubDate>Sat, 15 Jul 2023 14:40:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-smb-mount/</guid>
      <description>linux下访问局域网上的smb共享文件夹，需要安装cifs-utils。
apt install cifs-utils 这里假定共享文件夹的网络位置是http://smb_ip/share，用户名smb，密码123456。
mount -t cifs //smb_ip/share /mnt/share -o username=smb,password=123456 -t cifs，挂载的文件类型，smb为-t cifs。 //smb_ip/share，smb共享文件夹的网络位置 /mnt/share，本地挂载的位置 -o，-o后面跟的都是挂载的详细参数配置，smb协议、用户名、密码等等，具体可以看这里详细参数解释，或者看图片。 如果要设置开机自动挂载smb，在/etc/fstab文件中添加一行，保存退出即可。
//smb_ip/share /mnt/share cifs username=smb,passwd=123456 0 0 也可以在/etc/samba/目录下新建配置文件smbpasswd用来保存smb的用户名和密码以方便管理，内容如下。
username=smb password=123456 然后 fstab中添加一行
//smb_ip/share /mnt/share cifs credentials=/etc/samba/smbpasswd 0 0 fstab的格式规范如下
&amp;lt;file system&amp;gt; &amp;lt;dir&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt; </description>
    </item>
    
    <item>
      <title>Linux下给Apache2安装SSL证书</title>
      <link>https://ruohai.wang/202307/apache2-ssl-cert-setup/</link>
      <pubDate>Sat, 15 Jul 2023 14:38:50 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apache2-ssl-cert-setup/</guid>
      <description>拖了好几天一直懒得弄ssl证书，因为这服务器是一朋友闲置我拿来练手的，剩1个月到期。但晚上被大学同学叫出去喝酒，完了回来以后有点精神焦虑，索性把ssl证书给弄了缓解一下情绪。
获取ssl证书的步骤这里就不赘述。直接开始重点。
第一步，获取到的apahce2的证书应该是三个文件：domain.key, domain_chain.crt, domain_public.crt。这仨文件名是阿里云证书的格式。我看到也有叫domain_bundle.crt的，没关系，最后都是写一起的。
拿到证书文件以后，把这三个文件上传到/etc/apache2/ssl目录下，这里的ssl文件夹需要自己新建，名字可以用自己喜欢的，后面配置文件中记得路径同步修改就ok。也可以直接到/etc/apache2/ssl目录下直接用wget下载证书后解压。 第二步：启用apache2的ssl模块
a2enmod ssl 第三步：apache2默认的ssl配置文件的路径在/etc/apache2/sites-available/default-ssl.conf。现在把ssl证书三个文件的路径添加到&amp;lt;VirtualHost *:443&amp;gt;的标签内。
SSLCertificateFile /etc/apache2/ssl/domain_public.crt SSLCertificateKeyFile /etc/apache2/ssl/domain.key SSLCertificateChainFile /etc/apache2/ssl/domain_chain.crt
网上很多教程写到这里就说可以保存退出了。但是要注意，如果你的网站根目录不是apache2默认的/var/www/html而是自定义的目录，那只加这3行是不行的！还需要把网站信息的DocumentRoot和&amp;lt;Directory&amp;gt;的信息也配置进去。
第四步：现在需要把ssl配置文件用软链接映射到/etc/apache2/sites-enabled/目录，命令中的001-ssl.conf文件名可以取自己喜欢的。
ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf 如果不喜欢用软链接，也可以直接把default-ssl.conf文件复制一份到/sites-enabled/目录下。
第五步：重启apache2。
systemctl restart apache2 第六步：如果没有开防火墙（firewalld/iptables），那到上一步就结束了。如果开启了防火墙（我用的是firewalld），记得开放443端口。
# 开放端口 firewall-cmd --add-port=443/tcp --permanent # 防火墙重载 firewall-cmd --reload </description>
    </item>
    
    <item>
      <title>Typecho更改后台登录地址</title>
      <link>https://ruohai.wang/202307/change-typecho-admin-dir/</link>
      <pubDate>Sat, 15 Jul 2023 14:37:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/change-typecho-admin-dir/</guid>
      <description>typecho后台登录url默认就是/admin/，为了安全，还是自定义比较好。
这里假定要把/admin/改成/abcd/，要改两个地方。
网站根目录下的admin文件夹，重命名为abcd
网站根目录下的config.inc.php，把define(&amp;rsquo;TYPECHO_ADMIN_DIR&amp;rsquo;, &amp;lsquo;/admin/&amp;rsquo;)中的admin修改为abcd，然后保存退出
以上两步操作完以后就可以用/abcd/登录网站后台了，成功~</description>
    </item>
    
    <item>
      <title>Linux下从0开始安装Typecho</title>
      <link>https://ruohai.wang/202307/install-typecho-step-by-step/</link>
      <pubDate>Sat, 15 Jul 2023 02:52:12 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-typecho-step-by-step/</guid>
      <description>typecho的安装，官方有【安装指导文档】，但讲实话我看完官方文档是一头雾水的，并不知道要怎么弄。搜其它教程，很多又是配合宝塔面板来部署。宝塔面板我试过官网的demo，并不是我对国产的软件产品有偏见啊，但主题和无处不在的付费升级到pro的入口，我觉得不行。
所以这就是一篇从0开始完全手搓的安装教程。
第一步：安装环境的准备。typecho说白就是一个php网站，要跑php网站，就需要web server。那就nginx或者apache2二选一。这些年nginx风头强劲，apache2日暮西山。但巧了么这不是，我选择apache2。
apt install apache2 -y apache2安装好以后，在浏览器中输入http://host_ip看是否能访问到apache2 index页面，能访问说明安装成功。
第二步：网站要跑起来，有了web server，接下去就是安装数据库。typecho官方说支持mysql、postgresql和sqlite，又到了技术选型的分岔口了。mysql因为oracel这个爹的原因，从debian的源仓库被移除了，postgresql我不熟，略过，那剩下的就只有sqlite惹。其实debian的源仓库里有mariadb-server可以装，但用mariadb的话和mysql一样需要安装mysqli这个php扩展，很不巧mysqli也从debian源仓库里被移除了。开源人都是有洁癖的，碰了oracel的统统都要清理掉。我这里偷懒，只想用apt install一键安装而不是去下mysql安装包，所以数据库最终选择：sqlite。
apt install sqlite3 -y 安装完成后，输入sqlite3，看命令提示符是不是 sqlite3 来判断是否成功，敲.quit退出。
第三步：现在要在apache2中进行virtualhost配置，也就是网站信息配置。可以在/etc/apahce2/apache2.conf文件中配置，也可以/etc/apache2/sites-enabled/目录下配置。为了方便管理，这里选择/sites-enabled/目录。
将目录下的000-default.conf重命名为typecho.conf 在typecho.conf中的&amp;lt;VirtualHost *:80&amp;gt;标签内进行如下配置。DocumentRoot配置的是你网站的根目录。 DocumentRoot /data/typecho &amp;lt;Directory /data/typecho&amp;gt; Options Indexes FollowSymLinks AllowOverride All Require all granted &amp;lt;/Directory&amp;gt; 完成配置后，重启apahce2。 systemctl restart apache2 在网站根目录新建phpinfo.php，内容&amp;lt;?php phpinfo(); ?&amp;gt;，保存。然后浏览器访问http://host_ip/phpinfo.php，查看是否能正常访问页面。 这里有一个需要注意的问题。apache2跑起来的用户:组是www-data:www-data，记得给网站目录/data/typecho分配合理权限，要不然会提示【you don&amp;rsquo;t hava permission】无法访问。 第四步：开始安装php。全程没啥好注意的，等命令跑完就好了。
apt install php -y 第五步：不知不觉终于到第五步了，写教程可真累啊。到此为止，安装环境算是都准备好了，现在可以去typecho官网下载安装包惹。
# 进入网站根目录 cd /data/typecho # 下载最新版typecho代码 wget https://github.com/typecho/typecho/releases/download/v1.2.1/typecho.zip # 解压到当前目录 unzip typecho.zip 接着就可以在浏览器中输入http://host_ip/install.php进行安装，然后根据网页提示的报错信息进行debug。 第六步：马上大功告成了。点击下一步，马上就会看到红字错误提示。 不要慌，根据错误提示一个个处理即可。
# 安装mbstring，需要重启apache2生效 apt install php-mbstring -y # 安装数据库扩展，我用的是sqlite3，就装sqlite3的扩展，需要重启apache2生效 apt install php-sqlite3 -y # usr/uploads目录分配权限。俩方法，把/typecho/目录指定给www-data:www-data，或者给755。因为等会还需要在网站根目录写入一个config.</description>
    </item>
    
    <item>
      <title>Linux下安装Syncthing</title>
      <link>https://ruohai.wang/202307/install-syncthing/</link>
      <pubDate>Sat, 15 Jul 2023 02:50:44 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-syncthing/</guid>
      <description>不得不说在linux下随便安装一个软件都可以写一份教程，不像Windows下载exe双击运行然后下一步下一步就能搞定。
这次是安装syncthing，debian12的仓库里就有，直接apt安装就行。
apt install syncthing 但这一步只是把syncthing安装到系统，最最关键的启动服务然后访问webui还是需要自己琢磨。我大概能猜到启动命令是systemctl start syncthing，但实测启动不了。行吧，官网没写，自己找教程。
网上有两份教程，一份是说用systemctl start syncthing@user.service，我测试以后发现确实能启动syncthing@user.service服务，但webui无法访问。
所以正确是教程是这样：
第一步：在/etc/systemd/system/目录下，新建一个syncthing.servce文件，内容如下。注意User一栏设置运行syncthing服务的用户，改成自己系统的用户。
[Unit] Description=Syncthing - Open Source Continuous File Synchronization for %I Documentation=man:syncthing(1) After=network.target [Service] User=Jack ExecStart=/usr/bin/syncthing -no-browser -gui-address=&amp;#34;0.0.0.0:8384&amp;#34; -no-restart -logflags=0 Restart=on-failure SuccessExitStatus=3 4 RestartForceExitStatus=3 4 [Install] WantedBy=multi-user.target 第二步：daemon-reload/start/enable三件套。
# 服务重载 systemctl daemon-reload # 启动syncthing服务 systemctl start syncthing.service # 设置开机启动 systemctl enable syncthing.service 第三步：syncthing默认端口8384，打开浏览器，访问http://host_ip:8384，搞定~</description>
    </item>
    
    <item>
      <title>Linux下实现USB设备自动挂载</title>
      <link>https://ruohai.wang/202307/linux-auto-mount-usb-storage/</link>
      <pubDate>Sat, 15 Jul 2023 02:49:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-auto-mount-usb-storage/</guid>
      <description>前言 给玩客云刷的armbian默认不支持usb设备自动挂载，需要自己手动mount，如果想实现开机自动挂载，有这么几个方案：
如果u盘、移动硬盘挂上去就半永久不会拔下来，那就编辑/etc/fstab 如果会经常插拔，而且动手能力强，可以编写udev的规则脚本 如果会经常插拔，但又不想写脚本，那就装软件，比如udevil、udiskie、udisk2、usbmount 根据自己的实际情况，最后我选择了udevil，一个是因为安装简单0配置而且依赖关系很简单，另一个是因为casaos实现u盘自动挂载用的也是这个方案。
😄
安装 debian的软件仓库里就有udevil，一条命令就搞定安装
apt install udevil udevil的配置文件路径是/etc/udevil/udevil.conf，默认会把usb设备挂载到/media/user目录下（这里的user在后面的命令中体现）。如果要调整自动挂载路径，需要在udevil.conf中修改。
接下去要启动udevil服务惹。
systemctl start devmon@jack.service 注意命令中的jack，这里对应的是linux系统的用户账户。如果你的系统使用的账户是mark，那对应的命令就是devmon@mark，usb设备的挂载点就是/media/mark。
启动成功以后，就可以插拔u盘、移动硬盘查看挂载情况了，确认下是否工作正常。
最后就是把udevil设置成开机启动。
systemctl enable devmon@jack.service 问题 实际使用中发现有一点点小问题，如果sd卡槽中插了卡，在系统重启以后，sd卡无法自动挂载，需要手动插拔一次以后才能正常识别并自动挂载。</description>
    </item>
    
    <item>
      <title>Apache2下实现Typecho永久链接（伪静态）</title>
      <link>https://ruohai.wang/202307/apache2-url-rewrite/</link>
      <pubDate>Sat, 15 Jul 2023 02:43:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apache2-url-rewrite/</guid>
      <description>伪静态通过url rewrite实现，这里记录下apahce开启rewrite功能的方法。
首先第一步肯定是在typecho后台开启地址重写功能，不要管错误提示，选择【启用】并保存设置。 然后开始在apache2中进行配置：
本地新建一个文件，文件名**.htaccess** ，把下面这段内容粘贴进去，保存，然后上传到网站根目录。 &amp;lt;IfModule mod_rewrite.c&amp;gt; RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1] &amp;lt;/IfModule&amp;gt; 文件位置示意图：
修改apache2.conf（如果你的网站路径信息配置在VirtualHost下则修改对应位置）。这里以默认的/var/www为例，把AllowOverride后的参数改为FileInfo，不需要改成all，fileinfo的权限就够了。 &amp;lt;Directory /var/www/&amp;gt; Options Indexes FollowSymLinks AllowOverride FileInfo Require all granted &amp;lt;/Directory&amp;gt; 完成以上两步以后，可以试着重启apache2，如果rewrite模块已经开启的话，到这一步伪静态就已经完成了。 systemctl restart apache2 如果很不幸操作apache2重启以后你的地址重写功能依然没有生效，那就是服务器没有启用rewrite模块，执行下面这条命令启用apache2-rewrite，然后再重启apache2。 a2enmod rewrite systemctl restart apache2 </description>
    </item>
    
    <item>
      <title>Linux下安装Navidrome自建流媒体服务</title>
      <link>https://ruohai.wang/202307/navidrome-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:28:12 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/navidrome-setup/</guid>
      <description>navidrome，开源的流媒体服务器，全平台客户端都有。功能和群晖的audio station一样，但首先不是人人都有群晖，其次有群晖的人也不一定都喜欢群晖那个沙雕的audio station。
这里记录下安装步骤。其实官网的安装教程已经非常完整且详细，只是没有中文版而已。英文阅读没问题的可以直接看【官方安装教程】。这里仅做一个自己安装过程的记录和英译中。有人会问navidrome不是支持docker安装吗而且docker安装很简单，STOP！我不喜欢docker，所以选择自己手搓。
好了，让我们开始安装navidrome吧！
第一步：安装ffmpeg（大概500MB）
apt install ffmpeg -y 第二步：创建navidrome的安装文件夹和运行文件夹并分配用户和组。对的，这一步就要想好运行navidrome要分配的权限了，怕麻烦就root一把梭。这里用户和组我们都用jack。文件夹路径可以自定义，只是后面的配置过程中同步修改为自定义路径即可。
install -d -o jack -g jack /opt/navidrome install -d -o jack -g jack /var/lib/navidrome 第三步：进入/opt/navidrome，到官方github下载对应自己硬件平台版本的安装包，我这里以amd64版本为例，解压并分配权限。
cd /opt/navidrome wget https://github.com/navidrome/navidrome/releases/download/v0.49.3/navidrome_0.49.3_Linux_arm64.tar.gz tar -zxvf navidrome_0.49.3_Linux_arm64.tar.gz chown -R jack:jack /opt/navidrome 第四步：在/var/lib/navidrome目录下创建配置文件navidrome.toml，配置参数。默认只有一句，用来指定音乐的源文件路径。更多自定义参数看【官方页面】。
MusicFolder = &amp;#34;/media/music&amp;#34; 注意配置这个媒体源文件夹的用户权限，如果弄不清就照样分配给jack。
chown -R jack:jack /media/music 第五步：到这一步其实已经算大功告成了，接下去只是把navidrome添加到系统服务并设置开机自启。在/etc/systemd/system目录下新建navidrome.service文件，然后添加配置信息。注意参数中的User和Group两个参数对应的值要改成你自己的值。其它参数默认即可，如果你能看懂参数也可以自行修改。
[Unit] Description=Navidrome Music Server and Streamer compatible with Subsonic/Airsonic After=remote-fs.target network.target AssertPathExists=/var/lib/navidrome [Install] WantedBy=multi-user.target [Service] User=jack Group=jack Type=simple ExecStart=/opt/navidrome/navidrome --configfile &amp;#34;/var/lib/navidrome/navidrome.toml&amp;#34; WorkingDirectory=/var/lib/navidrome TimeoutStopSec=20 KillMode=process Restart=on-failure # See https://www.</description>
    </item>
    
    <item>
      <title>Linux下Tailscale的安装和配置</title>
      <link>https://ruohai.wang/202307/tailscale-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:25:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/tailscale-setup/</guid>
      <description>前言 我的nas和玩客云armbian小主机的外网访问方案一直用的是ipv6 + ddns，因为我手上正好有个域名，这个方案确实很好用，不仅方便而且配置也很简单，除了ipv6地址更新的十分钟左右的时间会短暂掉线，其它方面我觉得已经十分完美。
今天在twitter有朋友问题玩客云机器刷armbian后能不能跑tailscale，我说没用过不清楚，但勾起了我的好奇心，所以按照官方文档的手册安装配置了一下，emmm，同样很好用，同样很方便而且配置简单，简单到压根就没有几步操作，教程都没什么好写的。
但我在安装组网好了以后还是碰到了一点简单的使用小疑惑。而且tailscale和ipv6公网使用场景虽然存在重叠，也是有一些差异化的，所以记录一下。
安装 首先就是去【tailscale官网】注册账号了，没啥好说的，根据官网提示操作就行了。注册好了以后，ssh进linux机器，开始安装。
第一步：安装，一条命令，耐心等它跑完，跑完会提示安装成功。
curl -fsSL https://tailscale.com/install.sh | sh 安装成功的提示
第二步：根据终端里安装成功的提示，启动tailscale。
tailscale up 启动成功以后，终端会出现一个url链接，复制链接到浏览器中打开，根据提示下一步再下一步，把设备添加到自己账号。
第三步：在tailscale的个人中心的machines标签页，可以看到自己账号下的设备。
可以看到每个设备后面都分配了一个100开头的ipv4地址。到这一步就完成了tailscale的安装、添加设别和异地组网。
使用 假定我现在需要在debian这台机器上访问onecloud机器上的一个服务（比如群晖，端口是5000)，那只需要在debian机器上打开浏览器，输入onecloud的tailscale分配的ipv4地址和端口号，也就是100.xxx.xx.xx:5000，就可以惹~~实测基本能跑满带宽。
实际体验下来，注册、安装、使用，完全就是傻瓜式操作，0配置就可以使用，比ipv6 + ddns的方案还要简单。
使用场景 再说一下tailscale和ipv6方案使用场景的不同。默认配置下，ipv6是公网开放的，意味着只要知道ipv6地址和端口号，所有人都可以访问到，这就带来一个安全上问题，需要用户自己进行一些安全加固的配置，比如装防火墙、修改服务的默认端口、使用复杂密码等等。但tailscale只是一个账户下的局域网之内的设备之间开放访问，并不对公网开放，而且tailscale服务本身的安全措施就拉满。
所以比较合适的使用场景是：
公开资料，比如网络资源（网上能下载到的各种电影电视剧电子书音乐图片文章），用ipv6 + ddns即可，泄露也无妨。 个人资料，（工作生活家庭中的照片音频文档等私密材料），用tailscale，杜绝私密资料泄露。 </description>
    </item>
    
    <item>
      <title>Linux下firewalld防火墙的安装和配置</title>
      <link>https://ruohai.wang/202307/firewalld-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:19:54 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/firewalld-setup/</guid>
      <description>前几年买了vps以后都是跑ss一键脚本然后就扔那儿不管了，除了vps服务商默认提供的安全措施，其它防护为0。虽然做了好多年的web开发，但都只是做一些crud搬砖粗活，对linux维护并不了解。这次借着折腾玩客云小机器armbian的机会，正好摸索学习一下。
😄
linux下管理防火墙规则的工具，大致是iptables/firewalld/ufw，这里略过方案选型过程，只说firewalld的安装和简单配置。要注意firewalld安装好以后，默认只允许dhcpv6-client和ssh服务，其它服务、端口全部会被拦截，如果ssh改了自定义端口，务必要记得放行该端口。
安装，很简单。安装好以后自动启用，自动配置为开机启动服务。
apt install firewalld 查看firewalld当前状态
systemctl status firewalld 永久开放某个端口
firewall-cmd --add-port=80/tcp --permanent 修改规则以后重载生效
firewall-cmd --reload 查看当前开放的服务
firewall-cmd --list-service 查看当前开放的端口
firewall-cmd --list-ports 永久开放某个服务
firewall-cmd --add-service=samba --permanent 永久关闭某个端口
firewall-cmd --remove-port=22/tcp --permanent </description>
    </item>
    
    <item>
      <title>Linux下配置RSA公钥认证登录</title>
      <link>https://ruohai.wang/202307/pub-key-auth-config/</link>
      <pubDate>Fri, 14 Jul 2023 23:41:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/pub-key-auth-config/</guid>
      <description>为了安全，linux主机一般都会禁掉密码登录 + rsa密钥认证登录。这里记录以下这两个操作的过程。
第一步：生成rsa密钥对，不多赘述。
ssh-keygen 生成俩文件，id_rsa和id_rsa.pub。
第二步：确保在linux主机用户目录下有.ssh文件夹，没有的话就新建。
mkdir ~/.ssh 第三步：用sftp命令或者sftp客户端，把id_rsa.pub上传到~/.ssh目录下。上传完成后，最好把id_rsa.pub文件重命名为authorized_keys。
第四步：编辑/etc/ssh/sshd_config文件。
# 找到这个配置，去掉注释启用 PubkeyAuthentication yes # 找到这个配置，去掉注释启用 AuthorizedKeysFile .ssh/authorized_keys 第五步：本地终端配置好id_rsa私钥就可以ssh免密码登录了。接下去就是禁用密码登录。
# 找到这个配置，去掉注释启用，注意value是no，禁止密码验证 PasswordAuthentication no 修改后保存退出，重启sshd后配置生效。😄
sysmtectl restart sshd </description>
    </item>
    
    <item>
      <title>Linux下安装qBittorrent</title>
      <link>https://ruohai.wang/202307/install-qbit/</link>
      <pubDate>Fri, 14 Jul 2023 23:35:17 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-qbit/</guid>
      <description>debian仓库里qbit有俩版本，一个qbittorrent，另一个qbittorrent-nox。前者带qt5编写的gui，后者没有gui只有webui。我是在玩客云的小机器上装，不需要gui，所以这里选qbittorrent-nox。
apt install qbittorrent-nox 安装完成后，直接用守护线程模式启动。
qbittorrent-nox -d 默认端口8080，打开浏览器，访问http://host_ip:8080，默认用户admin，默认密码adminadmin，就可以开始使用了。
也可以把qbit添加到systemd服务并设置开机自启，这样就不需要再每次敲命令启动。
第一步：在/etc/systemd/system/目录下新建文件qbittorrent.service，把下面内容复制进去，保存退出。注意User一栏的值是指定运行qbit任务的用户，需要根据自己的情况修改。
[Unit] Description=qBittorrent Daemon Service After=network.target [Service] User=Jack ExecStart=/usr/bin/qbittorrent-nox ExecStop=/usr/bin/killall -w qbittorrent-nox [Install] WantedBy=multi-user.target 第二部：添加systemd服务的三条命令。
# 服务重载 systemctl daemon-reload # 启动服务(如果已经启动qbit，这一步可以跳过） systemctl start qbittorrent.service # 添加为开机自启 systemctl enable qbittorrent.service </description>
    </item>
    
    <item>
      <title>Linux下自定义主机名称（hostname）</title>
      <link>https://ruohai.wang/202307/change-hostname/</link>
      <pubDate>Fri, 14 Jul 2023 23:28:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/change-hostname/</guid>
      <description>查看当前的主机名
hostname 或者
hostnamectl 图方便可以用一条命令修改，这条命令修改的是/etc/hostname文件。退出重新登录以后就可以看到是新的主机名
hostnamectl set-hostname [newname] 严谨一些可以修改/etc/hosts，但上面这个操作后我的目的已经完成，所以这里不做记录。😄</description>
    </item>
    
    <item>
      <title>Linux下设置静态IP（固定IP）</title>
      <link>https://ruohai.wang/202307/static-ip-address-config/</link>
      <pubDate>Fri, 14 Jul 2023 23:23:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/static-ip-address-config/</guid>
      <description>先查看自己设备的网卡名称
ifconfig 如果提示命令不存在，则先安装net-tools
apt install net-tools 获取到网卡名称后，在/etc/network/interfaces文件中进行编辑。子网掩码、网关地址、dns地址可以根据自己的实际网络情况进行调整。完成编辑以后保存退出。
# 开机自动启用eth0 auto eth0 # 使用静态ip iface eth0 inet static # ip地址 address 192.168.1.4 # 子网掩码 netmask 255.255.255.0 # 网关地址 gateway 192.168.1.1 # dns服务器 dns-nameservers 192.168.1.1 重启网络
service network restart 或者
systemctl restart network 如果以上两个命令都提示无效，直接重启吧。😄</description>
    </item>
    
    <item>
      <title>Linux下安装Docker Engine</title>
      <link>https://ruohai.wang/202307/install-docker-engine/</link>
      <pubDate>Fri, 14 Jul 2023 23:20:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-docker-engine/</guid>
      <description>在linux上安装docker，官方有详细的教程指导如何安装。但如果你和我一样用的linux发行版是debian以及debian的衍生发行版，可以直接用debian官方维护的docker.io。
apt install docker.io docker官方把docker.io称为unofficial packages非官方的版本。
因为docker.io是debian在维护而不是docker官方，而且2019年的时候曾经停止维护了1年导致版本落后太多。但现在不用担心docker.io版本问题，目前仓库里已经是20.10.24。</description>
    </item>
    
    <item>
      <title>Linux下添加自定义alias</title>
      <link>https://ruohai.wang/202307/add-alias/</link>
      <pubDate>Fri, 14 Jul 2023 23:14:36 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/add-alias/</guid>
      <description>linux下添加自定义alias，编辑的文件位置有俩地方，全局（对所有用户生效）生效是/etc/bash.bashrc，对当前用户生效是~/.bashrc。
这里以仅针对单个用户进行配置为例。
nano ~/.bashrc 在最底下添加一行
alias ll=&amp;#39;ls -l&amp;#39; 保存，然后用source命令使生效
source ~/.bashrc </description>
    </item>
    
    <item>
      <title>Linux下安装File Browser</title>
      <link>https://ruohai.wang/202307/filebrowser-setup/</link>
      <pubDate>Fri, 14 Jul 2023 23:00:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/filebrowser-setup/</guid>
      <description>第一步：新建安装目录
mkdir /usr/local/filebrowser 第二步：根据自己的硬件平台从【官方github repo】下载对应版本的安装包，这里以armv7为例。
# 进入安装文件夹 cd /usr/local/filebrowser # 下载安装包 wget https://github.com/filebrowser/filebrowser/releases/download/v2.23.0/linux-armv7-filebrowser.tar.gz # 解压 tar -zxvf linux-armv7-filebrowser.tar.gz 第三步：在安装目录/usr/local/filebrowser下新建config.json，添加配置信息。
# 创建配置文件 nano /usr/local/filebrowser/config.json 添加以下内容。其中root参数用来指定fireborwser展示的根目录，比如设定为/home，则webui中只能看到/home目录下的内容。
{ &amp;#34;port&amp;#34;: 8600, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/usr/local/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/var/log/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 第四步：把filebrowser添加到systemd服务。
# 创建配置文件 nano /etc/systemd/system/filebrowser.service 添加如下内容后保存退出。
[Unit] Description=The filebrowser Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/filebrowser/filebrowser -c /usr/local/filebrowser/config.json ExecStop=/bin/killall filebrowser PrivateTmp=true [Install] WantedBy=multi-user.target 第五步：systemd重载服务并设置开机启动
# 重载服务 systemctl daemon-reload # 启动filebrowser systemctl start filebrowser.service # 设置开机启动 systemctl enable filebrowser.</description>
    </item>
    
    <item>
      <title>Linux下Bash Shell开启命令自动补全</title>
      <link>https://ruohai.wang/202307/bash-completion-setup/</link>
      <pubDate>Fri, 14 Jul 2023 22:51:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/bash-completion-setup/</guid>
      <description>如果只是对单个用户生效，那下文中的/etc/bash.bashrc都要调整为~/.bashrc。
第一步：安装bash-completion。
apt install bash-completion 第二步：查看/etc/bash.bashrc文件中是否适配。
# 打开bash的用户配置文件 nano /etc/bash.bashrc 查看是否有下面这段内容，如果没有就添加到最后，保存退出。这段代码的意思是判断系统是否安装了bash_completion，如果安装则启用自动补全功能。
if ! shopt -oq posix; then if [ -f /usr/share/bash-completion/bash_completion ]; then . /usr/share/bash-completion/bash_completion elif [ -f /etc/bash_completion ]; then . /etc/bash_completion fi fi 第三步：重新加载用户的bash配置信息。
source /etc/bash.bashrc </description>
    </item>
    
    <item>
      <title>Linux下修改SSH默认端口</title>
      <link>https://ruohai.wang/202307/set-new-ssh-port/</link>
      <pubDate>Fri, 14 Jul 2023 22:28:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/set-new-ssh-port/</guid>
      <description>前言 这是一篇从搬瓦工vps的typecho搬过来的文章。对内容和格式做了轻微调整。
写这篇文章是因为前两天想动手改linux主机的默认ssh端口，但发现无论怎么改sshd_config文件都无济于事。简中互联网上以关键字ssh、修改端口之类搜出来的文章都千篇一律，再搜端口修改以后无效，出来的内容都说因为selinux。我就在这这个错误的方向上折腾了好久，但实际我的主机压根就没开启selinux。
最后用google搜英文关键字，才找到原因：systemd环境下ssh分为ssh.socket和ssh.service，这俩不同服务的配置文件完全不同。而较新的debian/ubuntu系统用的是ssh.socket。
找到问题原因以后就很好解决了，这里做简单记录。
查看ssh服务类型 要修改ssh默认端口，首先要分清楚自己linux机器的ssh是ssh.socket还是ssh.service。
systemctl status sshd 根据图中出现的ssh.socket字样区分。 ssh.service ssh.service的端口修改很简单，打开配置文件
nano /etc/ssh/sshd_config 找到port的配置进行修改
# 找到这条，默认是注释掉的，这里去掉注释 Port 22 # 添加一行自定义的端口 Port 12345 然后重启ssh服务即可
systemctl restart sshd 测试新端口OK以后，再注释掉旧端口然后重启sshd即可。
ssh.socket ssh.socket配置文件在/lib/systemd/system/ssh.socket，但我建议你千万不要去动原始文件。首先是这个配置文件会在更新openssh的时候被覆盖掉，其次在ssh.socket运行状态下修改配置文件，会导致ssh.socket服务出现异常（停止工作而且无法接受新的连接）。所以正确的配置方式如下
# 新建配置文件目录 mkdir -p /etc/systemd/system/ssh.socket.d 新建配置文件并写入监听端口信息
cat &amp;gt;/etc/systemd/system/ssh.socket.d/listen.conf &amp;lt;&amp;lt;EOF [Socket] # 这一栏需要保留，用来覆盖原配置文件中的22端口 ListenStream= # 这一栏填写新的ssh端口 ListenStream=1234 EOF 最后就是systemd重载服务并重启ssh了。
# 重载服务 systemctl daemon-reload # 重启ssh systemctl restart ssh 这个配置方法的参考来源：
https://askubuntu.com/questions/1439461/ssh-default-port-not-changing-ubuntu-22-10 https://discourse.ubuntu.com/t/sshd-now-uses-socket-based-activation-ubuntu-22-10-and-later/30189/6 从ssh.socket切换到ssh.service 讲真，我虽然已经掌握在ssh.socket模式下配置新端口的方法，但实际操作过程中还是碰到了ssh.socket异常的问题。那不如直接从ssh.socket切换到ssh.service吧！
# 禁用ssh.socket服务 systemctl disable --now ssh.socket # 启用ssh.</description>
    </item>
    
    <item>
      <title>Linux下用Hugo搭建博客并部署到Github Pages</title>
      <link>https://ruohai.wang/202307/hugo-setup-and-deploy-to-github/</link>
      <pubDate>Fri, 14 Jul 2023 15:15:15 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/hugo-setup-and-deploy-to-github/</guid>
      <description>前言 手上好几台armv7平台的电子垃圾，没错说的就是迅雷赚钱宝二代（ws1508）和迅雷玩客云（ws1608）。总琢磨着让这些电子垃圾在它们的生命末期发挥最后的光和热，给它们刷armbian、刷openwrt。正好我的搬瓦工vps还剩半个月要到期了，49.99刀/年的费用，对于现在的我也算是一笔不小的支出。能省则省，所以准备博客搬家。有很多捡垃圾玩家会把博客跑在自己的arm小主机上，但国内的网络环境下，自建服务器的备案和80/443端口解封根本无解，只能做到url:port进行公网访问，但这纯粹就是自娱自乐嘛。最后还是决定把博客部署到免费的github pages。
既然要用github pages，那只能用静态博客，无论是hexo、hugo还是jekyll，都需要一个本地的编译环境。既然如此，正好尝试一下在赚钱宝二代（ws1508）这台设备上安装hugo。
玩客云（ws1608）和赚钱宝二代（ws1508）主要硬件配置上一模一样，同样适用这个教程。
其实全平台都适用这个教程，只需要把apt install换成自己系统的版本就行了。
前期准备 一台功能正常的电脑/主机，linux/windows/macos/&amp;hellip;。赚钱宝二代的硬件是32位armv7，系统是armbian-bookworn github账号，假定用户名jack，并新建repo取名为jack.github.io 安装hugo 安装git apt install git 安装hugo。在armbian-bookworm的仓库里有hugo，在当下这个日期（2023-07-14），仓库里的hugo版本是v0.111.3，是2023年3月发布的。github hugo官方仓库的版本已经是v0.115.3。虽然都说喜新厌旧，但这不是巧了么，我就用armbian仓库的旧版。 apt install hugo 2023-07-17 update 这里补充一下通过下载官方github repo的二进制包安装的方法。
1-新建安装目录
mkdir -p /usr/local/hugo 2-到官方github repo下载对应自己硬件平台的包，我的设备是赚钱宝二代（ws1508），老朋友了，armv7。
cd /usr/local/hugowget https://github.com/gohugoio/hugo/releases/download/v0.115.3/hugo_0.115.3_linux-arm.tar.gztar -zxvf hugo_0.115.3_linux-arm.tar.gz 3-解压以后得到的hugo安装包默认就有可执行权限，接下去要做的是把hugo添加到环境变量。我这里把环境变量配置到~/.bashrc，仅对当前用户生效。如果要全局生效，可以添加到/etc/profile。
nano ~/.bashrc 末尾添加一行。
export PATH=$PATH:/usr/local/hugo 保存退出，重载配置使生效
source ~/.bashrc 4-到这部就安装完成了。执行以下命令查看是否成功。
hugo -h 如果安装成功的话，会出现hugo的帮助手册。
创建博客目录，下载主题 # 为方便管理在根目录新建data文件夹mkdir /data# 在data目录下创建博客目录cd data/hugo new site blog# 进入blog目录，进行git初始化cd blog/git init# 下载自己喜欢的主题（这里用m10c为例）git clone https://github.</description>
    </item>
    
    <item>
      <title>Linux下用Speedtest CLI进行网络测速</title>
      <link>https://ruohai.wang/202307/speedtest-cli-setup/</link>
      <pubDate>Fri, 14 Jul 2023 14:57:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/speedtest-cli-setup/</guid>
      <description>前言 想要linux下测一下网速，机器是赚钱宝二代（ws1508），硬件是32位armv7，系统是armbian-bookworm。
debian的仓库里有一个speedtest-cli的包，一开始我用的就是这个。但注意这个包不是speedtest官方在维护，不是官方的！这也解释了为什么我之前用debian仓库里的speedtest-cli进行测速的时候，它自动选择的服务器都是hongkong或者taiwan，导致测速完全不准。而且通过命令speedtest --list|grep China也搜不出任何结果，一度离谱到speedtest --list出来只有taiwan的服务器。
后来网上搜了一圈【找到了原因】，才知道这个包不是speedtest官方的。
linux上真的是好多坑啊，一个简单的网络测速都是如此。
好了，现在记录一下怎么安装speedtest官方的工具来完成linux下的网络测速。
安装 找到【speedtest官方网站】，首页就有安装步骤。 # 下载sh脚本 curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash # 安装 apt install speedtest 查询可用的测速服务器 先speedtest -h看一下使用手册。 Usage: speedtest [&amp;lt;options&amp;gt;] -h, --help Print usage information -V, --version Print version number -L, --servers List nearest servers -s, --server-id=# Specify a server from the server list using its id -I, --interface=ARG Attempt to bind to the specified interface when connecting to servers -i, --ip=ARG Attempt to bind to the specified IP address when connecting to servers -o, --host=ARG Specify a server, from the server list, using its host&amp;#39;s fully qualified domain name -p, --progress=yes|no Enable or disable progress bar (Note: only available for &amp;#39;human-readable&amp;#39; or &amp;#39;json&amp;#39; and defaults to yes when interactive) -P, --precision=# Number of decimals to use (0-8, default=2) -f, --format=ARG Output format (see below for valid formats) --progress-update-interval=# Progress update interval (100-1000 milliseconds) -u, --unit[=ARG] Output unit for displaying speeds (Note: this is only applicable for ‘human-readable’ output format and the default unit is Mbps) -a Shortcut for [-u auto-decimal-bits] -A Shortcut for [-u auto-decimal-bytes] -b Shortcut for [-u auto-binary-bits] -B Shortcut for [-u auto-binary-bytes] --selection-details Show server selection details --ca-certificate=ARG CA Certificate bundle path -v Logging verbosity.</description>
    </item>
    
  </channel>
</rss>
