<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenWrt on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/openwrt/</link>
    <description>Recent content in OpenWrt on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 07 Oct 2024 19:38:32 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/openwrt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Debian和OpenWrt上使用sqlite3-cli进行简单数据维护</title>
      <link>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</link>
      <pubDate>Mon, 07 Oct 2024 19:38:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</guid>
      <description>前言 我使用的memos默认用的数据库是sqlite，在长期使用memos的过程中，偶尔需要直接操作数据库进行一些冗余数据清理、错误数据debug。
在windows上维护sqlite数据库时，我用的工具是免费 &amp;amp; 开源的【sqlite studio】，带gui操作界面，非常好用，值得推荐。
但很多时候我希望ssh连上linux服务器以后，直接在终端中维护sqlite数据库，这就需要用到sqlite-cli工具。写篇文章做个记录。
安装 &amp;amp; 使用 首先是安装sqlite3-cli工具。
在openwrt上，只需要在软件仓库中根据关键字搜索然后点击安装即可。
在debian上直接apt一把梭。
sudo apt install sqlite3 然后是一些简单的数据库维护。
使用sqlite3-cli工具打开sqlite的db文件
sqlite3 /path/to/sqlite3/dbfile.db 然后就会进入sqlite&amp;gt;的命令符界面，表明已经可以对sqlite数据库文件进行操作了。
最后列举几个常用的sqlite3-cli的命令
# 显示数据库 .databases # 显示数据库表 .tables # 退出 .quit 参考文章 SQLite 命令 pawelsalawa/sqlitestudio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在OpenWrt上安装ttyd</title>
      <link>https://ruohai.wang/202405/ttyd-install-one-openwrt/</link>
      <pubDate>Tue, 21 May 2024 20:47:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/ttyd-install-one-openwrt/</guid>
      <description>前言 简单交代一下我想要跑ttyd的硬件和系统。
我的硬件是迅雷赚钱宝一代，硬件型号ws1408，228MB的内存，amlogic s805芯片。
我给这硬件刷的系统是openwrt21，内核3.10。
其实openwrt的软件仓库就带了luci-ttyd，但我觉得用起来不方便，要登录openwrt——服务——ttyd，然后二次登录。除此之外，luci-ttyd的窗口大小也受限制，没法做到浏览器全屏。
所以最后还是用二进制包的方式在openwrt上安装一遍ttyd。
安装 第一步：下载
ttyd的github项目主页指路：【tsl0922/ttyd】，在release页面找到对应版本的二进制包。ws1408是arm32/armhf/armv7l，三种叫法都对。我这里选择ttyd.armhf。
wget -O ttyd https://github.com/tsl0922/ttyd/releases/download/1.7.7/ttyd.armhf 注意看下下载的文件是不是有可执行权限，没有的话chmod +x ttyd赋权。
第二步：sysv脚本
在/etc/init.d目录下新建文件ttyd，然后粘贴以下代码，端口号和文件路径请自行调整：
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/ttyd/ttyd -p 12345 -W login } stop() { kill $(pidof ttyd) } 保存后退出，然后给文件添加可执行权限，chmod +x ttyd。
这里有两个个注意点，第一是ttyd从某个版本以后默认是只读权限了，启动命令需要添加-W参数才会有写入权限。第二是我这个脚本只适配了start和stop命令，其它的restart没做适配，有需求的可以自己参考sysvinit的语法补足。
第三步：ttyd启动
看了这么多篇在openwrt上装软件的博客，启动和添加启动项大家应该都很熟练了。
# 启动 service ttyd start # 添加启动项 service ttyd enable 好了，到这里在openwrt上运行ttyd二进制包的操作就完成惹。
🎉</description>
    </item>
    
    <item>
      <title>非Docker方式在Openwrt上运行Memos</title>
      <link>https://ruohai.wang/202405/memos-run-on-openwrt-without-docker/</link>
      <pubDate>Mon, 20 May 2024 00:32:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/memos-run-on-openwrt-without-docker/</guid>
      <description>前言 长话短说了。
Memos的开发者只提供了docker镜像这一种部署方式，而且从v0.15.0以后已经停止维护针对arm32/armhf/armv7l的版本。
我的系统是3.10内核的openwrt 21，因为内核太老所以不支持安装docker。
我的硬件是迅雷赚钱宝一代，硬件型号ws1408，芯片amlogic s805，内存228MB。
我用的memos后端是v0.15.2，是从github下载的，指路：【memospot/memos-builds】。
你可能会问为什么不用更高的版本，😂，有苦衷的。其一是因为前端部分需要自己编译，我只成功编译出了v0.15.0版本，更新的版本我本地编译都会报错，暂时没有精力去debug。其二是因为之前受arm32平台的限制，我一直用的是v0.15.0的docker镜像，而从v0.16开始的更新就涉及到数据库表结构的变更，没法平滑的升级，所以本次还是停留在v0.15这个大版本。
至于后端v0.15.2 + 前端v0.15.0这种奇怪的版本组合，😂，我用了一个周末，还没有发现什么bug，可以正常使用。
我自己编译的v0.15.0的前端项目的下载放在文章最后。
这种方式也适用于在其它linux版本上直接用编译好的二进制包运行memos，自行调整配置文件即可。
配置 先把v0.15.2的后端 + v0.15.0的前端上传到服务器，然后按照项目结构进行组织。后端文件memos不要忘记添加可执行权限，chmod +x memos。
--memos --server | --dist 我的项目结构如下图，其中data用来存放memos的数据。
接下去就是配置启动脚本以及一些bug处理。
第一步：sysv脚本
在/etc/init.d目录下新建文件memos，记得添加可执行权限chmod +x memos，然后粘贴以下代码。其中的文件路径、端口号、数据存放目录请自行修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/memos/memos --mode=prod --port=5203 --data=/mnt/data/memos/data } stop() { kill $(pidof memos) } 保存后退出，然后启动服务并设置开机启动。
# 启动服务 service memos start # 添加启动项 service memos enable 注意这个脚本只设置了start和stop两个命令，其它的restart之类都没有适配，有需求的话请自行添加代码。
第二步：设置缩略图目录
memos应该是硬编码了到/var/opt/memos/assets这个附件目录下索引图片来生成缩略图，但我们用二进制包运行memos的话，数据存放路径都会自定义设置，其次是openwrt系统下，/var目录是个临时目录，一重启就会清空数据，所以肯定要修正这个bug。
比如我的memos数据都存放在/mnt/data/memos/data目录下。
解决的方法是建立一个软连接，把附件目录指向我们自定义的附件目录。
# 新建目录 mkdir -p /var/opt/memos/ # 把硬编码的目录通过软链接指向我们自己的数据目录 ln -s /mnt/data/memos/data/assets/ /var/opt/memos/assets 但机器可能偶尔会重启，一重启整个/var目录会被清空，不可能每次重启都手动创建一遍目录 + 软连接，所以需要把这个操作添加到启动项。</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装File Browser</title>
      <link>https://ruohai.wang/202404/filebrowser-install-on-ws1408/</link>
      <pubDate>Tue, 30 Apr 2024 21:21:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/filebrowser-install-on-ws1408/</guid>
      <description>前言 迅雷赚钱宝一代，硬件型号ws1408，芯片是大家的老朋友amlogic s805，配了256MB内存，刷机可以后可用存储空间只有72MB左右。
我刷的固件是openwrt 21.02.7，内核3.10.33。
这个硬件配置，这个内核版本，docker肯定是不用想了，所以看看还能装点儿啥软件吧。
安装 这里先吐槽一下filebrowser官方吧，现在官方文档里的安装方式只给了一键脚本和docker两种方式，而且也没有提供比较明白的编写配置的文档，不明白在怎么想的。
第一步：下载
首先找到filebroser项目的github页面【filebrowser/filebrowser】，在releases页面找到正确的安装包。
我们的老朋友s805芯片是armv7/armhf架构，不要选错。
ssh连上openwrt，使用wget下载。我在机器上插了一个sd卡挂载到/mnt/sdcard作为软件安装目录。
# 进目录 cd /mnt/sdcard/filebrowser # 下载 wget -O filebrowser.tar.gz https://github.com/filebrowser/filebrowser/releases/download/v2.29.0/linux-armv7-filebrowser.tar.gz # 解压 tar -zxvf filebrowser.tar.gz 解压以后可以看到filebrowser这个二进制包已经有可执行权限，但是文件的归属权限比较乱，默认是1001:127。
所以先改一下归属用户和组。
# 调整文件的用户和组为root chown -R root:root * 第二步：编辑配置文件
依然是在软件的目录下，开始编辑配置文件
# 新建配置文件 touch config.json # 编辑，没有nano的话可以用vim nano config.json 把下面的代码粘贴进去
{ &amp;#34;port&amp;#34;: 8080, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/mnt/sdcard/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/mnt/sdcard/filebrowser/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 配置释义：
port：指定服务使用的端口号 address：指定服务的访问地址，默认0.0.0.0就是监听所有来源的网络请求 root：指filebrowser可以访问的根目录，比如我只想让filebrowser访问/mnt目录下的文件，那就改成&amp;quot;root&amp;quot;:&amp;quot;/mnt&amp;quot; database：指filebrowser的数据库文件存放路径 log：指filebrowser的日志文件的存放路径 username：指初始用户名 以上根据自己的喜好调整即可。
到这一步，可以直接./filebrowser -c config.</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上部署Cloudflare Tunnel</title>
      <link>https://ruohai.wang/202404/cloudflared-install-on-openwrt/</link>
      <pubDate>Tue, 30 Apr 2024 13:14:36 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/cloudflared-install-on-openwrt/</guid>
      <description>前言 手上的迅雷赚钱宝一代（ws1408）刷了openwrt，然后装了samba4、qbit、wol、filebrowser、ttyd、minidlna，除了这些以总想着还能在这个电子垃圾上挖掘出什么功能，最后想到它作为一个24小时开机的下载机，再弄个cloudflared给我的cloudflare tunnle做冗余connector是个不错的主意。
之前的博客里提到过，cloudflare tunnel的官方文档里就写了，想要提高一个tunnel的稳定性，有花钱的方案也有免费的方案，免费的方案就是自己多弄几个机器装cloudflared来作为tunnel的connector，这样哪怕其中一个connector崩了，还有其它几个connector备份可用。
我实测一个tunnel配置两个connector（cloudflared）就再没见过degrade或者down的标识了。但这玩意多多益善，3个总是比2个稳定，那就开始吧~
安装 第一步：下载
openwrt说到底还是魔改的linux，所以找到合适版本的cloudflared就行了。
实测clouflare官方提供的二进制包就可以直接使用，项目地址：【cloudflare/cloudflared】
ws1408用的芯片是大家的老朋友amlogic s805，我们都很熟悉它是armv7l/armhf的架构。
可以选择复制下载链接，然后ssh连上openwrt，再用wget下载。也可以直接下载到本地，然后通过winscp或者其它方法上传到机器。
我在机器上插了一张sd卡挂载到/mnt/sdcard作为软件安装目录，因为ws1408自带存储只有72MB太金贵啦。
# 进入目录 cd /mnt/sdcard/cloudflared # 下载 wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/download/2024.4.1/cloudflared-linux-armhf # 添加可执行权限 chmod +x cloudflared 第二部：安装
软件下载完以后，首先需要登录cloudflare官网，进入tunnel配置页面，找到自己的tunnel，在configure页面的overview标签页，找到自己的这个tunnel的token。
打码的就是token了，复制以后先放一边备用。
然后依然是ssh连上openwrt，开始安装
# 进目录 cd /mnt/sdcard/cloudflared # 安装服务 ./cloudflared service install [token] 执行install命令以后，终端会有一些信息输出，提示在环境变量$PATH中找不到可执行文件。
这里可以先不管它，我们手动启动。
# 进入init.d目录 cd /etc/init.d 确定目录下有cloudflared的服务配置文件。
然后启动cloudflared
service cloudflared start 然后用htop确认cloudflared是否启动
到这里就完成在openwrt上安装cloudflare tunnel的connector惹。
🎉
一些已知问题 我的ws1408装的opwnwrt版本是21.02.7，内核是3.10.33。
按照上文的方法安装好cloudflared以后，可以启动，但是没法把它添加到开机自启。执行service cloudflared enable会提示不支持enable命令。
在openwrt的后台——启动项中显示cloudflared的启动项是禁用，点击启用，会提示启用失败。
如果你熟悉init.d的启动脚本语法，可以试试调整/etc/init.d/cloudflared能否解决这个bug。
我用了另外的办法解决，那就是在本地启动脚本里手动添加一条命令。
service cloudflared start 😂</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装qBittorrent教程</title>
      <link>https://ruohai.wang/202404/qbittorrent-install-on-ws1408-and-openwrt/</link>
      <pubDate>Sat, 27 Apr 2024 07:46:15 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/qbittorrent-install-on-ws1408-and-openwrt/</guid>
      <description>前言 手上有两个迅雷赚钱宝一代，硬件型号ws1408，当时捡垃圾的时候卖家作为添头10块钱一个打包入手的。它长这个样子
正面
背面的接口
这机器性能孱弱，赚钱宝系列连用三代的amlogic s805芯片方案，256MB内存，usb2.0接口 + tf槽，先进的百兆网口，所以吸引不了大佬给它适配固件，装个3.10老旧内核的openwrt再装个bt下载软件当下载机是个不错的选择。但openwrt软件源仓库里只有aria2和trasmission，这俩在bt下载能力上远远不如qbit，所以我一直想在这机器上装qbit。
最近找了一些教程，最后成功跑起来了。这里做个简单记录。
固件 目前这机器可用的固件都是从官方固件中提取的3.10内核魔改的openwrt，我用下来觉得比较好用的是这俩版本：
openwrt-19.07.7 openwrt-21.02.7 这俩版本都可以用amlogic usb burnning tools软件直接线刷。俩固件都是干净整洁无异味的openwrt官版，没有安装任何插件，甚至连语言包都没装，适合喜欢纯净版的你，内置的软件源直接可用。
我推荐使用openwrt-21.02.7版本，版本比较新，软件仓库的里提供的软件版本也更新。而且openwrt-19.07.7这个版本有点小问题，作者在弄镜像的时候弄乱了用户，根目录下看到很多目录的所属用户和组都是1000:1000，还需要自己chown -R还原回来。
两版固件在文章末尾都提供了下载连接。
安装qbit openwrt的软件源仓库里没有提供qbit，装qbit需要找别人编译好的二进制包。我用的是这个项目【userdocs/qbittorrent-nox-static】的包。
第一步：下载软件
这机器的硬件架构是 armv7l，在项目的release页面找到对应的版本。
ssh进入openwrt，选择目录开始下载。我在mnt目录下挂载了一个硬盘，路径为/mnt/data，下文中就以此举例。
# 创建软件目录并进入目录 mkdir /mnt/data/qbittorrent ; cd $_ # 下载软件 wget -O qbittorrent-nox https://github.com/userdocs/qbittorrent-nox-static/releases/download/release-4.6.4_v2.0.10/armv7-qbittorrent-nox # 赋予可执行权限 chmod 700 qbittorrent-nox 到这里，软件的下载和赋权就完成了。
第二步：运行软件
有一点linux基础使用能力的人肯定知道一个可执行的二进制包，只需要敲命令./qbittorrent-nox就可以直接跑起来了。这样确实可以，但我还是想精细一点。
首先就是指定qbittorrent-nox软件的配置文件目录。这机器内置存储是nand，不知道啥时候就挂了，所以我想把配置文件都保存在比较安全的地方，方便下次刷机以后直接恢复。
# 依然是在qbit的安装目录 cd /mnt/data/qbittorrent # 首次运行qbit，用--profile参数指定配置文件目录 ./qbittorrent-nox --profile=/mnt/data/qbittorrent/config 这时候qbit开始启动，终端会出现提示说bt分享的免责声明，询问是否继续运行，敲y。然后qbit成功启动，终端会输出访问web ui的网址，以及初始的账户（admin）和随机密码。
用账户和随机密码登录网页的qbit，调整中文语言
修改账户和密码，然后保存。
到这里就完成了qbit的初始化，已经可以正常使用了。
但这个时候qbit是以前台任务的形式在终端里运行，如果ctrl +c或者关掉终端，qbit也会停止运行。
所以接下去要写一个init.d开机启动的脚本。
第三步：启动脚本
openwrt的启动脚本放在/etc/init.d目录。
先看一下启动脚本的简单模板：
#!/bin/sh /etc/rc.common START=95 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /usr/bin/caddy run -config /etc/caddy/Caddyfile } stop() { service_stop /usr/bin/caddy } 看不懂也没关系，我也看不懂，只需要照葫芦画瓢，知道改哪里、怎么改就行了。</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）在OpenWrt固件基础上安装和配置Samba</title>
      <link>https://ruohai.wang/202308/ws1408-samba-use-guide/</link>
      <pubDate>Wed, 02 Aug 2023 22:35:07 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ws1408-samba-use-guide/</guid>
      <description>前言 ws1408只有一版openwrt固件，要在openwrt的基础上安装samba，和armbian有点不太一样，这里做简单记录。
其实在oenwrt的webui上也有入口可以安装软件和配置，但我实际用下来总是会有各种问题。所以最后放弃了webui安装和配置的方法，直接手搓。真的，自己手搓比webui上勾勾点点成功率高多了。
要安装软件，记得先换源，指路：迅雷赚钱宝一代（WS1408）的OpenWrt可用源分享
安装samba 先更新软件仓库
opkg update 查找软件
opkg list | grep samba 安装软件
opkg install luci-app-samba4 添加系统用户 ws1408的openwrt固件比较精简，默认只有root账户，想新增系统用户需要安装useradd。
opkg install shadow-useradd 添加用户jack。这里指定jack这个用户无法登录，因为只是用来做samba的用户，不会登录系统。
useradd jack -s /bin/false 如果jack这个用户需要登录系统，那上面的命令中去掉-s /bin/false，然后给他设置密码
passwd jack samba中添加用户 添加了系统用户以后，需要在samba中添加用户。下面这条命令敲完后回车，根据系统会提示设置密码
smbpasswd -a jack 如果想要删除samba用户，命令应该如下
smbpasswd -x jack 但我实际使用下来，这条删除用户的命令会一直提示处理失败。所以有效的办法是用nano打开/etc/samba/smbpasswd这个保存用户信息的文件，删除或者清空里面的内容。
配置共享文件夹 samba配置文件的路径是/etc/samba/smb.conf，但默认的这个smb.conf配置文件只是一个软链接，实际指向了/var/etc/smb.conf。我尝试直接修改这个软链接版的smb.conf文件，但每次一重启samba服务就会被重置。那正好，原始文件不动，咱另立门户。
# 进目录 cd /etc/samba # 把原文件重命名 mv smb.conf smb.conf.default # 新建一个配置文件 touch smb.conf 然后用nano编辑smb.conf，填写以下内容。因为我对samba共享的安全性要求略高，所以限定smb最低版本是smb2，限定只有jack可以访问，而且禁止匿名访问。
#======================= Global Setting ======================= [global] workgroup = WORKGROUP security = user server role = standalone server map to guest = never server min protocol = SMB2 #======================= Share Definitions ======================= [ShareFolder] comment = share comment path = /path/to/folder create mask = 0755 directory mask = 0755 valid users = jack browseable = yes writable = yes read only = no public = no guest ok = no 完成以上的配置以后，重启samba。</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）的OpenWrt可用源分享</title>
      <link>https://ruohai.wang/202307/ws1408-openwrt-use-guide/</link>
      <pubDate>Sun, 30 Jul 2023 23:58:50 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1408-openwrt-use-guide/</guid>
      <description>前言 周末回了一趟乡下，耽误了搞机。😄
ws1408只有一版openwrt固件，没有armbian。但之前俩月我都在折腾armbian，对openwrt没啥经验，这里简单记录下这两天折腾openwrt的内容。
首先openwrt也是linux魔改，意味着除了webui之外，还以ssh连上用命令行操作。
其次，这里要着重讲一下，ws1408用usb burning tool软件刷openwrt固件的时候，
【擦除flash】选项选【普通擦除】，千万不要选【全部擦除】
选后者会导致机器变砖，或者导致机器刷成功以后无法再刷机，必须要用usb ttl工具。
换源 首先是ws1408的软件源配置，固件自带的源是supes.top，访问不稳定，先换掉。这里用ustc中科大的源。
src/gz openwrt_core http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/targets/at91/sama5/packages src/gz openwrt_base http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/base src/gz openwrt_luci http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/luci src/gz openwrt_packages http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/packages src/gz openwrt_routing http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/routing src/gz openwrt_telephony http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/telephony 注意ws1408要选at91/sama5和arm_cortex-a5_vfpv4这俩硬件分支的源。至于为啥我也不清楚，实际用下来确实没问题，试着装了samba4，一切正常。
换源以后，就可以在webui中点击更新列表，如果web端操作依然报错，可以ssh进系统以后执行以下命令
opkg update </description>
    </item>
    
    <item>
      <title>玩客云可用Armbian和OpenWrt固件分享</title>
      <link>https://ruohai.wang/202307/wky-firmware-share/</link>
      <pubDate>Fri, 14 Jul 2023 23:07:44 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wky-firmware-share/</guid>
      <description>玩客云，还有好多名字：赚钱宝、老母鸡、网心云，这里都指型号ws1608的那个小机器。
这机器现在pdd、闲鱼上的价格稳定在30rmb左右，但闲鱼上都要求10个起包邮，咱也不是矿场，买一两个回来玩玩就够了，所以我更推荐从pdd入手。
这机器玩了几个星期，目前来看，就能刷俩固件。第一刷armbian，然后根据自己需要手搓各种服务（file browser/qbittorrent/samba/alist/ddns-go/docker/typecho/cups/home assistant/&amp;hellip;），或者装casaos这种打包好各种服务的轻系统。第二刷openwrt当旁路由。也有很多人在armbian基础上再装openmediavault，但我根据omv官方的文档尝试了几次，不管是6.1内核还是5.9内核的固件，都没成功。
玩这种小设备肯定得去恩山论坛了，但论坛这种资源分享模式实在是太old school了，我不太喜欢，因为找资源太累。所以这里直接分享我用下来非常稳定的armbian和openwrt的两个固件下载地址。
armbian固件地址:https://github.com/hzyitc/armbian-onecloud
这个repo是根据上游armbian/build编译的玩客云专用固件。这里重点说下，固件名称中带burn字样的是线刷版本，刷入机内emmc；带minimal字样的是精简版。我用下来非常稳定。
openwrt固件地址：https://cloud.189.cn/t/rAv6v2ENnmAn （访问码：6hhb）
这个是恩山论坛里id:2224758988的用户分享的版本，我短暂体验了几天，也很稳定。如果上面这个链接失效，可以去【原帖地址】这里找。我对旁路由这种使用模式并不是很满意，所以用了几天以后就撤掉了。</description>
    </item>
    
  </channel>
</rss>
