<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/docker/</link>
    <description>Recent content in Docker on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:33:53 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用Docker方式部署轻量RSS阅读器Miniflux</title>
      <link>https://ruohai.wang/202409/miniflux-install-guide/</link>
      <pubDate>Fri, 06 Sep 2024 00:33:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/miniflux-install-guide/</guid>
      <description>前言 最近准备自建一个rss阅读器（被互联网大厂的网络服务背刺过几次以后，我已经倾向于能自建的服务都自建）。
上一次使用rss阅读器可能还得追溯到10多年前的google reader，自从google突然宣布关闭reader服务以后，我也就在没有用过rss阅读器。而且这些年的互联网发展趋势，确实是从开放走向封闭，博客由盛而衰，内容社区也是往往是限制必须注册登录后内容可见，更有甚者甚至都不对搜索引擎开放收录，大搞私域流量。
回到正题，这次是要自建一个rss阅读器服务。首先是了解了以下现在可选的自建rss阅读起服务有哪些。这里看到【这篇博客】整理的表格。
我最后选择的是miniflux有两个原因，其一是考虑到资源占用，因为我可能需要把服务部署到性能孱弱的arm盒子上，其二是前两个服务用的都是php方案，我对php不熟，虽然都支持docker一键部署，但考虑到如果原生部署，miniflux只需要一个预编译的go二进制包就行了。
部署 miniflux官方的文档提供了部署教程，英语阅读没有障碍的话可以直接看官方文档。
我选择了docker-compose部署，所以非常简单，只需要准备一份docker-compose.yml文件即可。miniflux官方文档里已经提供了docker-compose.yml的模板，只需要根据自己的需求调整一些配置即可。
以下是官网模板在2024/09/06提供的模板，模板具有时效性，请留意官网模板可能会有更新变动。
services: miniflux: image: miniflux/miniflux:latest ports: - &amp;#34;80:8080&amp;#34; depends_on: db: condition: service_healthy environment: - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable - RUN_MIGRATIONS=1 - CREATE_ADMIN=1 - ADMIN_USERNAME=admin - ADMIN_PASSWORD=test123 db: image: postgres:15 environment: - POSTGRES_USER=miniflux - POSTGRES_PASSWORD=secret - POSTGRES_DB=miniflux volumes: - miniflux-db:/var/lib/postgresql/data healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;pg_isready&amp;#34;, &amp;#34;-U&amp;#34;, &amp;#34;miniflux&amp;#34;] interval: 10s start_period: 30s volumes: miniflux-db: 从yml文件中可以看到需要安装两个服务，一个是miniflux本体，另一个是数据库postgres。实测amd64版本的两个服务的镜像占用大概500MB的存储空间。
根据自己的需求，我对配置模板做了简单调整，调整的内容做了注释
services: miniflux: image: miniflux/miniflux:latest container_name: miniflux # 指定容器名称 user: 1000:1000 # 这里指定用非root账户运行容器 restart: always # 增加重启策略 ports: - &amp;#34;80:8080&amp;#34; # 指定端口以后记得防火墙放行 depends_on: db: condition: service_healthy environment: - DATABASE_URL=postgres://miniflux:123456@db/miniflux?</description>
    </item>
    
    <item>
      <title>拉不动镜像？给Docker配置代理服务器</title>
      <link>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</link>
      <pubDate>Fri, 21 Jun 2024 19:57:04 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</guid>
      <description>已经写了两篇文章记录怎么在debian和openwrt上安装和使用v2raya，顺便再水一篇文章记录下怎么给docker配置代理服务器。
docker官网提供了简单直白的英文文档，如果英文阅读无障碍的话可以直接看原文：【Configure the daemon with systemd】
注意一下这个方法有个前提，就是docker的部署环境使用的是systemd，而不是sysv init或者openrc之类。
方法一：编辑daemon.json
注意使用这个方法需要自己的docker engine版本大于23.0，低于这个版本号只能用方法二。
可以用docker version命令查看自己机器上的docker版本号。
在/etc/docker目录下新建daemon.json文件，然后根据以下内容的格式录入自己的代理服务器信息。
{ &amp;#34;proxies&amp;#34;: { &amp;#34;http-proxy&amp;#34;: &amp;#34;http://proxy.example.com:3128&amp;#34;, &amp;#34;https-proxy&amp;#34;: &amp;#34;https://proxy.example.com:3129&amp;#34;, &amp;#34;no-proxy&amp;#34;: &amp;#34;*.test.example.com,.example.org,127.0.0.0/8&amp;#34; } } 方法二：编辑docker.service
如果docker engine版本低于23.0，或者上面的配置没有效果，可以用方法二。
先创建目录和文件
mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/http-proxy.conf 然后编辑http-proxy.conf文件，然后根据以下内容的格式录入自己的代理服务器信息。
[Service] Environment=&amp;#34;HTTP_PROXY=http://proxy.example.com:3128&amp;#34; Environment=&amp;#34;HTTPS_PROXY=https://proxy.example.com:3129&amp;#34; Environment=&amp;#34;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp&amp;#34; 最后一步
完成了方法一或者方法二的编辑以后，重启docker。
systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker.service 查看变更是否生效，可以用命令docker info
也可以用命令systemctl show --property=Environment docker
好了，到这里给docker配置代理服务器就完成了，再也不用担心docker pull拉不动镜像惹。
🎉
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>UFW防火墙对Docker容器不生效的问题解决</title>
      <link>https://ruohai.wang/202310/ufw-solve-conflict-with-docker/</link>
      <pubDate>Fri, 06 Oct 2023 19:35:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/ufw-solve-conflict-with-docker/</guid>
      <description>在debian下用docker部署的方式安装了immich，默认端口2283。
为了安全，肯定不会用默认端口。部署完immich简单调试没问题以后，就开始安装ufw管理端口。
但实测发现ufw未开启2283端口的情况，immich的web服务依然可以访问，也就是ufw对docker服务不生效。
找了下解决方案。
在/etc/docker目录下新建daemon.json，添加配置项：
{ &amp;#34;iptables&amp;#34;: false } 保存退出。
# 重载 systemctl daemon-reload # 重启docker systemctl restart docker # 重启ufw systemctl restart ufw 因为ufw和docker都会操作iptables，这个方案选择禁掉docker，以ufw为准。
参考文章 Docker 和 UFW 一起用可能会出现问题 https://zhuanlan.zhihu.com/p/628899663 </description>
    </item>
    
    <item>
      <title>Linux下安装Docker Engine</title>
      <link>https://ruohai.wang/202307/install-docker-engine/</link>
      <pubDate>Fri, 14 Jul 2023 23:20:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-docker-engine/</guid>
      <description>在linux上安装docker，官方有详细的教程指导如何安装。但如果你和我一样用的linux发行版是debian以及debian的衍生发行版，可以直接用debian官方维护的docker.io。
apt install docker.io docker官方把docker.io称为unofficial packages非官方的版本。
因为docker.io是debian在维护而不是docker官方，而且2019年的时候曾经停止维护了1年导致版本落后太多。但现在不用担心docker.io版本问题，目前仓库里已经是20.10.24。</description>
    </item>
    
  </channel>
</rss>
