<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQLite on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/sqlite/</link>
    <description>Recent content in SQLite on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 07 Oct 2024 19:38:32 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/sqlite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Debian和OpenWrt上使用sqlite3-cli进行简单数据维护</title>
      <link>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</link>
      <pubDate>Mon, 07 Oct 2024 19:38:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</guid>
      <description>前言 我使用的memos默认用的数据库是sqlite，在长期使用memos的过程中，偶尔需要直接操作数据库进行一些冗余数据清理、错误数据debug。
在windows上维护sqlite数据库时，我用的工具是免费 &amp;amp; 开源的【sqlite studio】，带gui操作界面，非常好用，值得推荐。
但很多时候我希望ssh连上linux服务器以后，直接在终端中维护sqlite数据库，这就需要用到sqlite-cli工具。写篇文章做个记录。
安装 &amp;amp; 使用 首先是安装sqlite3-cli工具。
在openwrt上，只需要在软件仓库中根据关键字搜索然后点击安装即可。
在debian上直接apt一把梭。
sudo apt install sqlite3 然后是一些简单的数据库维护。
使用sqlite3-cli工具打开sqlite的db文件
sqlite3 /path/to/sqlite3/dbfile.db 然后就会进入sqlite&amp;gt;的命令符界面，表明已经可以对sqlite数据库文件进行操作了。
最后列举几个常用的sqlite3-cli的命令
# 显示数据库 .databases # 显示数据库表 .tables # 退出 .quit 参考文章 SQLite 命令 pawelsalawa/sqlitestudio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>土法解决Memos的SQLite3 WAL模式下丢失数据问题</title>
      <link>https://ruohai.wang/202312/memos-turn-off-wal-log/</link>
      <pubDate>Mon, 25 Dec 2023 00:31:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202312/memos-turn-off-wal-log/</guid>
      <description>前言 自从我的twitter账号被冻结以后，就自建了memos用来发一些日常琐碎的记录。
不得不说memos还挺好用的，轻量级，docker一键部署，全终端覆盖，多平台适配，自己一个人发发牢骚很好用。
但在使用的过程中也碰到过一两次bug，小bug自己解决一下就算了，没当回事。
但这次碰到一个大bug，直接导致丢失了半天的数据。
痛定思痛，找了一个土法解决方案，这里做简单记录。
问题 memos默认使用sqlite3数据库，默认开启wal模式。wal模式，write-ahead logging，可以简单理解为缓存数据库，就是写入、编辑的数据并不是实时写入db，而是缓存在db-wal文件中。当db-wal中缓存的数据记录条数达到指定数量时，触发check-point，再写入db。
我碰到的问题：
存储介质（一根2gb的u盘）出现了disk i/o error db-wal中有一部分数据还没有写入db memos出现报错无法使用，直接重启memos服务后db-wal缓存的记录全部丢失 因为过了几个小时才到家开始处理这个bug，设定的每小时rsync备份的那版db-wal数据也没了 解决方案 最佳的解决方案，那肯定是换掉那根出现disk i/o error的u盘，把memos部署到一个安全的存储介质上。
或者禁用wal
PRAGMA journal_mode = OFF; 或者调小wal_checkpoint的记录数
PRAGMA wal_autocheckpoint = 100; 以上两个方法我都试过，但实测重启memos以后，sqlite配置会被重置。
最后直接上粗暴土法：
重启memos会把db-wal数据写入db，设定一个crontab定时任务，每隔4小时重启memos，实现每隔4小时把缓存数据写入db的auto-check-point。 0 */4 * * * docker restart memos </description>
    </item>
    
  </channel>
</rss>
