<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PhotoPrism on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/photoprism/</link>
    <description>Recent content in PhotoPrism on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Dec 2024 15:18:39 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/photoprism/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PhotoPrism缺点大吐槽：哪哪都不行，建议弃用</title>
      <link>https://ruohai.wang/202412/photoprism-complains/</link>
      <pubDate>Thu, 05 Dec 2024 15:18:39 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/photoprism-complains/</guid>
      <description>前言 先声明：从去年的7~8月份我开始折腾自建相册，当时对比了immich最后选择了photoprism，至今也用了一年半的时间了，所以算是个老用户了，不是简单新手向的吐槽。
为什么用了一年半以后才开始写这个吐槽文，因为我自己用java写了一个小服务来处理照片归档，所以最后一个对pp的依赖也没有了，终于可以把pp从我的服务器上remove掉惹。
在放弃pp的这一刻，写篇文章记录一下我在使用pp的过程中碰到的几个超级大槽点。
超级大槽点 槽点一：照片统一重命名都按照UTC时区处理
这个是pp归档照片时最大的bug。
pp有个功能，就是按照统一规则生成一个唯一的文件名将照片进行重命名，所以最后的文件名都是yyyyMMdd_HHmmss_xxxxxxxx.jpg这种格式，其中最后8位x应该是类似md5一样根据文件生成的8位字符串。
这个功能很好用，也是强制启用的功能。按照这个规则重命名以后的照片/视频，根据文件名就能很方便的知道文件的创建时间，而且也统一了文件名，看上去很干净规整。
但是这个功能有个很大的bug！！！！
pp是按照utc时区来生成的文件名，也就是正确的照片时间需要减去8个小时来生成文件名！！！
比如某时某刻我拍了一张jpg照片，拍摄时间是2024年12月5日15点36分44秒，那照片归档正确的文件名应该是20241205_153644_xxxxxxxx.jpg。但是pp会无视照片exif中的时区信息，而是按照utc时区生成文件名，也就是北京时间减去8个小时，最后就变成了20241205_073644_xxxxxxxx.jpg。
(╯‵□′)╯︵┻━┻
不过，比起原始照片文件各种乱七八糟无规则、无意义、自然递增的文件名格式，现在这个文件名只是时间少了8个小时，好像也不是太大的问题。
那就要配合上下面这个大杀器！
槽点二：照片归档也按照UTC时区处理
pp归档图片和视频文件时，是根据文件的创建时间，按照yyyy/mm的目录结构来归档文件的。
但是由于槽点一的存在，又导致了一种情况：
月初拍的照片有可能被归档到上个月！比如，2024年12月1号早上7点拍的照片，减去8小时是2024年11月30号晚上11点，就被归档到2024/11目录惹 年初拍的照片可能被归档到上一年！比如：2024年1月1日早上7点拍的照片，减去8小时候是2023年12月31日晚上11点，就被归档到2023/12目录惹 这种情况下，如果在pp中搜索2024年12月份的照片，或者搜2024年的照片，这种错误归档的照片就搜不到了！！！
(╯‵□′)╯︵┻━┻
我在使用photoprism的这一年半时间里，也想过是不是我什么地方没设置正确，比如是不是docker-compose.yml中没有加timezone参数，是不是服务器的时间设置错误。我在官方wiki和官方github issue里也找过，但实在是个人能力有限，没有找到什么有用的解决方法。
但我又非常喜欢pp这个按照文件时间统一重命名、统一归档的功能，另外几个相册（比如immich）都没有这个功能，所以最后我不得不在有如此两个大槽点的情况继续坚持使用pp。
槽点三：图片算法识别功能很垃圾
pp作为一个完整的相册服务，也提供了图像算法识别功能，用来进行图像主体识别、人脸识别、自动标签、自动创建精彩时刻、图片质量打分等等智障功能。
但我实体使用下来的体验是：不好用，非常不好用。
不说和google、apple的图像识别算法对比，也不和国内各个手机厂商提供的手机智能相册比，只是和immich比，我都感觉差了很多。主体识别错误、检测不到人脸、自动标签错误，很难说达到可用级别。
对于pp的图像识别算法功能，我的点评是：能用但是不好用，徒增功耗、浪费算力，建议关闭。
槽点四：免费版pp的gps解析功能有限制
相信很多pp用户和我一样都是用的免费社区版（community）做自建相册，pp免费版也带了照片地图功能，根据照片exif中保存的gps信息显示照片的拍摄地并显示在地图上。
但是，但是，pp的骚操作又又又来惹！！！
免费版pp根据gps坐标数据解析地理位置的api有请求数量限制！！！有rate limit！！！
也就是如果一次导入比较多的照片，很容易就达到这个reverse geocodeing接口的请求数量限制，这个api会直接报timeout错误让你以为是自己网络出了问题。
如果达到这个rate limit，很抱歉解析照片地理位置的功能就gg了。
如果你在导入照片的时候，导到中途免费请求次数用完了，会发生什么：
剩下的照片依然能导入，只是剩下的照片都没有地理信息了 解析照片gps的请求依然会发起，但每次都是超时无响应（timeout），这个超时要等好几秒，导致整个导入过程变成非常慢 在官方wiki我没有查到明确的免费请求次数，也没有查到如果免费请求次数耗尽以后是否会隔天重置。
不过作为免费白嫖党，官方对此功能做出rate limit也算可以理解，因为官方提供这个服务需要开销，只是让付费用户分摊了。
如果你是pp重度用户，建议花钱订阅支持pp，就可以无限制使用照片地理信息解析的接口惹。
如果你和我一样是pp白嫖党，建议关闭pp的【地点】功能。
槽点五：普通图片的时间信息提取规则不完善
首先定义下这里说的普通图片。这里把用手机、相机拍摄而成的图片称之为【拍摄行为】产生的照片，把存的网图、微信图、截图、微博图称之为【非拍摄行为】产生的普通图片。
pp在将文件进行归档时，需要提取文件的时间信息。如果是照片文件，这类文件的exif中都有完整的Date/Time Original、 Date/Time Digitized信息，只需要读取这些tag中保存的时间字符串解析成时间，然后用这个时间给文件重新命名就行了（别忘了会减去8个小时）。
如果是普通图片，这种文件的exif中没有Date/Time Original、 Date/Time Digitized这些tag，那要如何提取这个文件的时间呢？
经过我的摸索，pp提取文件时间信息的规则优先级如下：
Date/Time Original、 Date/Time Digitized：这俩tag可以理解位照片的拍摄时间，pp读到这个时间后会按照utc时区处理 从文件名中提取时间：图片文件的exif没有以上两个tag，但文件名中包含了时间信息，比如Snipaste_2024-12-05_20-50-36.jpg，只需要拿到2024-12-05_20-50-36这段字符进行解析即可。这个规则下，pp读到什么时间就是什么时间，不会处理时区。 如果以上两个规则都无法提取到文件的时间，则以系统当前时间为准，pp读到这个时间后也会按照utc时区处理 这些规则不仅仅是pp在用，其它相册服务应该也大差不差。
从以上规则可以看出，普通图片文件很容易因为无法满足规则1、规则2，最后在归档时，直接以系统当前时间给文件重命名。从某种程度上说，这倒也无可厚非，毕竟没有其它方法获取这种文件的创建时间了，只能用这种方式作为保底。
但是，是的，又要接一个但是，为什么这也会成为pp的一个大槽点？
因为pp的规则2（从文件名中提取时间）甚至都不支持它自己的归档文件名格式，也就是yyyyMMdd_HHmmss_xxxxxxxx，pp碰到这么标准的文件名竟然无法提取时间，最后会按照规则3给文件重命名！！！
这个bug会导致的问题就是：用pp归档过一次的文件，如果重新导入pp，那这些普通图片文件都会按照系统当前时间进行重命名和归档！也就是这些普通文件不管第一次导入时被归档到哪天，在二次导入时，都会被归档到今天。
你可能会觉得奇怪，为什么会有傻x把已经归档过的照片反复导入pp归档。</description>
    </item>
    
    <item>
      <title>PhotoPrism社区版解析照片地理位置（Geocoding）接口请求超时</title>
      <link>https://ruohai.wang/202403/photoprism-geocoding-api-limit/</link>
      <pubDate>Thu, 28 Mar 2024 22:56:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202403/photoprism-geocoding-api-limit/</guid>
      <description>在自建相册应用的选择上我一直用的photoprism，社区版免费而且功能已经能满足我的需求，更重要的是官方还在维护基于arm32/v7版本的镜像，这就意味着我可以把它安装在玩客云上（前提是关掉所有需要tensorflow图像识别算法的功能）。
之前我使用photoprism的时候，偶尔用docker-compose logs -f，或者在web端的资料库-日志中查看日志时，会看到获取照片地理位置的接口报错，提示请求超时，最后导致照片无法获取详细的地理位置信息。
我一直以为是网络原因（被gfw干扰之类）所以接口不稳定，也试过给photoprism挂全局代理，但似乎并没有什么卵用。
直到今天，我偶尔从web端的版本比较入口跳转到官网
仔细查看了社区版与订阅版的区别，发现了其中一条
社区版的geocoding接口是有请求频率限制的！！！
这个接口的用途就是根据照片中保存的gps经纬度信息，转译成自然语言的地理信息。
它被限制请求频率，意味着在导入照片数量比较大的时候，照片的地理位置无法转译。具体的免费请求次数、频率在官网没有查到。
对这个功能有强烈需求的话，可以考虑花钱订阅photoprism，最便宜的€2/mo就解除限制惹。
😂</description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署PhotoPrism</title>
      <link>https://ruohai.wang/202311/photoprism-install-on-onecloud/</link>
      <pubDate>Tue, 21 Nov 2023 08:49:04 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/photoprism-install-on-onecloud/</guid>
      <description>前言 硬件性能：
photoprism官方明确要求部署pp服务的最低硬件要求是4核 + 4GB内存，玩客云的cpu性能孱弱而且内存也仅仅只有1GB 能跑起来的前提是禁用全部的图像算法识别功能 如果你需要的是一个全功能的photoprism，那这个方案不适合你，更不适合玩客云 实测部署成功以后，photoprism能跑，网页端访问流畅，导入100+张图片未出现oom。适合轻负载使用 实测转码一张mi10s拍摄的2400万像素的heif/heic格式的照片到jpg需要7秒钟，纯cpu编解码 转码视频，mi10s拍摄的1080p@60fps h265视频30秒，转码成720p avc视频，大概需要2分半，纯cpu编解码 存储空间：
docker.io + docker-compose大概占用300MB存储 photoprism + mariadb镜像大概占用1.6GB存储 合计大概占用2GB空间，玩客云内置emmc可用空间大概是6GB，能装下，但需要提前考虑存储空间的占用 部署 &amp;amp; 优化 第一步：安装docker环境
直接用debian仓库里的docker.io
apt install docker.io 使用docker-compose方式部署
apt install dockere-compose 因为docker hub国内被屏蔽，记得配置docker国内镜像
第二步：配置文件调整
先创建目录吧。玩客云内置存储空间比较珍贵，pp的运行目录记得放在外置存储。
# 创建目录，记得把pp运行目录指向外置硬盘 mkdir photoprism ; cd $_ # 下载官方的配置文件 wget https://dl.photoprism.app/docker/armv7/docker-compose.yml 官方提供的配置文件，除了常规的密码、运行目录之类，还有以下几个项目要修改
PHOTOPRISM_DEFAULT_TLS: &amp;quot;false&amp;quot;，这个选项是pp程序初次部署时生成一个自签名的https/tls证书，没卵用，而且在玩客云上部署时会耗费大量时间以生成证书，建议禁用 PHOTOPRISM_DISABLE_CHOWN: &amp;quot;true&amp;quot;，这个选项是pp每次启动的时候调整storage目录的权限，如果图库文件数量很大，会导致每次pp启动都非常非常耗时，建议禁用 PHOTOPRISM_DISABLE_WEBDAV: &amp;quot;true&amp;quot;，禁用webdav服务。webdav服务用来分享照片的，用不上，禁用。也可以在webui里禁用。 PHOTOPRISM_DISABLE_TENSORFLOW: &amp;quot;true&amp;quot;，禁用tensorflow。图像算法识别功能，吃硬件性能，玩客云上跑pp必须禁用掉。务必在配置文件中直接禁用，要不然启动pp都很难。 user: &amp;quot;1000:1000&amp;quot;，有权限洁癖的用户需要这个，自己加一行参数，指定photoprism以non-root用户运行。如果加了这条，对应的originals、import、storage三个目录需要提前手动创建并分配用户权限。如果以root用户运行，这条可以无视。 image: linuxserver/mariadb:10.6.13，这是mariadb的配置项，目前支持armv7的mariadb的最新（后）一个版本就是10.6.13，需要指定版本。 改完配置文件以后，就可以开始部署了
docker-compose up -d 不出意外等命令跑完就OK了。
不过pp启动还是会稍微有点耗时，大概需要半分钟到一分钟的样子就可以访问web端了。
第三步：web端功能精简
有些功能可以在webui中进行优化（禁用），可以酌情调整。
一般：人物：建议关闭，需要tensorflow进行人脸识别 一般：标签：建议关闭，需要tensorflow进行照片主题识别添加标签，禁用tensorflow以后没有标签了，没必要保留入口 一般：瞬间：建议关闭，根据地点、标签、人脸之类标签来汇总整理的相册功能，禁用掉地点和tensorfow以后这功能就是个残废，没必要保留入口 资料库：估算：建议关闭，地理坐标的功能 高级：禁用webdav：建议关闭 高级：禁用地点：建议关闭，除了吃硬件性能之外，这服务还会需要去网上下载地图数据，碰到网络差或者网站被屏蔽时会导致照片索引服务卡在网络请求这一步很久 高级：禁用exiftool：建议关闭，每个照片都会创建一个exif json文件，非常吃i/o存储性能 高级：禁用tensorflow：务必关闭，玩客云上开这个功能的话pp根本没法用 高级：禁用备份：建议关闭，pp默认会统一修改原文件名，所以需要备份原始元数据到yaml文件，大量小文件吃i/o性能，对原文件名没有要求的话可以关闭 高级：动态预览：建议关闭，它自述不适合低性能nas，所以关闭 高级：禁用imagemagick：建议关闭，raw文件生成缩略图用的，没有raw文件就关闭 大致就这些了，禁用掉这些功能以后，photoprism在玩客云上就能流畅运行了。</description>
    </item>
    
    <item>
      <title>PhotoPrism视频功能的不足</title>
      <link>https://ruohai.wang/202310/photoprism-use-guide-about-video/</link>
      <pubDate>Sun, 22 Oct 2023 02:03:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-use-guide-about-video/</guid>
      <description>前言 photoprism以下简写pp。
文中pp使用docker-compose方式部署。
两个星期pp的使用体验下来，对比起immich，就像是守旧老派对标先锋新锐的感觉。使用的时间越久，这种体验越强烈。
当然这篇文章重点讲pp对于视频文件的使用体验。
pp对于视频文件的支持这一块值得单独拎出来写一篇文章，因为能看出来pp在这么多年的迭代过程中，对于视频功能似乎一直不怎么上心，导致视频文件的交互体验非常差。也许是因为对产品的定位，也许是觉得视频太吃硬件性能、太消耗存储空间
视频功能的不足 默认不开启视频转码。 在默认情况下，pp是不开启视频转码的。这种情况下，查看视频就是直接播放原素材。如果原视频的拍摄规格比较高的话，非常考验硬盘读写速度、网络带宽和播放设备的解码能力。
开启视频转码需要改配置文件 immich的视频转码功能直接在网页端就可以配置，分辨率、码率、硬件加速，网页端都提供了配置入口。pp的设置页面虽然有一大堆设置项，但那些都是针对照片的，包括让我误解了很久的【动态预览】，我一直以为这个是指实时转码，其实它也是针对照片。
pp开启视频转码，需要编辑docker-compose.yml文件，解开注释以下代码。
PHOTOPRISM_FFMPEG_ENCODER: &amp;#34;software&amp;#34; ## 解码方式，默认软解 PHOTOPRISM_FFMPEG_SIZE: &amp;#34;1920&amp;#34; ## 转码分辨率，默认1080p PHOTOPRISM_FFMPEG_BITRATE: &amp;#34;32&amp;#34; ## 转码码率，默认32Mbps 然后重新部署pp即可。
docker-compose up -d 如果想配置集显或者显卡硬解，请参考官网，还需要改更多地方。
开启视频转码后不会提前转码 启用了视频转码以后，并不会把图库里的所有视频全部都转码一遍，不会。
pp的视频转码，是用户在点击视频播放的那一刻，才立刻开始转码，等转码好了，再给你播放转码处理过的【小】视频。这中间会有一个等待时间，至于这个等待时间有多长，取决于你用来跑pp的电脑性能有多差，可能等5秒，也可能等50秒，如果视频很大规格很高的话，等5分钟也不是没可能。至于看个视频需要等这么久才开始播放，这使用体验有多糟糕，pp官方不在乎。
那有没有办法把图库里的视频全部都转码一遍呢，有，有办法。官网给了一条命令，执行以后，会把图库里的全部视频都提前转码，下次点击播放视频就不需要再等了。
docker-compose exec photoprism photoprism convert 如果图库又上传了新的视频，我估计，应该还需要再手动执行这条命令。
视频播放界面很简陋 播放视频的时候，是一个全屏遮罩的播放界面，不仅和查看照片一样没有信息侧栏，连编辑的入口都没有。而且播放界面点出菜单选择下载，下载下来的竟然是转码后的【小】视频，下载的竟然不是原视频！
那想要查看视频文件的exif信息要怎么操作？想要下载原视频要怎么操作？在照片墙页面，点击小圈圈选中文件，然后点击页面右小角的大圆圈，弹出功能菜单，里面有一个圈是【编辑】功能可以查看exif，一个圈是【下载】可以下载原视频。
视频不支持鼠标悬停自动播放 这个功能immich是支持的，非常方便查看视频内容。而且转码以后的小视频，全屏播放的时候清晰度会比较差，十分影响观看体验，在照片墙界面小窗口播放是最合适的。很不幸，pp不支持这个功能，视频文件默认只抽取一张图片当封面，想查看视频内容，得点击播放，然后弹出那个简陋的全屏播放遮罩。如果这个视频文件没有转码的话，你可能还需要耐心的等上几十秒甚至几分钟才能看。
视频播放不支持旋转 网页端播放视频时，没有旋转方向的功能，不管视频是竖的还是横的，将就着看吧。不过，如果在手机上用pwa小应用（网页）看视频的话，它会无视手机是否关闭了自动转向，根据重力感应计自动旋转，倒是实现了视频旋转方向的功能。</description>
    </item>
    
    <item>
      <title>PhotoPrism的优点和缺点</title>
      <link>https://ruohai.wang/202310/photoprism-pros-and-cons/</link>
      <pubDate>Sat, 14 Oct 2023 04:45:30 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-pros-and-cons/</guid>
      <description>前言 优缺点内容会随着日常使用不断更新。
下文中photoprism会简写成pp。
这篇文章中列举的优缺点不涉及界面是否好看之类，喜欢什么ui/ux直接看官网demo即可。
对比产品是immich。
其它类似产品lychee、piwigo、mt-photos、photoview、librephotos等等，懒得试了。
简单总结：稳定好用，缺点很多但还算能接受。建议photoprism作为主相册，immich作为备用相册，俩一起用。
优点 稳定。优点等级：✔️✔️✔️✔️✔️ 服务稳定运行，这点是日常感知非常不明显，但却是最重要的优点。pp的个人自建版本免费，另外还有多种不同定价的收费服务方案。能出收费商业方案的，相信我，不会有太大的bug。而且我在日常使用的过程中，确实感觉就是pp运行起来【稳如老狗】，不管出现什么错误操作，它都有对应的撤回/修正的方案。
而我在使用immich的短短一个星期里碰到了好几个bug，对比以后，pp的这个优点值五星。
当你碰到服务出了bug，自己debug也毫无头绪，最后只能推倒从来，把80000张照片倒过来倒过去的时候，就会发现这个点的重要性。
支持多硬盘。优点等级：✔️✔️✔️✔️✔️ pp服务跑起来以后，常用的会有三个目录：
originals：存放归档的原图 storage：存放缓存、缩略图、转码视频、配置文件 import：存放需要导入到pp的照片和视频 这三个目录都支持自定义路径。比如originals目录指向大容量的机械硬盘来保存原图，方便维护的同时也保障数据安全。比如storage目录指向高速ssd，用来加速浏览性能，避免网页浏览的时候卡顿。比如import目录可以指向存了大量图片的老图库的硬盘，然后在网页端直接一键导入完成数据迁移。pp甚至还支持给照片和视频分别指定路径，可以把照片和视频分开存到两个硬盘。
支持多硬盘还有一个好处，就是存储空间存储空间的最大化利用，这点对比immich只能指定一个目录的时候非常明显。
immich只能指定一个目录，意味着只支持单盘，所以所有数据，无论原图还是缓存、缩略图、转码视频等等，都只能保存在一个硬盘上。一个是不方便维护，二是这导致硬盘空间消耗的特别快。比如2TB的硬盘，原图占了1.5TB，那缓存+缩略图+转码视频可能得占掉500GB，那这时候就不得不考虑买一个更大容量的硬盘，然后迁移数据。而pp因为支持多盘，缓存盘不会去占用原图盘的空间，硬盘空间会更耐用一些。
支持多语言。优点等级：✔️ immich不支持多语言（没有中文），pp支持多语言，这就是pp的一个优点。
归档照片统一重命名。优点等级：✔️✔️ 默认设置下，所有照片视频归档以后都会被按照固定格式统一重命名，yyyymmdd-hhMMss + 8位随机字符串 + 文件后缀名。原文件名只会保存在数据库。
这点孰优孰劣看个人喜好，我觉得是个优点。因为原始文件的文件名杂乱无章，统一以后看上去整理利落，就算是一个处女座的强迫症用户都挑不出一点瑕疵。而且yyyymmdd-hhMMss的前缀也很容易辨认。
pp网页端支持通过原文件名搜索。
如果不喜欢这点的用户记得从设置里关掉这个功能。
批量导入很方便。优点等级：✔️✔️✔️✔️ pp有一个专门的import目录是导入用的，配合samba把这个目录设置成smb共享文件夹，直接映射到日常使用的windows电脑或者mac电脑上，只需要把照片视频复制到import文件夹，然后在pp网页点击导入就行了，非常方便。这比起immich需要装npm再用命令来批量导入可方便太多了。
也可以把老的图库直接复制移动到originals目录下，然后在网页端点击索引。这样可以保留老图库的目录结构和文件名。
缺点 导入照片耗时漫长。缺点等级：❌❌❌❌❌ 如果是通过import目录批量导入图库，那这个导入过程和跑pp的主机cpu性能直接关联。导入照片 + 算法处理照片 + 照片归档，整个流程是同步线性进行的，也即是上传一张照片 + 算法处理照片 + 照片归档，这个流程跑完了，再开始处理下一张照片。
这意味着什么，如果用来跑pp的电脑性能很差（很多人都会拿性能很差的旧电脑用来跑nas然后装很多服务），那算法处理照片这一步会卡很久，因为这一步包含了照片元数据读取、人脸识别、照片主体识别、给照片加上各种标签、gps信息处理等等一长串的任务。如果电脑的cpu性能孱弱，那一张照片就要处理4~5秒钟，如果照片的内容包含了大量的元素，甚至可能要处理10秒钟。这就会导致【导入照片】这个过程变得非常非常非常的漫长，可以算一下如果要导入10000张照片，每张照片耗时5秒钟，cpu是两核两线程的古董，整个过程需要耗时多久，是7个小时！天哪，是7个小时！！！！如果照片数量翻翻，50000张照片，完成导入又需要多久。
这个缺点在2023年简直是难以置信，千万不要用弱鸡cpu来跑pp。
正确的处理方式可以参考immich，导入 + 读取元数据 + 归档 + 图像算法处理，这些任务全部异步处理。限制导入速度的只有你的网络带宽和硬盘读写速度。无论是100张还是1000000张，导入时直接跑满硬盘读写速度，体验就是丝般顺滑。至于读取元数据、生成缩略图、图像算法处理、视频转码，扔到后台去慢慢处理。
查看大图界面没有exif侧栏。缺点等级：❌❌❌ 大抵现在所有的照片查看软件都支持侧栏显示exif信息，高级一点的甚至还能在侧栏显示gps地图定位信息，比如immich。但很不幸pp不支持，它没有侧栏。
想要在pp里看到exif信息，有两个方法，第一种就是照片墙界面选择卡片布局或者列表布局，会展示一些简略的exif信息，第二种就是在查看大图界面，点击一下【编辑】就会进入照片信息编辑界面，会出现5个标签可以查看照片的各种信息，但很不幸依然没有gps地图定位。
没有官方app。缺点等级：❌❌❌❌ 官方只提供了网页端服务，pc端、移动端都只能用浏览器访问pp网页。但好消息是pp网页支持pwa，也就是可以把网页“安装”到桌面当成一个app用，使用体验嘛就那样。
官方推荐的第三方app收费。缺点等级：❌❌❌❌❌ 这点非常下头，非常的下头。官方没app也认了，但官方贴心的给你推荐了一个app，叫photosync，ios/android平台都有，可以实现移动端同步照片到pp。不过天下没有免费的午餐，这app下载免费，但有内置广告，同步照片的功能很不幸需要付费，你可以免费体验7天然后选择花$5.99购买。
视频不支持鼠标悬停自动播放。缺点等级：❌ immich支持照片墙浏览时鼠标悬停视频自动播放，pp不支持。在使用体验上影响不大，就是每次看视频需要多点击一下。
不支持照片旋转。缺点等级：❌❌❌ 很多照片拍摄的时候有的横向有的竖向，我也不要求pp用算法自动纠正，但至少给我一个编辑的入口吧。很不幸，没有旋转照片的功能。
归档目录结构无法自定义。缺点等级：❌❌❌ pp的归档目录结构是yyyy/mm两级，也就是归档的最小时间单位是月，举例就是2023年10月拍的所有照片和视频，无论是10月哪一天拍的，都会归档到2023/10这个目录下。这个目录结构无法自定义，比如我想改成2023/2023-10/2023-10-14，很不幸，不支持自定义。
归档照片统一重命名。缺点等级：❌❌❌❌❌ 默认设置下，pp对归档的文件会统一重命名，格式是yyyymmdd-hhMMss的前缀+8位随机字符串+文件名后缀，原文件名会存在数据库里。这点对很多人来说是一个致命的缺点，这意味着源文件名的丢失。虽然源文件名存在数据库，pp网页也支持原文件名的搜索，但这导致如果数据库崩了，或者迁移服务、重新部署的时候没备份数据库，那原文件名就永远的丢失了。所以在意这点的用户，务必、千万一定要在开始导入照片之前，在设置里关掉这个功能。
对视频的支持不理想。缺点等级：❌❌❌❌ 提这个点我需要提前交代下我的硬件和软件配置：</description>
    </item>
    
    <item>
      <title>PhotoPrism的安装以及和Immich的优缺点对比</title>
      <link>https://ruohai.wang/202310/photoprism-install-guide/</link>
      <pubDate>Thu, 12 Oct 2023 18:48:49 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-install-guide/</guid>
      <description>前言 10月初因为google one订阅计划到期没续，导致google one存储空间耗尽，接着连锁反应导致我的gmail因为没有空间而无法使用，所以终于下定决心：
要自建相册服务，不能在关键时候被google卡脖子！
（开玩笑的
immich的优缺点 上周弄了个机器部署immich，实际使用一段时间后，几个最突出的优点：
全终端覆盖，除了web服务之外，官方就提供了ios和android的app web和app的ui/ux都模仿的google photos，所以上手使用没难度 但是，但是啊，immich用起来确实各方面都还可以，但也有不少槽点，列举一二：
immich只能指定一个目录，也就是上传目录、缩略图目录、原图目录、转码视频目录，统统都一个目录下（aka一个硬盘）。导致会有原始媒体文件体积的20%左右的空间，是被缩略图、缓存之类消耗掉的，这导致硬盘空间更容易耗尽，意味着会需要更频繁的更换大容量硬盘和迁移/恢复。
上传了7万多张照片+视频以后，web端浏览非常、非常的卡，首页时间线的瀑布流展示出来需要等5~10秒钟左右。
上传照片的流程：新照片被重命名并放到upload目录 → immich读取新照片的exif → immich把新照片归档到指定根目录并还原文件名。这个流程如果顺利的话就很完美，没有问题。但我在短短几天的时候过程中，出现了好几次上传的照片被积压在upload目录，无论怎么在管理员的Job管理页面重启读取照片metadata的任务，积压在upload目录的文件都毫无变化，无法正确归档。最后的解决方案，第一次碰到这问题时，我简单排查以后感觉是immich-microserver出了问题，也不知道咋bugfix，索性备份了400G的内容以后重新部署。第二次在重新部署的immich服务上又碰到了这个问题，还好这次积压的不多只有17个文件，我下载到本地，根据日期核对图库以后，确认原图已经存在于图库，所以直接清空了upload目录。
物色其它方案 因为使用中种种的槽点，尤其是照片积压在upload目录这个严重的bug，所以我又开始物色其它自建相册方案：lychee、piwigo、photoprism、etc&amp;hellip;
古人有云：少年不知愁滋味，乱花渐欲迷人眼。看着这么多的方案，一时不知道该先试哪个。
看了一圈官方文档以后，挑中了photoprism。
优点如下：
自定义图库目录、缩略图目录、原图目录、转码视频目录，可以分别指定路径。这就可以实现原图放一个硬盘（方便维护），缩略图和缓存放ssd（加速图片浏览）。这简直就是对着immich的弱点痛打啊。 多语言支持，自带中文。虽然相册服务那点简单的英文对我来说没有使用障碍，但有中文可选总是加分的。 web端使用起来体验比immich响应速度快，可配置的内容更多更细致。 看完photoprism的文档以后，十分心动，立刻就弄个虚拟机，开始部署。
部署photoprism 我的机器用的系统时debian 12 bookworm stable，使用官网推荐的docker compose方案进行部署。
使用的photoprism版本是Build 231011-63f708417，docker-compose.yml文件中指定的version是3.5。注意不同的版本可能部署方式会有出入，最终以官网的文档为准。
官网文档：https://docs.photoprism.app/getting-started/docker-compose/
第一步：安装docker和docker-compose。
apt install docker apt install docker-compose 第二步：下载docker-compose.yml文件。
mkdir ~/.photoprism cd ~/.photoprism wget https://dl.photoprism.app/docker/docker-compose.yml 第三步：配置参数。
注意： 自建相册服务一般很少会反复折腾，都是部署好了以后就是24H运行除非硬盘满了。所以下面的10个参数一定要好好理解后进行配置，避免返工。
下载好docker-compose.yml以后，用文本编辑器打开，有以下几个参数需要修改：
账户密码类配置项：
1. PHOTOPRISM_ADMIN_USER：网页端管理员登录的用户名，默认是admin，建议修改 2. PHOTOPRISM_ADMIN_PASSWORD：网页端管理员登录的密码，建议修改 3. PHOTOPRISM_DATABASE_PASSWORD：数据库的密码，建议修改 4. MARIADB_PASSWORD：服务默认用的数据库是mariadb，这里配置photoprism数据库的密码。注意这个密码要和上一条中的PHOTOPRISM_DATABASE_PASSWORD的密码保持一致 5. MARIADB_ROOT_PASSWORD：数据库的root账户密码，建议修改 文件路径类配置项：
1. &amp;#34;~/Pictures:/photoprism/originals&amp;#34;：这项指定原图的归档目录，建议指向一个大容量hdd，一个硬盘专门用来放原图，方便后期维护。 2. &amp;#34;~/Import:/photoprism/import&amp;#34; ：这项指定需要导入的目录，默认是注释的（不启用），可选，有图库需要批量导入的可以这里指定路径，然后系统会把图片转移到originals目录进行归档。 3.</description>
    </item>
    
  </channel>
</rss>
