<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debian on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/debian/</link>
    <description>Recent content in Debian on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Dec 2024 16:48:48 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/debian/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>qBittorrent跟随系统开机启动但无法匹配到IPv6用户的问题解决</title>
      <link>https://ruohai.wang/202412/qbit-start-after-ipv6-address/</link>
      <pubDate>Sun, 29 Dec 2024 16:48:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/qbit-start-after-ipv6-address/</guid>
      <description>前言 本文根据chatgpt的答案进行整理发布。
问题描述 在无头debian系统上装了qbittorrent-nox并设置了开机启动，启动脚本如下：
[Unit] Description=qBittorrent-nox service for user %I Documentation=man:qbittorrent-nox(1) Wants=network-online.target After=local-fs.target network-online.target nss-lookup.target [Service] Type=simple PrivateTmp=false User=%i ExecStart=/usr/bin/qbittorrent-nox TimeoutStopSec=1800 [Install] WantedBy=multi-user.target 在防火墙中也放行了ipv6的端口（有ipv6的公网地址）。
[ 6] 12345 (v6) ALLOW IN Anywhere (v6) 但发现在系统重启之后，qbit中的下载任务无法匹配到ipv6的用户，如果此时手动重启qbit，下载任务就可以立即匹配到ipv6用户。
初步判断是系统重启之后，在获取到网络和获取到ipv6公网地址之间存在一个时间差，但qbit在这个时间差中间启动了，导致qbit无法获取到ipv6公网地址。
问题解决 修改qbit的systemd启动脚本，增加对host是否获取到ipv6公网地址的判断逻辑。
首先用ip addr命令获取系统网卡设备的名称
然后在qbit的启动脚本中添加一段ExecStartPre代码，其它部分不需要修改。
[Unit] Description=qBittorrent-nox service for user %I Documentation=man:qbittorrent-nox(1) Wants=network-online.target After=local-fs.target network-online.target nss-lookup.target ExecStartPre=/bin/bash -c &amp;#39;until ip -6 addr show dev enp6s18 | grep &amp;#34;inet6 .*global&amp;#34;; do sleep 1; done&amp;#39; [Service] Type=simple PrivateTmp=false User=%i ExecStart=/usr/bin/qbittorrent-nox TimeoutStopSec=1800 [Install] WantedBy=multi-user.</description>
    </item>
    
    <item>
      <title>Debian下Crontab中的Java任务不执行的问题排除</title>
      <link>https://ruohai.wang/202412/crontab-java-not-run/</link>
      <pubDate>Wed, 18 Dec 2024 18:45:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/crontab-java-not-run/</guid>
      <description>前言 开篇Tips：本文根据chatgpt的回答进行整理。
问题描述 使用的azulJDK官方下载的jre17，在debian下解压到自定义目录以后，在~/.bashrc下配置了java的环境变量
export JAVA_HOME=/opt/jre export PATH=$JAVA_HOME/bin:$PATH 执行java -version可以正常输出版本信息。
但是在crontab中配置了定时任务【30 6 * * * java -jar /path/to/my/jarfile.jr】的定时任务不执行。与此对比的是，在另一台debian机器上，直接用apt方式安装default-openjre以后（apt仓库里的jre版本也是17），同样的cron任务可以正确执行。
问题原因 crontab任务没有正确识别这些变量的原因可能是cron执行时使用的是不同的环境，它不会加载~/.bashrc或其他shell配置文件。
说人话就是crontab没有读取到我配置在~/.bashrc中的java环境变量
解决方法 方法一：在 crontab 中显式设置环境变量
在 crontab 中直接设置 JAVA_HOME 和 PATH 环境变量，确保 cron 执行时能够找到 java。
打开 crontab 编辑器：
crontab -e 然后在 crontab 文件中添加环境变量的配置，例如：
# 显式设置环境变量 JAVA_HOME=/opt/jre PATH=$JAVA_HOME/bin:$PATH # 定时任务 30 6 * * * java -jar /path/to/my/jarfile.jar 这样，每次 cron 执行任务时，都会加载这些环境变量。
方法二：在 crontab 中定义完整的 java 路径
如果不想设置环境变量，也可以直接在 crontab 中使用 java 的完整路径。</description>
    </item>
    
    <item>
      <title>在Debian上编译Memos的前端工程</title>
      <link>https://ruohai.wang/202411/memos-frontend-build-on-debian/</link>
      <pubDate>Fri, 29 Nov 2024 11:31:50 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/memos-frontend-build-on-debian/</guid>
      <description>前言 【usememos/memos】是这一年多来我高频使用的一个开源、自托管的网络服务，每天都会在自建的memos上更新好几条，已经被我当作一个自建的微博在使用。
因为我部署memos的机器是迅雷出品的赚钱宝一代（ws1408），硬件非常老（armv7l） + 适配的系统也很老（3.10内核的openwrt，不支持docker），所以我一直用的原生部署。
原生部署的好处是可以脱离docker，缺点就是前后端都需要自己编译。
memos的后端工程，github上已经有热心网友编译了适配各硬件平台的二进制包，开箱可用，就不需要自己动手了。指路：
memos的前端工程，我没有找到现成的，但是前端项目的优点是真正【一次编译处处可用】，随便弄个电脑编译出来以后在任何机器上都可以用。所以决定自己动手编译。
update：
刚发现【memospot/memos-builds】这个项目已经把前后端都一起编译打包了，不需要自己动手编译了 🤣
之前我已经写过一篇【在Windows上编译Memos的前端项目】。这次准备把memos从0.17.1更新到0.18.2，所以又要自己编译一份memos的前端工程，正好试着在debian上编译试试。
关于memos的吐槽 memos这个项目的用户对开发者的怨念都挺大的，🤣，因为ui/ux和功能经常变化，旧功能bug不fix的情况下不断引入新的功能。
我停在0.17.1这个版本大半年的时间，因为它暂时符合了我的需求：
有评论功能，而且评论的入口非常显眼 有首页热力图 每日回顾的入口可以很方便的进行日期跳转 但随着我高频使用memos以及数据量的上升，这个版本出现了越来越严重的性能瓶颈：
首页热力图的api设计有问题，是从后端获取全部memo记录以后在前台根据每条memo的时间戳进行按日统计，导致页面响应迟钝 每日回顾中跳转日期查看当天的memos的api设计也有问题，是从当前时间开始每次往前获取20条，直到爬到所选日期的memos为止。 搜索功能的api设计更是有问题，也是根据时间倒序每次获取20条然后在前端进行查询条件匹配 上面这三个设计有问题的api导致memos在数据量上去以后，首页加载、搜索功能、每日回顾显示指定日期memos这三个功能完全无法使用。
这个api设计的bug直到0.18.2版本才fix，但0.18.2版本又有了新的问题，比如评论入口及其隐蔽、首页热力图取消、时间线功能无法跳转到过往日期。
0.18.2不完美，之后的版本不仅没解决已有的问题，而且界面又开始变动 + 引入了不稳定的新功能，所以暂时还是选择停留在0.18.2。
编译 第一步：编译环境准备
编译memos前端项目需要node.js和npm，所以先安装这俩。我用的apt仓库中的nodejs和npm，虽然版本老了一点，但不影响这个项目的编译。
注意：安装大概需要1GB的存储空间。 sudo apt install nodejs npm 安装完以后通过-v命令确认安装成功
然后，因为众所周知的网络原因，需要设置一下npm的国内镜像，我这里用的是taobao的镜像
sudo npm config set registry https://registry.npmmirror.com apt仓库安装的nodejs/npm是不带corepack模块的，但编译memos需要用到corepack，所以安装一下
sudo npm install -g corepack 然后又双叒叕因为众所周知的网络原因，需要给corepack指定国内镜像地址
export COREPACK_NPM_REGISTRY=https://registry.npmmirror.com 好了，到这里就完成编译环境的准备工作了。
第二步：下载源码
这次编译我选择的是0.18.2版本，到项目的github仓库release页面找到对应版本的源码，下载到本地即可
# 下载 wget https://github.com/usememos/memos/archive/refs/tags/v0.18.2.tar.gz # 解压 tar -zxvf v0.18.2.tar.gz 下载以后查看Dockerfile文件，确认编译的步骤
# Build frontend dist. FROM node:20-alpine AS frontend WORKDIR /frontend-build COPY .</description>
    </item>
    
    <item>
      <title>在Debian和OpenWrt上使用sqlite3-cli进行简单数据维护</title>
      <link>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</link>
      <pubDate>Mon, 07 Oct 2024 19:38:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</guid>
      <description>前言 我使用的memos默认用的数据库是sqlite，在长期使用memos的过程中，偶尔需要直接操作数据库进行一些冗余数据清理、错误数据debug。
在windows上维护sqlite数据库时，我用的工具是免费 &amp;amp; 开源的【sqlite studio】，带gui操作界面，非常好用，值得推荐。
但很多时候我希望ssh连上linux服务器以后，直接在终端中维护sqlite数据库，这就需要用到sqlite-cli工具。写篇文章做个记录。
安装 &amp;amp; 使用 首先是安装sqlite3-cli工具。
在openwrt上，只需要在软件仓库中根据关键字搜索然后点击安装即可。
在debian上直接apt一把梭。
sudo apt install sqlite3 然后是一些简单的数据库维护。
使用sqlite3-cli工具打开sqlite的db文件
sqlite3 /path/to/sqlite3/dbfile.db 然后就会进入sqlite&amp;gt;的命令符界面，表明已经可以对sqlite数据库文件进行操作了。
最后列举几个常用的sqlite3-cli的命令
# 显示数据库 .databases # 显示数据库表 .tables # 退出 .quit 参考文章 SQLite 命令 pawelsalawa/sqlitestudio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上设置静态IP（固定IP）</title>
      <link>https://ruohai.wang/202410/debian-config-static-ip/</link>
      <pubDate>Sat, 05 Oct 2024 17:44:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/debian-config-static-ip/</guid>
      <description>前言 我目前接触到的debian用到的网络管理工具有两个，一个是传统的networkmanager，另一个是netplan。
两种网络管理工具下配置静态ip的方法不太一样，这里汇总做个记录。
区分networkmanager和netplan 首先要搞清楚自己的debian系统用的网络管理工具是哪个，chatgpt的回答如下
但实际判断networkmanager的方法不太对，有效的方法只需要看/etc/network目录下是不是有interfaces文件即可。
判断netplan，只需要看是否有/etc/netplan这个目录，并查看这个目录下是否有配置文件。
获取网卡设备名称 使用命令ip addr查看网卡的名称，后面配置的时候需要用到
如果所示，网卡名称即为enp2s0
networkmanager 编辑/etc/network/interfaces文件，根据自己需求录入静态ip参数即可
allow-hotplug enp2s0 # 支持热插拔 auto enp2s0 # 开机自动启用eth0 iface enp2s0 inet static # 使用静态ip address 192.168.1.4 # ip地址 netmask 255.255.255.0 # 子网掩码 gateway 192.168.1.1 # 网关地址 dns-nameservers 192.168.1.1 # dns服务器 编辑后保存退出，然后重启网络服务
sudo systemctl restart networking.service netplan netplan的情况稍微复杂一些，因为netplan是一个配置工具，需要搭配底层来实现网络管理，那底层管理工具可以是networkmanager，也可以是systemd-networkd。
我碰到的情况都是netplan + networkd的组合，查看/etc/netplan目录下的yaml配置文件就可以清楚自己系统的工具组合。注意每个系统的netplan的yaml配置文件名称不一定相同，根据自己情况调整。
在配置文件中可以看到，管理网络的工具是networkd。
那接下去就有几种修改方法：
netplan指定网络工具 + netplan生成配置 netplan指定网络工具 + networkd配置 netplan指定网络工具 + networkmanager配置 出于配置的难易程度 &amp;amp; 可阅读性考虑，我推荐使用第二种方案。
首先修改/etc/netplan目录下的yaml配置文件，只需要指定renderer是networkd即可，下面关于dhcp的配置都注释。
然后到/etc/systemd/network目录，可以看到有个network配置文件，原始配置是将网络配置功能托管给了netplan。
我们需要根据自己需求修改配置</description>
    </item>
    
    <item>
      <title>在Debian上部署硬件性能监控面板Netdata</title>
      <link>https://ruohai.wang/202410/netdata-install-guide/</link>
      <pubDate>Wed, 02 Oct 2024 20:57:34 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/netdata-install-guide/</guid>
      <description>前言 平时使用linux的时候，需要查看实时硬件性能占用时，我都是在终端里直接敲htop，最近想着部署一个支持web端的监控面板。
支持的web面板的硬件性能监控方案有很多，glances、zabbix、netdata、cockpit、1panel等等，从轻量级的监控面板到比较中的全功能panel应有尽有。
最后就部署的简单程度 &amp;amp; 性能资源占用两方面考虑，选择了netdata。
部署 在debian上安装netdata非常简单，直接apt即可
sudo apt install netdata 安装好以后，编辑配置文件/etc/netdata/netdata.conf
默认的配置文件中需要修改绑定IP和默认端口即可。
# 默认只监听127.0.0.1本机的请求 bind socket to IP = 0.0.0.0 # 根据自己需求调整端口号 default port = 19999 以上调整完以后，重启netdata服务
sudo systemctl restart netdata.service 在浏览器中访问http://host_ip:19999就可以访问了。如果服务器上安装了防火墙，记得放行端口。
汉化 netdata默认语言英文，如果英文阅读有障碍想，或者想要汉化，可以参考这个项目【DX-Kevin/Netdata-chinese-patch】,替换4个js/html文件即可，非常方便。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上部署NFS网络文件系统</title>
      <link>https://ruohai.wang/202410/nfs-install-guide/</link>
      <pubDate>Wed, 02 Oct 2024 13:11:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/nfs-install-guide/</guid>
      <description>前言 玩nas的对各种网络共享文件协议肯定不陌生，比如smb/samba、nfs、afp、webdav等等。
之前我一直用的smb/samba，也用过几次webdav，这次尝试下nfs，水篇文章做个简单记录。
部署 nfs的部署分为服务端和客户端，两端的部署方式些微不同。
服务端（server）
首先是安装必须的软件包，nfs-common作为依赖包必定会安装，所以在命令中不需要体现
sudo apt install nfs-kernel-server 然后编辑nfs的配置文件/etc/exports，设定共享目录。
sudo nano /etc/exports 添加共享目录的配置信息
/path/to/share/folder 192.168.1.111(rw,async) tips：
/path/to/share/folder：共享目录的路径 192.168.1.111：指定共享客户端的ip，也可以用子网掩码来指定网段，或许还有其它指定方式可以自行研究 (rw,async)：指定共享目录的权限，常用的rw（可读可写）、同步异步（sync/async），其它参数可以等需要调优了再翻阅文档 配置完成以后，可以直接重启nfs服务生效
sudo systemctl restart nfs-server.service 也可以不重启nfs服务依然让配置生效
sudo exportfs -arv tips:
-a：全部挂载或全部卸载 -r：重新挂载 -v：显示详细信息 如果电脑上启用了防火墙，需要放行两个端口
2049,111/tcp 2049,111/udp 好了，到这里nfs的服务端配置就完成惹。🎉
客户端（client）
首先是安装必须的软件包
sudo apt install nfs-common 然后直接mount看下能不能挂载成功，假定挂载到本地的/mnt/nfs，命令中的-t nfs这部分指定协议的内容可以省略。
mount -t nfs 192.168.1.111:/path/to/share/folder /mnt/nfs 不出意外的话就挂载成功了。如果需要把nfs文件夹设置成开机启动挂载，可以通过编辑/etc/fstab，也可以用systemd-mount来实现，这里以后者为例。在/etc/systemd/system目录下新建一个mnt-nfs.mount文件（注意这个文件名mnt-nfs需要和挂载点/mnt/nfs路径对应），然后录入以下内容
[Unit] Description=nfs auto mount After=network.target [Mount] What=192.168.1.111:/path/to/share/folder Where=/mnt/nfs Type=nfs [Install] WantedBy=multi-user.target 保存文件，然后执行命令添加为系统服务
# 重载 sudo systemctl daemon-reload # 添加服务 &amp;amp; 开机自启 sudo systemctl enable --now mnt-nfs.</description>
    </item>
    
    <item>
      <title>在Debian上用Docker方式部署aria2/aria2Ng</title>
      <link>https://ruohai.wang/202410/aria2-install-on-debian/</link>
      <pubDate>Tue, 01 Oct 2024 19:10:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/aria2-install-on-debian/</guid>
      <description>前言 开篇直言，个人建议使用docker方式部署aria2/aria2ng，不要去折腾原生安装，因为原生安装和配置aria2的话实在是太麻烦了。
开箱即用的docker版aria2才是正解。
部署 选择用docker方式部署aria2，那接下去只要挑选一个合适的docker镜像版本就行了。
根据dockerhub的下载数量和star数量，这里推荐【superng6/aria2】，weiui用的是aria2ng。
这版镜像的overview页面有详细的安装步骤，这次摘录部分。我是用docker-compose方式部署，docker-compose.yml文件如下
version: &amp;#34;3.1&amp;#34; services: aria2: image: superng6/aria2:latest container_name: aria2 network_mode: host environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - SECRET=&amp;lt;your-secret&amp;gt; - CACHE=512M - PORT=6800 - WEBUI=true - WEBUI_PORT=8080 - BTPORT=32516 - UT=true - QUIET=true - SMD=true volumes: - ./config:/config - ./downloads:/downloads restart: unless-stopped 参数释疑：
PORT=6800：aria2的rpc端口 WEBUI_PORT=8080：aria2ng web ui的访问端口 BTPORT=32516：DHT和BT监听端口，如果用防火墙记得放行这个端口 更多配置项参考dockerhub页面即可。
最后就是一键安装惹
sudo docker-compose up -d 部署成功以后，打开浏览器访问http://host_ip:8080即可。
参考文章 superng6/aria2: overview 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上部署和使用v2rayA &amp; 一些注意事项</title>
      <link>https://ruohai.wang/202409/v2raya-install-on-debian/</link>
      <pubDate>Sun, 29 Sep 2024 11:43:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/v2raya-install-on-debian/</guid>
      <description>前言 v2raya是一个使用web gui来配置v2ray的客户端，方便好用，特别适合没有图形界面的linux server系统。
之前已经写过一篇在debian上部署和配置的文章，但时间久远也懒得修修补补，直接重新写一篇。
安装 在debian系linux上安装，个人建议使用apt软件源安装。
# 添加公钥 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc # 添加软件源 echo &amp;#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&amp;#34; | sudo tee /etc/apt/sources.list.d/v2raya.list # 更新 sudo apt update # 安装 sudo apt install v2raya v2ray 到这里就完成了v2raya的安装，🎉
配置 v2raya服务配置
如果不需要做自定义调整，用默认配置启动v2raya，执行以下命令
## 启动 &amp;amp; 设置开机自启 sudo systemctl enable --now v2raya.service 启动成功后，默认端口是2017，打开浏览器，访问http://host_ip:2017。首次登录需要创建用户。
添加节点 &amp;amp; 导入订阅这些不再赘述，想必对于这些基本操作你已经具有丰富的经验。
v2raya服务的配置文件路径在/etc/default/v2raya，可以调整web ui的默认端口、log目录、bin目录等各项内容。
注意事项 v2ray-core VS xray-core
推荐使用v2ray而不是xray，apt软件仓库的xray至今（2024年9月）还不支持负载均衡，也就是基于最小ping值择优选取线路的功能只有v2ray-core支持。
本机代理 VS 局域网路由
【透明代理/系统代理】这个配置是用来对【本机】的网络进行代理，而【规则端口的分流模式】这个选项是用来当作局域网的路由。
搞清楚以上这点，就不会和我犯一样的错，开启了【系统代理】的同时还在同一台机器上装qbittorrent挂下载，导致所有bt流量都走代理让v2raya的资源占用飙升。</description>
    </item>
    
    <item>
      <title>联想BIOS在UEFI模式下出现no bootable device found的问题解决</title>
      <link>https://ruohai.wang/202408/debian-uefi-no-bootable-device/</link>
      <pubDate>Tue, 13 Aug 2024 11:10:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202408/debian-uefi-no-bootable-device/</guid>
      <description>前言 最近一直在折腾一台别人淘汰的旧电脑，型号是联想c260，板载cpu是intel j1800。
这机器到手以后我就直接开始重装debian了，但是碰到了2个问题：
在uefi模式下，装好debian拔掉引导u盘以后重启，会提示找不到启动设备no bootable device found 在legacy模式下，装好debian以后能进入系统，但是无法软关机/软重启，在输入关机/重启命令以后一直提示watchdog did not stop，只能硬关机（长按电源键或者直接拔电源） 第一个问题反复尝试后无解，而且联想的bios也没有开放高级功能来修改配置。
第二个问题反复尝试也无解，但凑合还能用，只要每次想重启/关机的时候手动长按电源开关就行了。
但最近我往这台机器上装pve，在uefi模式下竟然可以正常关机，🤔，我觉得可以找找对应的解决方案了。
功夫不负有心人，很快就找到了类似的问题而且成功解决了，在这里做个简单记录。
原因 简单来讲就是联想这台古董机器的uefi固件版本太低了（或者做了阉割没有实现完整的efi功能），不兼容debian 12的bootloader。
debian 12安装好以后的boot分区目录结构大致如下
├── boot │ ├── config-5.10.0-18-amd64 │ ├── efi │ │ └── EFI │ │ └── debian │ │ ├── BOOTX64.CSV │ │ ├── fbx64.efi │ │ ├── grub.cfg │ │ ├── grubx64.efi │ │ ├── mmx64.efi │ │ └── shimx64.efi 但联想这个机器的uefi固件能识别的boot目录的结构应该如下
├── boot │ ├── config-5.15.53-1-pve │ ├── efi │ │ └── EFI │ │ ├── BOOT │ │ │ ├── BOOTX64.</description>
    </item>
    
    <item>
      <title>在Debian上用Speedtest CLI进行网络测速</title>
      <link>https://ruohai.wang/202307/speedtest-cli-setup/</link>
      <pubDate>Fri, 14 Jul 2023 14:57:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/speedtest-cli-setup/</guid>
      <description>前言 想要在debian下测一下公网网速，机器是赚钱宝二代（ws1508），系统是armbian/bookworm，硬件是32位armv7l。
tips：
debian apt仓库里有一个speedtest-cli的包，但这个包不是speedtest官方在维护，没有可用的中国境内的测速服务器 请用speedtest官方的包，官网指路：(https://www.speedtest.net/apps/cli) speedtest官方除了一键安装脚本，也提供了二进制包可以直接使用，根据自己喜好选择吧。
安装 两种安装方式：
一键安装脚本
ubunt/debian系linux的一键脚本
# 如果系统已经有curl可以跳过 sudo apt install curl # 下载脚本 curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash # 安装 sudo apt install speedtest 二进制包安装
创建目录、下载、解压。根据自己的硬件和系统下载对应版本。
# 创建目录 mkdir /opt/speedtest ; cd $_ # 下载二进制包，注意选择正确的硬件版本 wget https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-armhf.tgz # 解压 tar -zxvf ookla-speedtest-1.2.0-linux-armhf.tgz 解压以后就可以直接运行了
./speedtest 或者添加环境变量
nano ~/.bashrc 在末尾添加一行
export PATH=$PATH:/opt/speedtest-cli 然后重载生效，就可以直接使用speectest命令
source ~/.bashrc 使用 第一步：查看附近可用的测速服务器
使用命令查看附近可用的测速服务器
speedtest -L 显示附近的可用服务器列表
Closest servers: ID Name Location Country 36663 China Telecom JiangSu 5G Zhenjiang China 26352 China Telecom JiangSu 5G Nanjing China 5317 江苏电信5G Yangzhou China 17145 China Telecom AnHui 5G Hefei China 也可以限定自己所在的城市，比如杭州</description>
    </item>
    
  </channel>
</rss>
