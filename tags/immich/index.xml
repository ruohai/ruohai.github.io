<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Immich on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/tags/immich/</link>
    <description>Recent content in Immich on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 Oct 2023 18:07:57 +0800</lastBuildDate><atom:link href="https://ruohai.wang/tags/immich/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Immich用非root账号运行的设置方法</title>
      <link>https://ruohai.wang/202310/immich-run-as-a-non-root-user/</link>
      <pubDate>Fri, 20 Oct 2023 18:07:57 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-run-as-a-non-root-user/</guid>
      <description>前言 immich服务用docker部署，有一个非常刺挠不舒服的问题，就是文件权限。
docker需要root账户跑（虽然可以通过一些设置实现non-root账户跑），用docker部署的immich默认也就是root权限，导致通过immich上传和归档的照片、视频文件都是root权限。
这说不上什么大的问题，但我觉得很不舒服，就看了官方文档，要怎么设置才能用non-root账户跑。但官网含糊其辞，最后在虚拟机里反复部署、删除、调试，终于搞定了我的三个需求：
上传和归档的照片、视频，不能是root权限
immich图像算法处理以后生成的内容，不能是root权限
整体服务和功能要正常可用
这里不得不夸一下photoprism，在docker-compose配置文件里就定义好了用non-root账号运行的参数，取消注释就行了。
步骤 先看下官网给出的用非root账号运行immich的办法
How can I run Immich as a non-root user? 1. Set the PUID/PGID environment variables (in .env). 2. Set the corresponding user argument in docker-compose for each service. 3. Add an additional volume to immich-microservices that mounts internally to /usr/src/app/.reverse-geocoding-dump. The non-root user/group needs read/write access to the volume mounts, including UPLOAD_LOCATION. 简单英翻中一下：
在.env文件中设置PUID/PGID 在docker-compose配置文件中给每一个服务（service）配置对应的user参数 给immich-microservices服务添加一个额外的卷（volume）用来挂载容器内部的/usr/src/app/.reverse-geocoding-dump目录 注意各个文件夹的读写权限分配 但实际看完这个官网的步骤也是一头雾水的，说的很模糊，也没有给出示例。
最后在immich项目的github主页的issues列表里，找到了别人贴出的non-root场景的配置信息，反复调试以后，确定了一下方案。
第一步：在.env中配置PUID/PGID</description>
    </item>
    
    <item>
      <title>Immich的优缺点</title>
      <link>https://ruohai.wang/202310/immich-pros-and-cons/</link>
      <pubDate>Sat, 14 Oct 2023 04:45:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-pros-and-cons/</guid>
      <description>前言 优缺点内容会随着日常使用不断更新。
对比产品是photoprism。
其它类似产品lychee、piwigo、mt-photos、photoview、librephotos等等，懒得试了。
简单总结：优点非常突出，但缺点也很致命。快速迭代中，bug较多，建议当作备用方案。
优点 很像google photos。优点等级：✔️✔️✔️✔️✔️ 是的，像google photos是一个优点，而且是一个很大的优点。这个像不仅仅是简单的界面布局像，而且连操作交互都像，简洁、高效、赏心悦目。
可以理解为immich就是一个开源版本的google photos，或者说开发者就是照着google photos的ui/ux的逻辑去开发的。
如果你和我一样原本是一个google photos的用户，那对于使用immich就不会有任何的上手难度，完全可以说是无感迁移。
导入照片很快。优点等级：✔️✔️✔️✔️✔️ 这点我原本不觉得算优点，但对比了photoprism的导入速度以后，我必须要把这点列出来而且给它评一个五星。
immich的导入照片、图像算法处理、照片归档、视频转码都是异步处理的，导入速度有多快，只取决于你的硬盘读写速度和网络带宽速度的上限有多高，那感觉简直就是丝般的顺滑，这才是2023年的速度啊。至于图像算法处理、视频转码之类的耗时漫长的任务，统统扔后台异步处理。
官方有app而且免费。优点等级：✔️✔️✔️✔️✔️ 这点我原本也不觉得算优点，但对比了photoprism以后我觉得这就是五星级别的优点。同样的，app的ui/ux也是和google photos的app几乎一模一样。上手使用无难度。
支持多用户。优点等级：✔️✔️✔️✔️ 这点我原本觉得只能评个两星，但对标的photoprism的个人免费版本直接阉割了多用户功能，要付费才支持多用户，那immich这边必须给评个四星。
归档目录结构可自定义。优点等级：✔️✔️ 又是一个对比photoprism的优点。归档目录结构默认就有好几个模板可选，甚至还支持自定义，可以根据自己的喜好调整目录结构。
缺点 导入时有bug。缺点等级：❌❌❌❌❌ 我使用immich的一个星期里，这个bug碰到了两次。具体表现是，上传以后的照片，卡在upload目录无法归档。这个bug我觉得非常的致命。
这里说一下immich处理照片整个流程：
上传的照片全部用uuid重命名，保存到upload目录。这个目录可以理解为临时目录，所有上传的照片都临时放这里等待处理。 然后会跑extract metadata任务开始读取upload目录下照片的元数据。 读取完以后，根据照片拍摄时间把文件归档并还原文件名 上传的照片卡在upload目录的意思，就是extract metadata任务出了问题。我碰到的两次bug，一次是extract metadata任务无法运行，一直是pause状态，点击resume/start以后立刻就会变成pause，upload目录留了1800张照片无法处理。第二次bug是extract metadata任务能正常跑，但upload目录里它就是留了11张照片不处理。
如果你有很强的debug能力，那可以自己想办法处理。如果有足够的耐心，那可以上immich的github项目主页去提issue，然后等维护人员解答。
如果以上两个方案都无法接受，只想立刻解决这个bug，比如重新部署immich然后把卡在upload目录的照片拿出来重新导入一遍，那最致命的问题来了：留在upload目录的照片，文件名是被重命名过的，不仅丢失了原文件名，而且uuid的格式毫无辨识度。重新导入以后，甚至连归档时间都会被重置，也就是识别成此时此刻，然后归档到当天。
这种bug碰到一次就想死了，碰到两次，拜拜了immich。
exif读取错误。缺点等级：❌❌❌❌❌ 我用了大概一个星期，试过网页上传照片、cli批量导入、手机app同步，都出现过读出来的拍摄时间错误的问题。比如今天拍的照片，同步到immich以后它归档到明天去了，还显示拍摄时间是明天，一次两次可以接受，老是出现的话受不了。
不支持多硬盘。缺点等级：❌❌❌❌ immich在当前这个版本（1.81.1），只支持指定一个目录，也即是只不支持多硬盘。这对比起photoprism就少了很多灵活性，比如不能原图指向hdd的同时让缓存指向ssd，而且只支持一个硬盘的坏处是所有文件都存储在一个硬盘上，让硬盘空间消耗加快，因为缓存+缩略图+转码视频也是非常消耗存储的，大概会占用原图体积的20%左右，举例就是1500G的照片和视频，缓存类文件就会占用300G左右。
不支持多语言。缺点等级：❌ web端只支持英文，英文很简单，我用起来没什么障碍。但对比photoprism支持多语言来说，这就是个缺点了。
照片多了以后用起来很卡。缺点等级：❌❌❌❌❌ 我导入了80000个文件以后，此时immich的网页端用起来会很卡，首页加载照片时间轴需要等待5~10秒钟，加载完了以后上下滚动也很卡。
这可能和我用来跑immich的主机的性能比较差有关，毕竟是古董H61平台，奔腾g630双核双线程，hdd。而且immich因为不支持多路径多硬盘，无法把缓存类目录指向ssd来提高优化浏览体验。</description>
    </item>
    
    <item>
      <title>PhotoPrism的安装以及和Immich的优缺点对比</title>
      <link>https://ruohai.wang/202310/photoprism-install-guide/</link>
      <pubDate>Thu, 12 Oct 2023 18:48:49 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-install-guide/</guid>
      <description>前言 10月初因为google one订阅计划到期没续，导致google one存储空间耗尽，接着连锁反应导致我的gmail因为没有空间而无法使用，所以终于下定决心：
要自建相册服务，不能在关键时候被google卡脖子！
（开玩笑的
immich的优缺点 上周弄了个机器部署immich，实际使用一段时间后，几个最突出的优点：
全终端覆盖，除了web服务之外，官方就提供了ios和android的app web和app的ui/ux都模仿的google photos，所以上手使用没难度 但是，但是啊，immich用起来确实各方面都还可以，但也有不少槽点，列举一二：
immich只能指定一个目录，也就是上传目录、缩略图目录、原图目录、转码视频目录，统统都一个目录下（aka一个硬盘）。导致会有原始媒体文件体积的20%左右的空间，是被缩略图、缓存之类消耗掉的，这导致硬盘空间更容易耗尽，意味着会需要更频繁的更换大容量硬盘和迁移/恢复。
上传了7万多张照片+视频以后，web端浏览非常、非常的卡，首页时间线的瀑布流展示出来需要等5~10秒钟左右。
上传照片的流程：新照片被重命名并放到upload目录 → immich读取新照片的exif → immich把新照片归档到指定根目录并还原文件名。这个流程如果顺利的话就很完美，没有问题。但我在短短几天的时候过程中，出现了好几次上传的照片被积压在upload目录，无论怎么在管理员的Job管理页面重启读取照片metadata的任务，积压在upload目录的文件都毫无变化，无法正确归档。最后的解决方案，第一次碰到这问题时，我简单排查以后感觉是immich-microserver出了问题，也不知道咋bugfix，索性备份了400G的内容以后重新部署。第二次在重新部署的immich服务上又碰到了这个问题，还好这次积压的不多只有17个文件，我下载到本地，根据日期核对图库以后，确认原图已经存在于图库，所以直接清空了upload目录。
物色其它方案 因为使用中种种的槽点，尤其是照片积压在upload目录这个严重的bug，所以我又开始物色其它自建相册方案：lychee、piwigo、photoprism、etc&amp;hellip;
古人有云：少年不知愁滋味，乱花渐欲迷人眼。看着这么多的方案，一时不知道该先试哪个。
看了一圈官方文档以后，挑中了photoprism。
优点如下：
自定义图库目录、缩略图目录、原图目录、转码视频目录，可以分别指定路径。这就可以实现原图放一个硬盘（方便维护），缩略图和缓存放ssd（加速图片浏览）。这简直就是对着immich的弱点痛打啊。 多语言支持，自带中文。虽然相册服务那点简单的英文对我来说没有使用障碍，但有中文可选总是加分的。 web端使用起来体验比immich响应速度快，可配置的内容更多更细致。 看完photoprism的文档以后，十分心动，立刻就弄个虚拟机，开始部署。
部署photoprism 我的机器用的系统时debian 12 bookworm stable，使用官网推荐的docker compose方案进行部署。
使用的photoprism版本是Build 231011-63f708417，docker-compose.yml文件中指定的version是3.5。注意不同的版本可能部署方式会有出入，最终以官网的文档为准。
官网文档：https://docs.photoprism.app/getting-started/docker-compose/
第一步：安装docker和docker-compose。
apt install docker apt install docker-compose 第二步：下载docker-compose.yml文件。
mkdir ~/.photoprism cd ~/.photoprism wget https://dl.photoprism.app/docker/docker-compose.yml 第三步：配置参数。
注意： 自建相册服务一般很少会反复折腾，都是部署好了以后就是24H运行除非硬盘满了。所以下面的10个参数一定要好好理解后进行配置，避免返工。
下载好docker-compose.yml以后，用文本编辑器打开，有以下几个参数需要修改：
账户密码类配置项：
1. PHOTOPRISM_ADMIN_USER：网页端管理员登录的用户名，默认是admin，建议修改 2. PHOTOPRISM_ADMIN_PASSWORD：网页端管理员登录的密码，建议修改 3. PHOTOPRISM_DATABASE_PASSWORD：数据库的密码，建议修改 4. MARIADB_PASSWORD：服务默认用的数据库是mariadb，这里配置photoprism数据库的密码。注意这个密码要和上一条中的PHOTOPRISM_DATABASE_PASSWORD的密码保持一致 5. MARIADB_ROOT_PASSWORD：数据库的root账户密码，建议修改 文件路径类配置项：
1. &amp;#34;~/Pictures:/photoprism/originals&amp;#34;：这项指定原图的归档目录，建议指向一个大容量hdd，一个硬盘专门用来放原图，方便后期维护。 2. &amp;#34;~/Import:/photoprism/import&amp;#34; ：这项指定需要导入的目录，默认是注释的（不启用），可选，有图库需要批量导入的可以这里指定路径，然后系统会把图片转移到originals目录进行归档。 3.</description>
    </item>
    
    <item>
      <title>Immich相册服务照片视频文件的批量上传</title>
      <link>https://ruohai.wang/202310/immich-bulk-upload/</link>
      <pubDate>Tue, 10 Oct 2023 19:06:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-bulk-upload/</guid>
      <description>前言 immich的网页端只支持选中多个文件上传，不支持选择文件夹。
官网有文档，批量导入需要用到npm。
啧，行吧，记录下怎么弄。
官网文档很细致，英文阅读无障碍的话直接看官网就行，我就是英翻中。
安装 我用来跑immich服务的机器装的是debian系统。
先装npm，大概600MB。
apt install npm 再装immich CLI模块
npm i -g immich 到此，安装完成。
批量导入 第一步：生成api key。
很抱歉我之前用的免费图床跑路了，所以不再传图，用文字记录下路径：
点击网页端的账户头像 —— account setting —— API Keys —— new api keys，name一栏随便填，然后点击create，然后把字符串复制保存。
第二步：文件夹批量上传。
immich upload --key API_KEY_STRING --server http://immich_host_ip:2283/api --recursive directory/ 有三个地方需要根据自己情况修改：
API_KEY_STRING，替换成第一步中生成的api key immich_host_ip，immich服务的ip地址，如果是同一台机器，写localhost就行。如果改过默认端口，那2283也要一并修改 directory/，需要上传的文件夹 执行以上命令后，会有提示：
Checking connectivity with Immich instance... Server status: OK Checking credentials... Login status: OK Successful authentication for user nibabawo@123.com Indexing local assets... Indexing complete, found 74868 local assets Comparing local assets with those on the Immich instance.</description>
    </item>
    
    <item>
      <title>Immich配置SSL证书开启HTTPS访问</title>
      <link>https://ruohai.wang/202310/immich-update-to-https/</link>
      <pubDate>Fri, 06 Oct 2023 19:34:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-update-to-https/</guid>
      <description>注意事项 配置ssl证书开启https公网访问，请务必注意数据安全。
immich服务目前没有密码错误多次登录时触发登录保护的功能，所以存在暴力破解的可能性。
建议用tailscale、ngrok、frp、cloudflare tunnel之类内网穿透工具。
第一步：申请证书 申请证书这里不做赘述，阿里云送的免费证书，或者let&amp;rsquo;s encrypt的证书都可以。
我用的反代工具是nginx，所以证书是是nginx格式。
一共两个文件:
domain.key domain.pem 第二步：安装nginx 我用的系统是debian，直接apt安装
apt install nginx nginx安装好以后，默认配置文件路径/etc/nginx。
如果没有这个目录，执行以下命令，会显示nginx的配置文件路径
nginx -t 第三步：上传证书 在/etc/nginx目录下新建文件夹ssl，然后用工具（比如winscp/sftp等）把两个ssl证书文件放到ssl目录下。
最终ssl证书的路径如下：
/etc/nginx/ssl/domain.key /etc/nginx/ssl/domain.pem 第四步：配置反代 进入目录/etc/nginx/sites-available，把默认的default配置文件备份，新建一个default文件。
# 进目录 cd /etc/nginx/sites-available # 备份 mv default default.bak # 新建 touch default 如果不懂为啥，就根据这个操作，如果懂，就根据自己的习惯操作。
用编辑器编辑default文件，录入一下内容，保存后退出。假定新端口是12345。
server { # 监听端口 12345 listen 12345 ssl; listen [::]:12345 ssl; # 服务名 server_name domain; # 因为需要上传照片视频，这里设定最大上传文件50GB client_max_body_size 50000M; # ssl证书路径 ssl_certificate ssl/domain.pem; ssl_certificate_key ssl/domain.key; # ssl session缓存和时间 ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # ssl加密的相关配置 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!</description>
    </item>
    
    <item>
      <title>开源自托管相册服务Immich的安装</title>
      <link>https://ruohai.wang/202310/immich-installation/</link>
      <pubDate>Thu, 05 Oct 2023 16:35:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-installation/</guid>
      <description>前言 停用了google photos，虽然很早很早就开始用这个服务，但最近碰到了几件事，让我选择停用它。
权益缩水。从最初原图免费无限空间，缩水到高品质压缩图片免费无限空间，再缩水到免费15GB空间。不要相信云存储空间厂商的任何免费和永久的承诺，哪怕是google这样的大厂背书。 祸及gmail。存储空间缩水到15GB以后，这个15GB由gmail、photos、driver三个服务共享使用，意味着，如果因为photos上传图片过多，或者driver上传文件过多，耗尽了这15GB空间，会导致gmail无法使用，因为没有多余空间来收发邮件了。这种情况只有两个方案可选，清理photos和driver腾出空间给gmail使用，或者订阅google one扩充空间。如果选择订阅google one，一定要留意，如果哪个月订阅费用扣款失败，gmail会因为没有剩余空间而无法使用。 以上两点原因，尤其是第二点，导致我必须、立刻开始寻找替代方案。
其实几个月前开始折腾nas的时候我就有考虑自建相册服务，几个方案：群晖自带的photo station、moments、synology photo，或者第三方的lychee、piwigo、photo prism、librephoto、photoview。但了解和体验下来，有几个核心问题一直无解：
不支持h265/hevc的图片和视频。因为h265复杂的版权关系，h265的图片和视频（heic、heif)基本不支持查看和生成缩略图。群晖有解决方案，但需要登录群晖账号才能在套件商店下载解码包。黑群可以自己安装ffmpeg来实现对h265媒体的支持，但网上看到很多人反馈时灵时不灵，很让人头疼。 不支持自定义图库位置。我有一个庞大的、积累多年的照片文件夹，有自己的目录结构，如果想要导入到这些相册服务中去，只有一个办法：通过相册的导入入口。而且这些相册一般都会把媒体文件按照日期进行归档，破坏掉原有的目录结构。 目前我从google photos切换到了immich，不仅解决了我的所有痛点，而且它的web和app界面都几乎1:1的模仿google photos，上手使用毫无难度。
安装 我的安装环境是debian 12 stable（bookworm）。因为跑docker服务需要root权限（可以通过一些设置用非root跑），关于权限、用户的问题这里不再赘述，需要自行解决。
immich的安装步骤在【官网】有文档，英语阅读无障碍的话可以直接看官网。
注意事项： 安装需要占用5GB存储空间 immich自带的机器学习（图像主体识别、人脸识别）、视频转码非常占用资源，内存至少4GB cpu性能无要求，但更强的cpu，上传、转码、机器学习就会更快更效率，使用体验会更好 immich的视频转码支持qsv、nvenc、vaapi硬件加速 因为docker-hub被封，部署的时候拉镜像根本没速度，请改用国内镜像站，或者用VPN 写这篇文章的当下（2023/10/05），immich版本1.81，实测支持自定义图库位置，edit user界面有个external path设置项，可以填入自定义图库的位置。填写以后，immich从图库读取图片的metadata、生成缩略图、图像识别，不会变动原图库的目录结构和原图。 批量导入图片的方法请查看官网，入口：Bulk Upload (Using the CLI) 第一步：安装docker和docker compose。 apt install docker.io apt install docker-compose 第二步：在本地创建immich目录 这个目录只是用来下载immich的docker-compse配置文件和env配置文件，随便建在那边都行。
mkdir immich cd immich 第三步：下载两个配置文件 wget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml wget -O .env https://github.com/immich-app/immich/releases/latest/download/example.env 第四步：编辑参数。 用文本编辑器打开.env文件，1.81.1版本的默认内容如下
# You can find documentation for all the supported env variables at https://immich.</description>
    </item>
    
  </channel>
</rss>
