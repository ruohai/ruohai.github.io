<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202502s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202502/</link>
    <description>Recent content in 202502s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 01 Mar 2025 22:17:00 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202502/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>飞牛系统fnos存储空间扩容/mdadm &#43; lvm &#43; btrfs方案的磁盘扩容</title>
      <link>https://ruohai.wang/202502/fnos-expand-vol-size/</link>
      <pubDate>Sat, 01 Mar 2025 22:17:00 +0800</pubDate>
      
      <guid>https://ruohai.wang/202502/fnos-expand-vol-size/</guid>
      <description>前言 飞牛系统的存储空间用的mdadm + lvm + btrfs的方案（群晖也是这个方案），如果想要扩容会比较麻烦，因为嵌套太多层了，不能像ext4文件系统那样用fdisk先d再n然后w最后resize2fs就行了，而且飞牛系统fnos截至目前还没有在网页控制台上添加扩容的功能。
自己盲操一遍发现比预想的复杂，不过最后还是在网上找到了别人的教程，所以写篇博客记录一下。
注意：操作有风险，记得给系统做快照、备份
操作 磁盘扩容的第一步肯定是换更大的硬盘或者在虚拟机host（pve或者esxi）中调整虚拟磁盘的大小。
这里以pve为例
在弹窗中调整大小
此时通过lsblk命令可以看到对应的磁盘/dev/sda已经变成从原来的10GB变成了15GB，但分区sda1、raid1阵列md0以及存储空间trim_xxxx的空间大小依然还是10GB。
接下去操作分成四步，依次是：
1. 扩容磁盘分区sda1
2. 扩容阵列md0
3. 扩容lvm卷trim-xxxx
4. 扩容存储空间vol1
tips: 如果是换更大容量的硬盘，可以直接换盘让阵列重建，或者用dd命令把旧盘克隆到新盘，后面的步骤就和下面的操作完全一样了。
第一步：扩容磁盘分区
分区扩容依然用到我们熟悉的fdisk，如果是gpt分区的话可以用gdisk，根据自己的情况使用。
操作步骤如图所示
步骤解析：
第一步是选择要扩容的磁盘，sudo fdisk /dev/sda，会要求输入密码认证，红字提示意思是分区大小和磁盘容量不符（废话我刚扩容了磁盘） 第二步是删除旧分区，敲字母d即可。这一步以及后面几步都无需担心数据丢失，因为操作只保留内存中，只要不保存都不会写入磁盘 第三步是创建新分区，敲字母n即可，然后会依次提示新分区的编号、新分区的起始扇区、新分区的结束扇区，都按回车用默认值 第四步出现红字提示说磁盘上有个旧分区表的签名，是否删除，敲字母n不删除 第五步，确认以上操作都没有问题，敲字母w保存本次操作 至此，分区扩容就完成了。我们用1sblk命令可以看到现在分区/dev/sda1的容量已经从10GB变成15GB惹。
tips：如果是多盘阵列，则需要依次扩容每个盘位的分区。
第二步：扩容阵列
首先确认要扩容的阵列的名字，我这里的阵列是md0。注意，在上一步中需要确认阵列中所有硬盘都已经完成了分区扩容。
可以先用mdadm -D /dev/md0命令查看阵列的状态
可以看到阵列md0当前的容量是10GB，状态是clean。
注意扩容阵列之前一定要留意阵列的状态，不要在非clean状态下扩容，说不定阵列会炸。
然后用命令mdadm --grow /dev/md0 --size=max进行扩容，会有提示阵列已经扩容到15GB，此时再用mdadm -D /dev/md0可以看到阵列已经变成15GB惹。
用lsblk再次确认阵列扩容结果
第三步：扩容lvm卷
用vgs命令查看当前的lvm卷的信息，可以看到还是10GB。
用pvresize /dev/md0命令将阵列md0的扩容信息同步给lvm
然后用vgs确认lvm卷的空间信息，可以看到对应的lvm卷已经多出了5GB的剩余空间。
接着继续扩容这个lvm卷，可以先用df -h命令获取这个lvm卷的完整路径名（注意不要忘记最后面的那个-0）
用以下命令扩容
sudo lvextend -l +100%FREE /dev/mapper/trim_ec850a20_129d_4f06_ad54_21eec30762f9-0 ## 成功提示 Size of logical volume trim_ec850a20_129d_4f06_ad54_21eec30762f9/0 changed from &amp;lt;9.</description>
    </item>
    
    <item>
      <title>用终端修改飞牛系统（fnOS）的IP地址</title>
      <link>https://ruohai.wang/202502/fnos-edit-ip-via-terminal/</link>
      <pubDate>Fri, 28 Feb 2025 21:55:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202502/fnos-edit-ip-via-terminal/</guid>
      <description>fnos的网络配置文件的路径有别于debian官方，不是/etc/network/interfaces，也不是/etc/netplan/xxxx.yaml。
fnos的网络配置文件正确路径是/etc/NetworkManager/system-connections/xxxx.nmconnection。
用nano/vim编辑以上文件即可，修改后通过systemctl restart NetworkManager.service重启网络服务后生效。
参考文章 飞牛fnOS中如何通过命令行修改IP地址~关键时刻可能会成为你的救命稻草~ 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>NAS的CPU该如何选择？算力换时间 VS 时间换算力</title>
      <link>https://ruohai.wang/202502/how-to-select-nas-cpu/</link>
      <pubDate>Thu, 20 Feb 2025 14:43:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202502/how-to-select-nas-cpu/</guid>
      <description>前言 本文根据grok3 ai的回答进行整理
分析 对于家用NAS（网络附加存储），在选择是用“算力换时间”还是“时间换算力”时，确实需要根据你的使用场景和对功耗、电费的关注来权衡。以下是一些分析和建议：
算力换时间（高性能硬件，快速完成任务） 优点： 任务处理速度快，比如文件传输、数据备份、转码（如果你用NAS看视频）等都能迅速完成。 适合需要高性能的场景，例如4K视频转码、虚拟机运行或多用户并发访问。 缺点： 高性能硬件（如更强的CPU、更多内存）通常功耗较高。 即便在空闲时，高端NAS的待机功耗也可能比低功耗设备高。 硬件成本和电费开支会增加。 功耗影响： 以常见的家用NAS为例，低端设备（如双盘位Synology DS223j）待机功耗约10-15W，而高端型号（带Intel/AMD CPU的DS923+）可能达到30-50W甚至更高，负载时功耗还会显著上升。 如果每天运行24小时，按中国平均电费0.6元/度计算，低端NAS一年电费约50-80元，而高端NAS可能翻倍甚至更多。 适用场景：如果你对速度要求高（比如频繁处理大文件或需要实时服务），且不在意稍高的电费，算力换时间更适合。
时间换算力（低功耗硬件，慢点无所谓） 优点： 低功耗硬件（比如ARM架构的CPU）能极大减少电费开支。 对于普通家用需求（如文件存储、轻量备份、照片管理），性能通常够用。 待机功耗低，长期运行成本更可控。 缺点： 处理复杂任务时速度慢，比如转码视频、运行Docker容器或大数据迁移会明显拖时间。 不适合高负载或多任务并发的场景。 功耗影响： 以低功耗NAS（如Realtek RTD1619B芯片的型号）为例，待机功耗可能仅5-10W，即使满载也很少超过20W。 按同样电费计算，一年电费可能仅30-50元，非常省电。 适用场景：如果你主要用NAS存文件、做简单备份，不常跑重负载任务，且特别在意功耗和电费，时间换算力是更好的选择。
你的需求：功耗和电费优先 既然你明确提到在意功耗和电费，建议优先选择“时间换算力”的方案，也就是选用低功耗的NAS设备。以下是一些具体建议：
硬件选择： 推荐入门级或低功耗NAS，比如Synology DS223j（Realtek RTD1619B芯片）、QNAP TS-233等，功耗低且满足基础存储需求。 硬盘选择节能型（如WD Red或Seagate IronWolf的低转速型号），避免高功耗的企业级硬盘。 优化设置： 启用硬盘休眠功能，闲置时降低功耗。 避免常开不必要的服务（如媒体服务器、虚拟机）。 性能权衡： 如果偶尔需要高算力任务（比如视频转码），可以考虑用PC临时处理，而不是让NAS长期承担高负载。 折中方案 如果你既想要低功耗，又偶尔需要高性能，可以选择中端NAS（如Synology DS723+），搭配节能设置：
平时低功耗运行基本任务。 需要算力时临时提升性能，任务完成后进入休眠。 不过这种方案硬件成本稍高，适合预算宽裕的用户。 结论 综合来看，既然你更在意功耗和电费，时间换算力（低功耗硬件）是目前最适合你的选择。推荐从低功耗设备入手，满足日常需求的同时把电费控制在最低。如果未来需求增加，再考虑升级硬件或优化方案。
喝杯奶茶 </description>
    </item>
    
  </channel>
</rss>
