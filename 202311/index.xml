<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202311s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202311/</link>
    <description>Recent content in 202311s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Nov 2023 23:34:11 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202311/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在玩客云上安装简单图床（EasyImage）</title>
      <link>https://ruohai.wang/202311/easyimage-install-guide/</link>
      <pubDate>Mon, 27 Nov 2023 23:34:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/easyimage-install-guide/</guid>
      <description>前言 前几天在玩客云上用docker方式部署了兰空图床（lsky pro），挺好用的，虽然也折腾了很久。
这没隔几天又折腾easyimage，并不是我闲的蛋疼，有几个原因：
玩客云硬件孱弱，能跑lsky pro，但跑起来以后web端响应有点慢吞吞的 lsky pro太重了，我只需要最基础的图床服务 安全，图床服务会暴露域名，虽然已经做了简单的安防，但服务分离还是更保险一些 正好前两天看到有人分享一个简单的图床服务，easyimage，看了下项目页面和demo，我觉得🉑，研究了2天，这里做个简单记录。
准备 部署easyimage有两种方式，【官方github仓库】提供了php源码，第三方提供了【docker镜像】。
想方便简单可以用docker部署，一条命令/一个配置文件就搞定，快速上手。
原本我也是用docker把easyimage部署在玩客云上，但后来想把图床服务分离出来，部署到赚钱宝二代（ws1508）上，用tf卡当存储。但实际部署过程中碰到了bug，赚钱宝二代这个设备，安装docker以后docker一直会报错，所以不得不更换策略，研究怎么跑php项目。
部署成功以后，回头看过程，其实非常非常简单。但我php零经验，过程中踩坑无数，心累。
这次需要提前准备的内容如下：
一个debian/armbian设备 一些基础的debian的操作知识 部署 这次教程内容从简，不再事无巨细的什么都写了，只写核心内容。
第一步：安装软件
跑php项目的环境准备
apt install nginx php php-fpm php-gd 第二步：下载代码
创建网站目录、下载代码、解压，都是基本操作，此处略过不表。
两点有关权限的要注意，官方也指明了：
网站根目录755权限 网站根目录分配用户，官方要求www:www，完全胡扯！debian下nginx的用户是www-data:www-data 第三步：配置nginx
话不多说，直接编辑nginx配置文件
nano /etc/nginx/sites-available/default 录入以下内容
server { listen 80; listen [::]:80; server_name easyimage; root /mnt/data/easyimage; location ~ \.php$ { fastcgi_pass unix:/run/php/php8.2-fpm.sock; include fastcgi.conf; } location / { index index.php; } } 有几个注意事项：
server_name，随便填，有域名填域名，没域名填ip，随便填都行 root，指定网站根目录，很明显我的网站目录是/mnt/data/easyimage，请根据自己实际情况调整 fastcgi_pass，这里要注意，网上很多乱七八糟的教程都填的127.0.0.1:9000也不讲清楚为什么，都他妈傻x。fastcgi_pass有四种配置，详细配置项可以查看配置文件/etc/php/8.2/fpm/pool.d/www.conf中的listen一项。要注意nginx配置文件中和这里保持同步，不同步的话fastcgi无法监听到nginx转发的请求。 fastcgi的/etc/php/8.2/fpm/pool.d/www.conf的说明如下：
; The address on which to accept FastCGI requests.</description>
    </item>
    
    <item>
      <title>在玩客云上安装File Browser</title>
      <link>https://ruohai.wang/202311/filebrowser-install-guide/</link>
      <pubDate>Sun, 26 Nov 2023 11:41:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/filebrowser-install-guide/</guid>
      <description>前言 file browser是一个非常轻量的web端文件管理服务，适合只需要简单文件访问和管理需求的用户。
在玩客云（或者说debian linux）上安装file browser，几个月之前【已经写过一篇]】。但最近重新开始折腾玩客云的时候，发现filebrowser官方不断的更新版本，文档中的安装指导也更新了，只保留一键脚本安装、docker安装，但就是没保留手动编辑配置文件的安装指导。
虽然一键脚本安装或者docker安装确实方便了很多，但我还是喜欢之前的手动编辑配置文件的安装方式，这里做简单记录。旧的【那篇文章】依然可用，但修修补补的也麻烦，索性重新写一篇。
注意：文中图床是ipv6 only，不支持ipv6的网络会看不到图片。
安装 第一步：下载软件包
先在本地创建目录
sudo mkdir -p /opt/filebrowser ; cd $_ 然后根据自己的硬件架构到【github release页面】下载对应的软件包，这里还是以玩客云为例，下载armv7版本
sudo wget https://github.com/filebrowser/filebrowser/releases/download/v2.26.0/linux-armv7-filebrowser.tar.gz 解压
sudo tar -zxvf linux-armv7-filebrowser.tar.gz 第二步：创建配置文件
在file browser的目录下，开始创建软件需要的配置文件，一共有4个文件。
首先是filebrowser.db，这个文件是file browser的数据库，保存运行过程中配置信息。
sudo touch filebrowser.db 其次是filebrowser.log，这个文件是file browser的日志文件。
sudo touch filebrowser.log 然后是config.json，file browser的基础配置文件，用来指定运行的端口、访问目录、数据库文件、log文件。
sudo nano config.json 录入以下内容
{ &amp;#34;port&amp;#34;: 8600, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/opt/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/opt/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 最后是filebrowser.service，是systemd的配置文件，用来把filebrowser添加到系统服务。注意User=[User]一栏，如果file browser是以root账户运行，这一栏可以删除。如果以non-root用户运行，需要同步调整filebrowser.db和filebrowser.log的用户权限。
sudo touch filebrowser.service 录入以下内容
[Unit] Description=The filebrowser Process Manager After=network.</description>
    </item>
    
    <item>
      <title>使用PicGo配合兰空图床（Lsky Pro）进行图片上传</title>
      <link>https://ruohai.wang/202311/lsky-pro-use-picgo-to-upload/</link>
      <pubDate>Tue, 21 Nov 2023 14:41:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/lsky-pro-use-picgo-to-upload/</guid>
      <description>前言 在玩客云上部署lsky pro，虽然能用，但网页响应有点慢，而且上传图片都需要打开web页面更是有点麻烦，所以需要一个工具来配合lsky pro使用。
它就是picgo。
picgo的配置已经做到了尽量傻瓜化，lsky pro的api设置也非常的简单，但两件简单的事情组合到一起，就是出了不少的状况。
所以简单记录下配置过程。
注意事项：
本文的图片链接都是ipv6 only，如果你的网络只支持ipv4的话会看不到图片 配置 第一步：安装picgo
【picgo下载页面】，根据自己的网络情况和硬件平台，到对应的下载源下载安装即可。
第二部：安装lsky插件
picgo安装完成后，启动！
默认不支持lsky图床，需要安装插件，安装插件需要node.js。🤔
所以先装node.js，可以自己去官网下，也可以直接点安装插件，它会带你跳转到nojde.js下载页面。
装好node.js以后，再次启动picgo！在插件页面搜索lsky
我装的是第二个插件lsky-uploader 1.1.0，你可以根据自己喜好选择。
不着急配置插件，要先第三步。
第三步：安装浏览器插件
在lsky后台的接口页面，查看获取token的方法。如果没有接口，需要先在设置中开启。
根据文档，就是要自己发起一个http post请求来获取token，行吧。
有俩方法，第一自己手写一个简单的html表单来提交post请求，第二通过第三方工具。
这里选择用浏览器插件，打开chrome或者edge的应用商店，搜postman。个人建议安装data~more，界面简洁，方便好用。
安装插件以后，终于可以开始获取token惹。😭
第四步：获取token
在浏览器中打开插件，根据lsky文档，配置参数。
首先在复制一下lsky的api
然后插件中把api复制进去，请求方式选择post，在headers页面，填写Accept:application/json
在params页面，填写自己lsky的账户和密码（email和password）
以上内容都填写完以后，在顶部可以看到拼接出来的完整url
最后点击右侧的submit，顺利的话就可以看到返回token惹，把双引号里的内容都复制，下一步要用。前面的数字正常应该是1，截图里是5因为我测试了好几次。😭
第五步：配置插件
终于来到最后一步了，第一次写这么多配图的文章。
需要先处理上一步获取的token，它还不是完全体，需要加一个前缀Bearer，完整格式示意如下
Bearer 1|uc4xxxxT9Okxxxxxxxwp6ykixxxxxxx6V8k 然后打开picgo，在图床设置中选择lsky，填写内容。
域名就是lsky的域名，不需要带api后缀。token就是处理后的Bearer开头的那串字符。点击确定即可。
到这里，picgo和lsky插件终于配置完了，可以正常使用了。
🤦‍
后记 不得不说，这个获取token和需要加Bearer前缀的方式让我掉进坑里好多次。
心累。
不过配置好以后再贴图就很方便了，要不然我也不会写这篇这么多配图的文章。
🎉</description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署兰空图床（Lsky Pro）</title>
      <link>https://ruohai.wang/202311/lsky-pro-install-on-onecloud/</link>
      <pubDate>Tue, 21 Nov 2023 12:19:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/lsky-pro-install-on-onecloud/</guid>
      <description>前言 硬件性能：
能跑，但反应会稍微有点慢 存储空间：
用docker-compose部署，docker.io + docker-compose大概需要300MB空间 lsksy-pro需要434MB存储，mysql需要230MB存储 合计大概需要1GB的存储空间。玩客云内置emmc可用存储大概6GB，请提前规划存储占用 注意事项：
文章里的图片都ipv6 only，如果你的网络只支持ipv4，会看不到图片 部署 第一步：安装docker环境
这一步没啥好说的，两条命令。
apt install docker.io apt install dockere-compose 我倾向于使用debian软件仓库里的docker，所以apt一把梭。
因为docker hub被封，记得配置docker国内镜像
nano /etc/docker/daemon.json 录入以下内容：
{ &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://registry.hub.docker.com&amp;#34;, &amp;#34;http://hub-mirror.c.163.com&amp;#34;, &amp;#34;https://mirror.baidubce.com&amp;#34;, &amp;#34;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;#34;, &amp;#34;https://docker.nju.edu.cn&amp;#34; ], &amp;#34;iptables&amp;#34;: false } 保存后退出，然后重启docker。
systemctl restart docker.service 其中的&amp;quot;iptables&amp;quot;: false是禁止docker调整iptables，因为我用的ufw管理防火墙。请根据自己的情况保留或者删除这条。
第二步：编辑docker配置文件 &amp;amp; 部署
注意：lsky pro官方没有发布docker镜像，所以docker安装只能找第三方。因为玩客云过时的硬件（armv7），这里选用【tyroyal/lsky-pro-x】发布的版本。
首先新建目录，创建配置文件。玩客云内置emmc存储空间非常金贵，所以请把lsky pro的目录指向外部存储空间。
# 创建目录 mkdir lsky-pro # 进目录 cd lsky-pro # 编辑配置文件 # nano docker-compose.yml 在配置文件中录入以下内容。
version: &amp;#39;3&amp;#39; services: lsky-pro: image: tyroyal/lsky-pro-x:latest restart: unless-stopped hostname: lsky-pro container_name: lsky-pro volumes: - /path/to/lsky:/var/www/html/ ports: - &amp;#34;8008:80&amp;#34; networks: - lsky-net mysql-lsky: # arm 架构请自行更换 mysql 镜像使用 image: mysql:5.</description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署PhotoPrism</title>
      <link>https://ruohai.wang/202311/photoprism-install-on-onecloud/</link>
      <pubDate>Tue, 21 Nov 2023 08:49:04 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/photoprism-install-on-onecloud/</guid>
      <description>前言 硬件性能：
photoprism官方明确要求部署pp服务的最低硬件要求是4核 + 4GB内存，玩客云的cpu性能孱弱而且内存也仅仅只有1GB 能跑起来的前提是禁用很多图像算法识别功能 如果你需要的是一个全功能的photoprism，那这个方案不适合你，更不适合玩客云 实测部署成功以后，photoprism能跑，网页端访问流畅，导入20张图片未出现oom。适合轻负载使用 实测转码一张mi10s拍摄的2400万像素的heif/heic格式的照片到jpg需要7s钟 转码视频，mi10s拍摄的1080p@60fps h265视频30秒，转码成720p avc视频，大概需要2分半 存储空间：
docker.io + docker-compose大概占用300MB存储 photoprism + mariadb镜像大概占用1.6GB存储 合计大概占用2GB空间，玩客云内置emmc可用空间大概是6GB，能装下，但需要提前考虑存储空间的占用 部署 &amp;amp; 优化 第一步：安装docker环境
直接用debian仓库里的docker.io
apt install docker.io 使用docker-compose方式部署
apt install dockere-compose 因为docker hub被封，记得配置docker国内镜像
nano /etc/docker/daemon.json 录入以下内容，需要注意没必要填太多镜像站，一两个就够了：
{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;http://hub-mirror.c.163.com&amp;#34;], &amp;#34;iptables&amp;#34;: false } 保存后退出，然后重启docker。
systemctl restart docker.service 其中的&amp;quot;iptables&amp;quot;: false是禁止docker调整iptables，因为我用的ufw管理防火墙。请根据自己的情况保留或者删除这条。
第二步：配置文件调整
先创建目录吧。玩客云内置存储空间比较珍贵，pp的运行目录记得放在外置存储。
# 创建目录，记得把pp运行目录指向外置硬盘 mkdir photoprism ; cd $_ # 下载官方的配置文件 wget https://dl.photoprism.app/docker/armv7/docker-compose.yml 官方提供的配置文件，除了常规的密码、运行目录之类，还有以下几个项目要修改
PHOTOPRISM_DEFAULT_TLS: &amp;quot;false&amp;quot;，这个选项是pp程序初次部署时生成一个自签名的https/tls证书，没卵用，而且在玩客云上部署时会耗费大量时间以生成证书，建议禁用 PHOTOPRISM_DISABLE_CHOWN: &amp;quot;true&amp;quot;，这个选项是pp每次启动的时候调整storage目录的权限，如果图库文件数量很大，会导致每次pp启动都非常非常耗时，建议禁用 PHOTOPRISM_DISABLE_WEBDAV: &amp;quot;true&amp;quot;，禁用webdav服务。webdav服务用来分享照片的，用不上，禁用。也可以在webui里禁用。 PHOTOPRISM_DISABLE_TENSORFLOW: &amp;quot;true&amp;quot;，禁用tensorflow。图像算法识别功能，吃硬件性能，玩客云上跑pp必须禁用掉。务必在配置文件中直接禁用，要不然启动pp都很难。 user: &amp;quot;1000:1000&amp;quot;，有权限洁癖的用户需要这个，自己加一行参数，指定photoprism以non-root用户运行。如果加了这条，对应的originals、import、storage三个目录需要提前手动创建并分配用户权限。如果以root用户运行，这条可以无视。 image: linuxserver/mariadb:10.</description>
    </item>
    
    <item>
      <title>有关twitter账号被封以后的常见问题</title>
      <link>https://ruohai.wang/202311/twitter-faqs-about-got-banned/</link>
      <pubDate>Mon, 20 Nov 2023 20:15:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/twitter-faqs-about-got-banned/</guid>
      <description>FAQs Q：你的twitter账号怎么了？
A：被冻结了，大概是因为使用第三方插件下载twitter视频被判定为滥用twitter api的违规行为。
Q：能解封吗？
A：发过五六封申诉信了，然并卵，凉了，勿念。
Q：会注册小号回归吗？
A：目前没有这个打算。
Q：会去长毛象吗？
A：目前没有这个打算。
Q：那你用什么平台？
A：目前在自己的玩客云小机器上部署了一个memos，公网ipv6 only。你的网络如果支持ipv6，可以【点击这里】访问。但服务不一定稳定，可能因为电力、网络、dns解析滞后，或者自己在刷机等各种原因导致无法访问。但我会尽量保证服务可用。
Q：很久没看到叶光荣了，他还好吗？
A：抱歉让你失望了，6月份的时候我们因为沟通矛盾已经断联至今，默认已经分手。他的近况我无法得知。
Q：两只猫还好吗？
A：挺好的，能吃能喝，膘肥体壮。想看🐱🐱近照可以【点击这里】，我偶尔会发一些🐱片。
Q：真的不用twitter了吗？
A：也不全是。有个瑟推小号，上面都是18+内容，偶尔可能会发一点自拍小视频。你如果真的对瑟瑟内容十分有兴趣，可以在【telegram】私聊我要账号。
感谢 感谢你对我的关注，感谢过去这么多年我们在twitter上的互动，感谢你愿意找到这里来了解我的近况。
也替两只猫🐱感谢你的关心。
希望接下去的每一天越来越好，大家越来越开心。
🎉</description>
    </item>
    
    <item>
      <title>twitter账号被冻结的原因分析</title>
      <link>https://ruohai.wang/202311/twitter-why-got-suspended/</link>
      <pubDate>Thu, 16 Nov 2023 01:21:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/twitter-why-got-suspended/</guid>
      <description>这几天复盘了一下我的账号为什么会被冻结，我违反了twitter的哪条rule。思来想去，夜不能寐。
突然灵光一闪，我大概猜到原因了：滥用api。
马斯克接手twitter以后，调整了twitter api的使用限制，那会还闹出了不少搞笑的限制策略，比如一天刷推数量限定200条。这些新策略，有一些撤回了，还有一些落实执行了。
之前朋友给我分享过一个chrome应用商店里的插件，可以用来下载twitter上的视频文件，我觉得很好用，就一直装着这个插件。前阵子这个插件被twitter官方投诉下架了，投诉理由是滥用api。但已经装在浏览器上的插件并不会自己消失，我依然在用这个插件。大概率是这个插件的原因，导致我的账号被认定存在滥用api的行为而被冻结了。
想明白了原因，又用gpt写了一份申诉信。
回信内容一如预料：这个账号被冻结（this account is suspended）。
没戏，凉凉。
😄</description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署memos</title>
      <link>https://ruohai.wang/202311/memos-install-on-onecloud/</link>
      <pubDate>Tue, 14 Nov 2023 13:03:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/memos-install-on-onecloud/</guid>
      <description>前言 memos的部署，目前官方只推了docker或者docker-compose两种方式。
那其实要部署就非常简单，准备好docker环境，然后一条命令/一个配置文件就搞定了。
但在玩客云上安装稍微有点麻烦，因为玩客云的硬件是armv7，memos的的新版已经不支持这个硬件架构。
所以本次安装的核心就是找到支持armv7的docker镜像
部署 第一步：准备docker环境
直接用debian仓库里的docker
apt install docker.io 我更喜欢用docker-compose，配置文件方便管理
apt install docker-compose docker环境到此安装完毕
第二步：找memos镜像
memos的新版本已经不支持armv7，有两个解决方案：
如果你动手能力比较强，那就下载源码自己编译一个支持armv7的版本 如果和我一样比较懒，那就找一下支持armv7的版本 在memos的【docker-hub发布页面的tag标签】里，可以看到2个月前发布的0.15.0版本支持armv7。
这就好办了，docker pull的时候指定版本即可。
第三步：部署memos
我用的docker-compose方式部署，新建一个配置文件
# 新建目录 mkdir ~/.memos &amp;amp; cd $_ # 新建配置文件 touch docker-compose.yml 然后用编辑docker-compose.yml文件，录入以下内容。
version: &amp;#34;3.0&amp;#34; services: memos: image: ghcr.io/usememos/memos:0.15.0 container_name: memos user: 1000:1000 restart: always volumes: - ~/.memos/:/var/opt/memos ports: - 5230:5230 注意，针对官方提供的配置文件，我调整了几个参数：
版本号，从latest指定为0.15.0 用户，默认是root用户运行memos，调整为UID:GID=1000:1000的non-root用户 重启方式，默认没有restart配置参数，调整为总是重启（always） 编辑好配置文件以后，开始部署即可
docker-compose up -d 注意事项 如果要升级或者重新部署memos，备份~/.memos/目录下的数据库文件memos_prod.db和附件目录assets 目前0.15.0和新版本的数据库表结构已经不兼容，新版已经支持用户评论，如果升级请留意表结构调整 </description>
    </item>
    
    <item>
      <title>往mdadm创建的raid5阵列中添加新硬盘以扩容</title>
      <link>https://ruohai.wang/202311/mdadm-add-new-hdd-to-raid5-arrary/</link>
      <pubDate>Tue, 14 Nov 2023 12:44:00 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/mdadm-add-new-hdd-to-raid5-arrary/</guid>
      <description>前言 之前手上只有4块hdd，虽然硬盘柜有5个盘位，但只是用4盘组了raid5。
raid5用了一阵以后，觉得还行，就想着把剩下的一个空盘位利用起来，所以又从pdd入手了好几片500GB的拆机硬盘。
硬盘到手了，照例又是查smart信息、全盘扫坏道。几块西数的是清零盘，但没有扫出坏道；几块希捷的通电时间惊人，一块3万小时，一块6万小时，但没有扫出坏道。
也就20rmb一片，既然没坏道，那就凑合着用吧。
raid5扩容 先描述下本次我想要实现的需求：有一个正在运行的四盘位raid5阵列，添加一个块同容量的硬盘，从四盘位扩展为五盘位。
有需求了就找解决方案，搜关键字mdadm、raid5、添加硬盘，但没有搜到什么靠谱可用的方案，那就自己摸索吧。
已有raid5阵列要添加硬盘，有两个方案：
方案一： 新建raid5
这个方案很傻瓜，但是非常的安全而且非常的效率，可行度100%。前提是你手上有很多备用硬盘，或者有一个大容量硬盘做数据中转。
如果手上硬盘数量足够多，那就保持旧四盘位raid不动，新组装一个五盘位raid5，然后直接从旧raid拷数据到新raid。整个任务所耗费的时间由两个raid的硬盘读写速度和局域网带宽决定。
如果手上硬盘不够用来组新raid，那先从旧raid把数据导出一份备份，然后停用四盘位旧raid + 加硬盘 + 创建五盘位新raid，最后把备份的数据再导入回去。
方案二：旧raid5扩容
这个方案有一定的风险性，操作前最好把数据备份一下。
旧四盘位的raid5，添加一块硬盘。假定新添加的硬盘是/dev/sdf。
第一步：清除分区数据。
因为我的旧raid是清除了分区直接裸盘组raid，所以新硬盘也先清除分区信息。如果你的raid是先分区然后以分区为单位组装的raid，那新硬盘也记得同样先分区。
# 查看分区信息 wipefs /dev/sdf # 清除分区信息 wipefs -a -f /dev/sdf 第二步：添加硬盘
新盘添加进阵列。假定阵列名为/dev/md0。
mdadm --manage /dev/md0 --add /dev/sdf 添加完成后，查看一下阵列信息。
mdadm -D /dev/md0 此时可以看到阵列的硬盘数量从4变成了5。但是新加入的硬盘并没有真正的融入进去，它的角色是hot spare热备盘，也就是当四盘raid中出现一块坏盘时，这块新盘会自动替上去重建raid修复数据。
第三步：重塑（reshape）
我的目的并不是给四盘位raid5添加一块热备盘（hot spare），我是想把新盘加进存储池扩充容量。
指定raid5的硬盘数量为5
mdadm --grow /dev/md0 --raid-devices=5 命令执行完成后，查看一下阵列信息
mdadm -D /dev/md0 此时就可以看到，存储池的硬盘从4块变成了5块，新的raid开始重塑（reshaping）。
整个重塑过程会非常非常非常的漫长，这个时间单位以小时甚至以天计算，请耐心等待mdadm完成任务。
第四步：调整阵列容量
在经历了漫长的重塑（reshape）以后，进度条终于到了100%，可以进行下一步操作了。
把raid容量调整为最大！
mdadm --grow /dev/md0 --size=max 查看阵列当前状态，会看到当前是resyncing(同步)。
mdadm --detail /dev/md0 然后耐心等待mdadm对阵列进行同步（resyncing），这个过程比重塑（reshape）快很多。</description>
    </item>
    
    <item>
      <title>我的推特账号被冻结了</title>
      <link>https://ruohai.wang/202311/twitter-account-was-suspended/</link>
      <pubDate>Tue, 14 Nov 2023 12:40:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/twitter-account-was-suspended/</guid>
      <description>是的，我的twitter账号被冻结了。
冻结的时间点大概是2023年11月12日凌晨2点，首页提示账户被冻结如有疑问请发申诉信。
发了三次申诉信，前两份自己写的，英语磕磕绊绊，但表述清楚了这可能是一个错判请review这次操作。很快就收到邮件，简短一句话：这个账号被冻结（this account is suspended）。
12号白天的时候用gpt4生成了一份完美的申诉信，很快又收到了邮件，依然是简短的一句话：这个账号被冻结（this account is suspended）。
行吧，不纠结了。
如果要说这个账号对我是否重要，我能写出千字它对我的重要性。从2008年8月注册，到2013年11月被冻结，使用了近16年的账号，记录了我从上学到工作、从年轻人变中年人、从单身到处对象最后又恢复单身，这一切的点点滴滴。
账号就此被冻结，连导出个人数据存档的选择都没有，至此，我的一十六年的记录消失在互联网。
这两年也确实进入了人生低谷期，半生役役未见成功，茕茕孑立不知所向，已无力、无心继续在网络上记录个人生活日常。此事就当是和过往做个了结。
希望接下去的日子，朋友，你和我，每天都开心。
😄</description>
    </item>
    
    <item>
      <title>Linux下迁移mdadm软raid</title>
      <link>https://ruohai.wang/202311/mdadm-auto-mount-raid/</link>
      <pubDate>Fri, 10 Nov 2023 18:03:30 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/mdadm-auto-mount-raid/</guid>
      <description>当在A系统下用mdadm组装的软raid阵列，如果全盘迁移到B系统时，如何正确的重新组装并识别。
有两种解决方案：
方案一：B系统重启 B系统先安装mdadm，然后关机，接着插上raid阵列的所有硬盘，最后B系统重启即可。B系统启动后会自动识别软raid阵列并正确组装，之后只需要动手完成挂载。
方案二：B系统不重启 现在A系统中卸载（umount）软raid阵列，然后把阵列的所有硬盘插到B系统主机。
这里又分两种情况。
先安装mdadm，然后raid硬盘都插入后，系统会自动识别raid并正确组装
先插入raid阵列所有硬盘，然后安装mdadm，此时系统无法自动识别raid，需要手动组装
设定raid阵列名为md0，4个阵列盘分为sdb、sdc、sdd、sde。执行以下命令，即可完成raid组装与识别，之后再手动完成挂载。
# 组装阵列，mdadm会自动识别raid类型 mdadm -A /dev/md0 /dev/sd[b-e] # 手动挂载 mount /dev/md0 /mnt/raid </description>
    </item>
    
    <item>
      <title>Hugo博客的安装</title>
      <link>https://ruohai.wang/202311/hugo-install-guide/</link>
      <pubDate>Wed, 01 Nov 2023 00:32:27 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/hugo-install-guide/</guid>
      <description>前言 这两天重新部署了nas，而且博客用的主题m10c也已经停止维护快一年，新版本的hugo已经不支持这个主题。两个原因叠加，正好重新部署hugo。
离上一次部署已经过去快四个月，需要重新看官方文档才能回忆起步骤。看之前自己写的教程也觉得啰里啰唆，旧文懒得改，索性重新记录一篇。
安装 第一步：下载安装包
之前是直接apt install用的debian仓库版本，但太老了，还一直停在0.111.3版本，而且apt安装还会附带一大堆其它包，提示需要几百MB的存储空间，所以这次放弃apt，直接到github仓库下载二进制安装包。
github指路：https://github.com/gohugoio/hugo/releases
下载对应系统、对应硬件架构的版本，然后添加环境变量。
windows：把压缩包解压到D:\hugo并把路径添加到环境变量，高级系统设置——环境变量——系统变量——path，保存退出。 linux：把压缩包解压到/opt/hugo并把路径添加到.bashrc，在末尾加一行export PATH=$PATH:/opt/hugo，然后source ~/.bashrc让变更生效。 配置完以后，敲命令hugo -h看是否正常输出。
第二步：创建博客目录
hugo new site myblog 第三步：获取主题
hugo官网主题商店指路：https://themes.gohugo.io/
# 进入博客目录 cd myblog # 初始化git仓库 git init # 克隆paper主题到themes/paper目录 git clone https://github.com/nanxiaobei/hugo-paper themes/paper 然后在hugo.toml配置文件中指定主题即可
theme = &amp;#34;paper&amp;#34; 第四步：本地运行
安装了主题以后，本地运行查看效果
hugo server 如果非本机访问，而是局域网内其他机器访问，需要加bind参数
hugo server --bind=&amp;#34;0.0.0.0&amp;#34; 第五步：写文章
写文章需要先根据模板新建markdown文件
hugo new post/my-first-blog.md 其中post是归档目录，也是发布博客以后的url地址，可以根据自己喜好调整，比如我喜欢根据月份归档，那就是
hugo new 202311/my-first-blog.md 第六步：编译博客
博客写好以后，在发布之前，需要编译成html静态页面。
# 进入目录 cd myblog # 编译 hugo 注意编译的时候，默认会忽略草稿，也就是markdown文件中的draft: false标签，如果是true，默认在执行hugo编译的时候会忽略掉这篇草稿。
第七步：发布博客
在编译完成后，在myblog目录下会出现一个public目录，要发布博客，就只需要把public目录下的内容推送到目标服务器就行了，比如自己的服务器、github pages、cloudflare pages等等。</description>
    </item>
    
  </channel>
</rss>
