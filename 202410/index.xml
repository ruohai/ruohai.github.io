<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202410s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202410/</link>
    <description>Recent content in 202410s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Oct 2024 13:43:18 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202410/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>海鲜市场捡垃圾买玩客云的一些注意事项</title>
      <link>https://ruohai.wang/202410/onecloud-buy-tips/</link>
      <pubDate>Wed, 16 Oct 2024 13:43:18 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/onecloud-buy-tips/</guid>
      <description>长话短说，直接说注意事项：
玩客云的硬件有两个版本，v1.0和v1.3，网上的刷机教程里提到这两版的区别时只会说短接点不一样，但实际这俩版本对armbian主线固件的兼容性也不一样。这里提到的armbian主线固件是【hzyitc/armbian-onecloud】。如果是v1.3那就没啥问题，如果是v1.0，那有一部分机器的网卡和hdmi无法驱动，刷机以后根本无法使用（无法进入系统、无法获取ip、接hdmi没有信息输出）。注意是有一部分，也就是并不是v1.0就全都不兼容。如果在海鲜市场淘玩客云捡垃圾的时候注意区别，最好挑v1.3版本。如果不小心买到v1.0版的不兼容主线armbian固件的机器，可以去恩山论坛找找修改版的固件，或者试试刷openwrt。
玩客云的sd卡槽io性能很差，大概只能跑到3~5MB/s。
玩客云的s805芯片是arm32的架构，虽然debian12以及接下去的debian13依然支持该硬件架构，但很多的软件和docker镜像都已经不提供arm32的版本，这时候要么找其它人打包的版本凑合，要么自己动手，总之就是用起来会比较麻烦。
玩客云的usb接口的io性能大概能跑到30MB/s，但是如果通过usb口挂硬盘 + samba共享，因为算力限制、协议开销，实际的io大概25MB/s。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>使用Gmeek &#43; Github Pages部署个人博客</title>
      <link>https://ruohai.wang/202410/gmeek-github-pages-blog/</link>
      <pubDate>Thu, 10 Oct 2024 22:48:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/gmeek-github-pages-blog/</guid>
      <description>白嫖github pages来搭建个人博客已经有海量的教程和应用，但这次的gmeek有点不太一样，非常不一样，值得写篇博客推荐一下。
简单列举一下gmeek这个博客框架和常用的hexo/hugo这些博客框架的区别：
发布方式不同。hexo/hugo这些常用的框架，都是在本地或者vps上写好markdown文本，然后编译成静态网页资源，最后把静态资源push到github repo完成发布。而gmeek是在github repo的issues页面创建新的issue来编写文章，编写完以后保存，然后github action通过设定的workflow脚本自动把issues中的内容编译成静态资源发布到github pages。
搜索引擎的亲和度不同。这里点名百度（其它搜索引擎我没用过所以不太清楚），百度不会收录未备案的国内个人博客站，也不会收录部署在github pages网站。但是用gmeek框架会不一样，因为gmeek的【博客原文】其实是发布在github issues的，各大搜索引擎（尤其是各种内容农场、机翻搬运站）对github issues的内容收录的非常勤快而且搜索的权重很高，甚至是全文收录而不是只收录一个标题。
gmeek框架集成了utteranc.es项目用github issues来实现评论功能，比hego/hexo之类博客框架的整合度更高（需要找支持评论的主题，或者通过插件来外挂评论），而且做到了博客正文和博客评论都聚合在一个issue帖子内，不会出现正文和评论的割裂感。
简单总结，核心就是3点：
不需要在本地部署编译环境 搜索引擎会全文收录你的博客 评论系统好用 &amp;amp; 方便 不知道这两点是否对你有吸引力，于我是一眼就被吸引，而且gmeek的默认主题也非常简洁清爽。
强烈推荐这个博客框架。
这是项目主页：Meekdai / Gmeek
这是官方的快速上手教程：Gmeek快速上手
这是博客demo：Meekdai
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用Docker方式部署在线Markdown编辑器flatnotes</title>
      <link>https://ruohai.wang/202410/flatnots-installation/</link>
      <pubDate>Tue, 08 Oct 2024 15:31:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/flatnots-installation/</guid>
      <description>前言 一直在找一个支持自建（self-host）而且轻量的web端markdown编辑器，能支持html样式预览，如果ui能好看又简洁的话就最棒了，但始终没找到合适的，所以之前我写博客那些文字的时候都是在filebrowser里直接编辑，效果如图。
虽然能用，但是不够好用。
今天在刷github上【awesome-selfhosted/awesome-selfhosted】项目的时候发现了flatnots，简单试用以后几乎完美满足我的需求。所以写篇文章做个简单记录。
部署 &amp;amp; 使用 部署
【dullage / flatnotes】项目主页提供了docker部署的命令，所以这一步没啥难度，复制官方提供的命令然后简单自定义修改即可。我喜欢用docker-compose方式部署，这里贴出官方的yaml模板。
# 官方docker-compose.yml模板 version: &amp;#34;3&amp;#34; services: flatnotes: container_name: flatnotes image: dullage/flatnotes:latest environment: PUID: 1000 PGID: 1000 FLATNOTES_AUTH_TYPE: &amp;#34;password&amp;#34; FLATNOTES_USERNAME: &amp;#34;user&amp;#34; FLATNOTES_PASSWORD: &amp;#34;changeMe!&amp;#34; FLATNOTES_SECRET_KEY: &amp;#34;aLongRandomSeriesOfCharacters&amp;#34; volumes: - &amp;#34;./data:/data&amp;#34; # Optional. Allows you to save the search index in a different location: # - &amp;#34;./index:/data/.flatnotes&amp;#34; ports: - &amp;#34;8080:8080&amp;#34; restart: unless-stopped 官方只提供了arm64/amd64两个硬件平台的docker镜像，如果想在arm32平台（比如玩客云）上部署，只能找第三方打包的镜像，目前在dockerhub能搜到的只有这个版本【codeotto/flatnotes-arm32】，比官方落后一个版本，但能用。
使用
使用docker-compose方式一键部署成功之后，打开浏览器访问http://host_ip:8080即可。
用自己配置的账户密码登陆后，界面超级精简，功能也超级精简，只有查找、切换主题、新建、显示全部笔记四个功能。
markdown编辑器的界面好看而且好用。
笔记以markdown形式保存，目录结构清晰，不需要数据库，非常方便。
官方提供了demo可以直接在线体验：demo site
搜索功能
flatnotes自带的搜索功能，实测，除了无格式的正文内容不会建立索引，其它的标题、引用、代码块之内的内容都会建立索引。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian和OpenWrt上使用sqlite3-cli进行简单数据维护</title>
      <link>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</link>
      <pubDate>Mon, 07 Oct 2024 19:38:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</guid>
      <description>前言 我使用的memos默认用的数据库是sqlite，在长期使用memos的过程中，偶尔需要直接操作数据库进行一些冗余数据清理、错误数据debug。
在windows上维护sqlite数据库时，我用的工具是免费 &amp;amp; 开源的【sqlite studio】，带gui操作界面，非常好用，值得推荐。
但很多时候我希望ssh连上linux服务器以后，直接在终端中维护sqlite数据库，这就需要用到sqlite-cli工具。写篇文章做个记录。
安装 &amp;amp; 使用 首先是安装sqlite3-cli工具。
在openwrt上，只需要在软件仓库中根据关键字搜索然后点击安装即可。
在debian上直接apt一把梭。
sudo apt install sqlite3 然后是一些简单的数据库维护。
使用sqlite3-cli工具打开sqlite的db文件
sqlite3 /path/to/sqlite3/dbfile.db 然后就会进入sqlite&amp;gt;的命令符界面，表明已经可以对sqlite数据库文件进行操作了。
最后列举几个常用的sqlite3-cli的命令
# 显示数据库 .databases # 显示数据库表 .tables # 退出 .quit 参考文章 SQLite 命令 pawelsalawa/sqlitestudio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上设置静态IP（固定IP）</title>
      <link>https://ruohai.wang/202410/debian-config-static-ip/</link>
      <pubDate>Sat, 05 Oct 2024 17:44:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/debian-config-static-ip/</guid>
      <description>前言 我目前接触到的debian用到的网络管理工具有两个，一个是传统的networkmanager，另一个是netplan。
两种网络管理工具下配置静态ip的方法不太一样，这里汇总做个记录。
区分networkmanager和netplan 首先要搞清楚自己的debian系统用的网络管理工具是哪个，chatgpt的回答如下
但实际判断networkmanager的方法不太对，有效的方法只需要看/etc/network目录下是不是有interfaces文件即可。
判断netplan，只需要看是否有/etc/netplan这个目录，并查看这个目录下是否有配置文件。
获取网卡设备名称 使用命令ip addr查看网卡的名称，后面配置的时候需要用到
如果所示，网卡名称即为enp2s0
networkmanager 编辑/etc/network/interfaces文件，根据自己需求录入静态ip参数即可
allow-hotplug enp2s0 # 支持热插拔 auto enp2s0 # 开机自动启用eth0 iface enp2s0 inet static # 使用静态ip address 192.168.1.4 # ip地址 netmask 255.255.255.0 # 子网掩码 gateway 192.168.1.1 # 网关地址 dns-nameservers 192.168.1.1 # dns服务器 编辑后保存退出，然后重启网络服务
sudo systemctl restart networking.service netplan netplan的情况稍微复杂一些，因为netplan是一个配置工具，需要搭配底层来实现网络管理，那底层管理工具可以是networkmanager，也可以是systemd-networkd。
我碰到的情况都是netplan + networkd的组合，查看/etc/netplan目录下的yaml配置文件就可以清楚自己系统的工具组合。注意每个系统的netplan的yaml配置文件名称不一定相同，根据自己情况调整。
在配置文件中可以看到，管理网络的工具是networkd。
那接下去就有几种修改方法：
netplan指定网络工具 + netplan生成配置 netplan指定网络工具 + networkd配置 netplan指定网络工具 + networkmanager配置 出于配置的难易程度 &amp;amp; 可阅读性考虑，我推荐使用第二种方案。
首先修改/etc/netplan目录下的yaml配置文件，只需要指定renderer是networkd即可，下面关于dhcp的配置都注释。
然后到/etc/systemd/network目录，可以看到有个network配置文件，原始配置是将网络配置功能托管给了netplan。
我们需要根据自己需求修改配置</description>
    </item>
    
    <item>
      <title>在Debian上部署硬件性能监控面板Netdata</title>
      <link>https://ruohai.wang/202410/netdata-install-guide/</link>
      <pubDate>Wed, 02 Oct 2024 20:57:34 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/netdata-install-guide/</guid>
      <description>前言 平时使用linux的时候，需要查看实时硬件性能占用时，我都是在终端里直接敲htop，最近想着部署一个支持web端的监控面板。
支持的web面板的硬件性能监控方案有很多，glances、zabbix、netdata、cockpit、1panel等等，从轻量级的监控面板到比较中的全功能panel应有尽有。
最后就部署的简单程度 &amp;amp; 性能资源占用两方面考虑，选择了netdata。
部署 在debian上安装netdata非常简单，直接apt即可
sudo apt install netdata 安装好以后，编辑配置文件/etc/netdata/netdata.conf
默认的配置文件中需要修改绑定IP和默认端口即可。
# 默认只监听127.0.0.1本机的请求 bind socket to IP = 0.0.0.0 # 根据自己需求调整端口号 default port = 19999 以上调整完以后，重启netdata服务
sudo systemctl restart netdata.service 在浏览器中访问http://host_ip:19999就可以访问了。如果服务器上安装了防火墙，记得放行端口。
汉化 netdata默认语言英文，如果英文阅读有障碍想，或者想要汉化，可以参考这个项目【DX-Kevin/Netdata-chinese-patch】,替换4个js/html文件即可，非常方便。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上部署NFS网络文件系统</title>
      <link>https://ruohai.wang/202410/nfs-install-guide/</link>
      <pubDate>Wed, 02 Oct 2024 13:11:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/nfs-install-guide/</guid>
      <description>前言 玩nas的对各种网络共享文件协议肯定不陌生，比如smb/samba、nfs、afp、webdav等等。
之前我一直用的smb/samba，也用过几次webdav，这次尝试下nfs，水篇文章做个简单记录。
部署 nfs的部署分为服务端和客户端，两端的部署方式些微不同。
服务端（server）
首先是安装必须的软件包，nfs-common作为依赖包必定会安装，所以在命令中不需要体现
sudo apt install nfs-kernel-server 然后编辑nfs的配置文件/etc/exports，设定共享目录。
sudo nano /etc/exports 添加共享目录的配置信息
/path/to/share/folder 192.168.1.111(rw,async) tips：
/path/to/share/folder：共享目录的路径 192.168.1.111：指定共享客户端的ip，也可以用子网掩码来指定网段，或许还有其它指定方式可以自行研究 (rw,async)：指定共享目录的权限，常用的rw（可读可写）、同步异步（sync/async），其它参数可以等需要调优了再翻阅文档 配置完成以后，可以直接重启nfs服务生效
sudo systemctl restart nfs-server.service 也可以不重启nfs服务依然让配置生效
sudo exportfs -arv tips:
-a：全部挂载或全部卸载 -r：重新挂载 -v：显示详细信息 如果电脑上启用了防火墙，需要放行两个端口
2049,111/tcp 2049,111/udp 好了，到这里nfs的服务端配置就完成惹。🎉
客户端（client）
首先是安装必须的软件包
sudo apt install nfs-common 然后直接mount看下能不能挂载成功，假定挂载到本地的/mnt/nfs，命令中的-t nfs这部分指定协议的内容可以省略。
mount -t nfs 192.168.1.111:/path/to/share/folder /mnt/nfs 不出意外的话就挂载成功了。如果需要把nfs文件夹设置成开机启动挂载，可以通过编辑/etc/fstab，也可以用systemd-mount来实现，这里以后者为例。在/etc/systemd/system目录下新建一个mnt-nfs.mount文件（注意这个文件名mnt-nfs需要和挂载点/mnt/nfs路径对应），然后录入以下内容
[Unit] Description=nfs auto mount After=network.target [Mount] What=192.168.1.111:/path/to/share/folder Where=/mnt/nfs Type=nfs [Install] WantedBy=multi-user.target 保存文件，然后执行命令添加为系统服务
# 重载 sudo systemctl daemon-reload # 添加服务 &amp;amp; 开机自启 sudo systemctl enable --now mnt-nfs.</description>
    </item>
    
    <item>
      <title>在Debian上用Docker方式部署aria2/aria2Ng</title>
      <link>https://ruohai.wang/202410/aria2-install-on-debian/</link>
      <pubDate>Tue, 01 Oct 2024 19:10:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/aria2-install-on-debian/</guid>
      <description>前言 开篇直言，个人建议使用docker方式部署aria2/aria2ng，不要去折腾原生安装，因为原生安装和配置aria2的话实在是太麻烦了。
开箱即用的docker版aria2才是正解。
部署 选择用docker方式部署aria2，那接下去只要挑选一个合适的docker镜像版本就行了。
根据dockerhub的下载数量和star数量，这里推荐【superng6/aria2】，weiui用的是aria2ng。
这版镜像的overview页面有详细的安装步骤，这次摘录部分。我是用docker-compose方式部署，docker-compose.yml文件如下
version: &amp;#34;3.1&amp;#34; services: aria2: image: superng6/aria2:latest container_name: aria2 network_mode: host environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - SECRET=&amp;lt;your-secret&amp;gt; - CACHE=512M - PORT=6800 - WEBUI=true - WEBUI_PORT=8080 - BTPORT=32516 - UT=true - QUIET=true - SMD=true volumes: - ./config:/config - ./downloads:/downloads restart: unless-stopped 参数释疑：
PORT=6800：aria2的rpc端口 WEBUI_PORT=8080：aria2ng web ui的访问端口 BTPORT=32516：DHT和BT监听端口，如果用防火墙记得放行这个端口 更多配置项参考dockerhub页面即可。
最后就是一键安装惹
sudo docker-compose up -d 部署成功以后，打开浏览器访问http://host_ip:8080即可。
参考文章 superng6/aria2: overview 喝杯奶茶 </description>
    </item>
    
  </channel>
</rss>
