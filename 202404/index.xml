<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202404s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202404/</link>
    <description>Recent content in 202404s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 20 Apr 2024 18:02:41 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202404/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux使用badblocks扫描&amp;屏蔽硬盘坏道</title>
      <link>https://ruohai.wang/202404/badblocks-check-guide/</link>
      <pubDate>Sat, 20 Apr 2024 18:02:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/badblocks-check-guide/</guid>
      <description>前言 最近从pdd上入手了10多片拆机硬盘，都是250gb的hdd，到手以后用crystal diskinfo看了下参数，fujitsu(富士通）硬盘，sata150速率，生产日期2009。
这些硬盘应该都是从联想笔记本电脑上拆下来的，pdd商家没有做格式化只直接卖给了我这样的捡垃圾爱好者，所以在这十多片硬盘里我看到了好多原用户的各种资料，很多cad图纸、cmmb项目计划、家人旅游照片、小孩满月照片、结婚照等等，最离谱的是竟然还有gv/av。
翻阅别人的隐私内容肯定是不正确的，在正式开始扫描硬盘坏道之前，对这些硬盘做了简单格式化。
下面开始简单记录下处理硬盘坏道吧。
扫描坏道 首先用badblocks扫描硬盘，常用参数
-b, 指定磁盘区块大小，单位byte，理解为最小扫描单位 -o，指定扫描结果的输出路径 -s，检查时显示进度 -v，检查时显示详细的信息 -w，检查时执行有破坏性的写入测试，注意这个操作会破坏硬盘上的数据，请提前做好数据备份 -n，检查时执行没有破坏性的写入测试 一般情况下只需要以下命令即可，默认检查区块大小是4096bytes。
badblocks -nsv -o badblocks.log /dev/sda 如果想要指定检查区块大小，做到每一个sector应检尽检，可以用-b指定区块大小
badblocks -nsv -b 512 -o badblocks.log /dev/sda 想要知道自己的硬盘的区块大小，可以用fdisk查看
fdisk -l /dev/sda 在输出结果中可以看到硬盘的区块大小是多少
屏蔽坏道 扫描结束以后，再用e2fsck把坏道屏蔽。
e2fsck -l badblocks.log /dev/sda 这个方案比较软，就是把扫描出来的坏道数据添加到文件系统的黑名单里，适合硬盘上已经有数据的情况。
还有个方案比较硬，用badblocks往指定范围的区块上写入数据，写入失败时硬盘会自动重新映射，这个方案适合硬盘上没有数据的情况。
badblocks -wsv /dev/sda [END] [START] 注意[END]是结束区块编号，[START]是开始区块编号。
一键扫描+屏蔽 工具e2fsck也支持硬盘坏道的扫描 + 屏蔽，命令如下
e2fsck -vcc /dev/sda 参数释义：
v，显示结果 c，扫描坏道&amp;amp;屏蔽坏道 命令中有两个c，是因为archwiki的文章中提到，一个c是只有读测试，两个c是非破坏性的读&amp;amp;写测试(咦怎么让我想到了氧气姐，氧原子它是一个O&amp;hellip;)
所以上面这条命令就等于
badblocks -nsv /dev/sda &amp;amp; e2fsck -l $ /dev/sda 参考文章 ArchWiki:badblocks Linux badblocks命令 badblocks命令 – 检查磁盘装置中损坏的区块 linux修复磁盘坏道(本教程完全来自实例、实测，具体参数请根据个人情况修改) </description>
    </item>
    
    <item>
      <title>贝壳云P1刷机Armbian小白教程</title>
      <link>https://ruohai.wang/202404/beikeyun-install-armbian/</link>
      <pubDate>Thu, 18 Apr 2024 15:17:01 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/beikeyun-install-armbian/</guid>
      <description>前言 最近又双叒叕从海鲜市场入手了一个，嗷，不是一个，是入手了两个矿渣，型号是贝壳云p1，价格是两个打包120rmb。😂
它长这个样子。
正面
背面
在网上搜刷机资料的时候，发现这机器在2020年左右已经是非常热门的矿渣，因为它给了四个usb3.0 + 千兆网口，这配置在一众捡垃圾设备里完全是鹤立鸡群的存在，所以早早的就有大佬给他适配了各种固件。
设备到手依然是先刷机，这里做个简单记录。
准备工作 贝壳云p1刷机比我之前玩过的矿渣都更复杂一些，它除了需要拆机短接，还需要从主板上的usb焊盘上引出一个usb接口，要不然没法刷机。所以完整的刷机工具如下：
硬件
家用电烙铁（没有的话可以用胶布临时应急） 一根剪线的usb线缆 镊子或者回形针（用来短接） 软件
贝壳云p1的bootloader rockchip驱动程序DriverAssistant rockchip开发工具AndroidTools armbian固件，ophub/amlogic-s9xxx-armbian项目已经适配了贝壳云，可以到项目主页根据型号下载，【项目地址】 软件工具打包在文章末尾有下载连接
刷机 第一步：拆机
先抠掉背面的三个橡胶脚垫
然后卸掉三颗螺丝
然后用撬片或者手指甲解开上盖的卡扣，这里注意上盖扣的比较紧，注意巧劲
上盖可以拿起以后不要太用力，led灯的排线要解开
主板上还有一颗螺丝卸掉
到这里整个主板就可以取下来惹。
第二步：接usb线
贝壳云刷机首先要接出主板焊盘上的usb线，所以最好准备一个家用电烙铁，可以减少很多麻烦。但如果你和我一样没有家用电烙铁，但又着急想立刻刷机，那可以试试用，emmm，胶布和手。
首先要准备一根剪线的usb，里面四根线芯，黑白红绿。其中红线是usb的5v供电线。我因为是没有电烙铁而是用胶布粘的，怕供电不稳影响刷机，所以这里剪掉了红线，改用充电头dc供电。
然后根据黑-绿-白-红的线序用电烙铁焊到四个焊点上（没有电烙铁可以用胶布贴住）
第三步：安装软件
安装驱动
启动AndroidTool软件，在boot一栏中，选择rk3328_loader_v1.14.249.bin文件，在system一栏中，选择自己下载的armbian镜像文件。
第四步：开始刷机
如果usb红色线芯焊上了，操作步骤：短接——usb插电脑
如果usb红色线芯没焊，操作步骤：usb插电脑——短接——插电
短接点见图
如果你和我一样用胶布应急方案，那需要注意：
从此时开始全程需要用手按住这几根线芯，因为胶布固定不够稳定，很容易接触不良导致电脑无法识别 如果电脑提示无法正确识别usb设备或者不支持的usb设备，那说明usb线芯接触不良（尤其是白色线芯） 此时软件上会显示发现一个maskrom设备
点击【高级功能】，点击【进入maskrom】。
之后软件会显示设备重启然后红字连接失败之类，不用在意，回到【下载镜像】，点击【执行】，右侧会显示开始刷机进度。
等最后显示【下载完成】，整个刷机过程就结束惹，重新通电开机，就进入armbian系统。
软件下载 百度网盘下载连接：https://pan.baidu.com/s/1DGoQPH7VZK4YMlWw6uFQbA
提取码：gzyh</description>
    </item>
    
    <item>
      <title>私家云二代/比特米盒/CumeBox2刷机Armbian教程</title>
      <link>https://ruohai.wang/202404/cumebox2-install-armbian/</link>
      <pubDate>Mon, 15 Apr 2024 19:42:52 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/cumebox2-install-armbian/</guid>
      <description>前言 又从海鲜市场花了48rmb入手了一个矿渣盒子，或者叫轻nas盒子，名称很多，私家云二代、比特米盒、cumebox2，其实就是同一个产品，就像玩客云也被叫做赚钱宝三代。
这盒子扩展接口非常丰富，有两个a口usb2.0，一个typec，一个sd卡槽，一个hdmi，一个百兆网口，然后盒子里面还有两个2.5寸sata硬盘仓。
千万不要奢望这盒子的usb口/typec口/sata口能有高速率，都是usb2.0啦。而且网口也是百兆，就算是给usb3和sata3也是只就跑满百兆带宽10MB/s左右而已。
这个盒子都说是照抄的国外一个叫做khadas-vim1的硬件，所以khadas-vim1的armbian固件可以直接拿来用，不过khadas的固件没有适配液晶屏和散热风扇，wifi、蓝牙什么的我还没测，不清楚有没有适配。
就不多吐槽了，简单记录下这玩意怎么刷机吧。
准备工作 这个机器大概是因为可玩性太差，没有大佬给它适配一键线刷固件，所以整个刷机过程比较曲折，需要准备的软件工具比较多。
软件
amlogic usb burning bools 切换卡载系统V1.0.apk atv6.img Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img 最新的khadas-vim1-armbian镜像，下载地址：【Khadas VIM1】 我用的是当下最新的版本，Armbian_24.2.1_Khadas-vim1_bookworm_current_6.6.16_minimal.img。
打包好的软件工具在文章末尾有下载连接。
硬件
镊子（用来短接） typc数据线一根（用来线刷） 两个u盘（sd卡也可以） 开始刷机 这机器因的刷机过程分成三个阶段：
第一阶段：制作引导u盘
准备【第一个u盘】，用rufus之类软件刷入Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img这个镜像。 u盘镜像写好以后，用disk genuis或者其它支持的软件访问u盘上的文件，修改boot目录下的uEnv.ini文件，修改其中内容，将dtb/meson-gxl-s905x-khadas-vim.dtb改成dtb/meson-gxl-s905x-p212.dtb，保存退出 好了，引导u盘道这里制作完成，下文称之为【第一个u盘】。
第二阶段：准备卡刷apk和系统镜像
准备【第二个u盘】，文件系统最好是fat32，我不清楚atv6这个安卓电视系统能不能识别ntfs/exfat这俩格式。 把切换卡载系统V1.0.apk和armbian官方下载的Armbian_24.2.1_Khadas-vim1_bookworm_current_6.6.16_minimal.img镜像文件复制到u盘里。 好了，第二个u盘制作完成，下文称之为【第二个u盘】。
第三阶段：开始刷机
用镊子短接触点后，用amlogic usb burning tools线刷atv6安卓电视系统。注意事项：进入电视系统以后需要遥控器进行操作，如果没有遥控器，可以插鼠标。 短接点所在位置
短接点
盒子通电开机，进入atv安卓电视系统。 把第二个u盘插到机器上，然后在电视系统的文件浏览器中找到切换卡载系统V1.0.apk文件，点击安装。 如果你和我一样是插鼠标操作，记得安装完apk以后不要点done，因为鼠标没法返回上一级，请点击open，会出现弹窗让选择老司机还是新司机，到这个界面后暂停操作。 拔掉第二个u盘，插上第一个u盘，然后点击上一步的弹窗，选择新司机 出现弹窗申请root权限，选择永久授权。盒子会自动重启，进入u盘上的ubuntu系统 在路由器管理后台中找到盒子的ip，名称应该是aml，然后ssh连上去，账户root，密码1234，连上以后进行简单的初始化配置 再插上第二个u盘，把u盘挂载到系统 用dd命令把armbian的镜像文件写入到emmc。 dd if=/mnt/Armbian_24.2.1_Khadas-vim1_bookworm_current_6.6.16_minimal.img of=/dev/mmcblk1 dd命令执行完成后，拔掉全部u盘，拔电重启，就进入armbian系统惹。 刷机软件下载 百度网盘：https://pan.baidu.com/s/1mOk0h1zT2oJSoGlFcfYmZA 提取码：5mk0</description>
    </item>
    
    <item>
      <title>Cloudflare Tunnels服务增强可用性和容错率</title>
      <link>https://ruohai.wang/202404/cloudflared-enhance-availability-and-failover/</link>
      <pubDate>Fri, 05 Apr 2024 22:30:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/cloudflared-enhance-availability-and-failover/</guid>
      <description>前言 cloudflare公司提供了tunnels服务可以实现内网穿透，而且非常良心的免费版本就已经足够用来对外弄个小网站。
但是免费的服务总是有代价，比如不保证稳定性。我就经常看到自己的tunnels服务显示DEGRADE甚至DOWN，但半分钟左右又会很快恢复到HEALTHY，我只能理解为cloudflare官方需要不定期重置链接来保证服务可用吧（😅
因为我有三个服务挂在tunnel上，所以有了花钱保稳定的想法。到官网查了下价格，emm，🤔
英文版的对比不太看得出来付费版本的优势，所以我找了官网中文的付费套餐对比。
可以看到7刀/月的订阅计划中包含了100%正常运行时间SLA。
$7/mo，换算成人民币的话50rmb/mo，一年就是600rmb，啧，我不禁倒吸一口冷气。这个费用，我还不如直接买国外的vps，或者买阿里云的99rmb/y的ecs然后用frp做内网穿透。
被价格吓退以后，顺便看了官网的tunnels服务的手册，想不到有专门一节提到【Tunnel availability and failover】，讲如何提到tunnels服务的可用性和容错率。
英文阅读无障碍的话，可以直接看官网。我这里只做简单的转译和操作记录。
方案 手册里提到的提高可用性的方案有两种，方案一免费，就是堆cloudflared实例，方案二收费，用官方提供的负载平衡（load balanecer)服务。
方案一：创建多个cloudflared副本
一个tunnle可以对应多个cloudflared实例，所以只需要多装几个cloudflared就行了。
那想要多装几个cloudflared，有俩方案，如果只有一个主机（host），可以用docker部署多个容器，如果有多个主机，那每个主机上都安装一遍cloudflared即可。
多个cloudflared实例之间调用的优先级，官方的策略是：优先选择地理位置最近的实例，如果无法获取地理位置或者请求失败，再尝试另一个实例。
这个方案的好处是：免费。我用的是这个方案，一个tunnel跑了三个cloudflared实例来保证可用性。😂
方案二：负载均衡
这个方案付费，最少2个源服务器，保底$5/mo，前50w次查询免费，超过这个数量额外收费。
具体的配置方法直接看官网手册吧，我没用这方案，所以无法给出步骤。</description>
    </item>
    
  </channel>
</rss>
