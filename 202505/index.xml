<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202505s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202505/</link>
    <description>Recent content in 202505s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 May 2025 15:50:26 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202505/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>飞牛fnOS下DLNA服务的防火墙设置</title>
      <link>https://ruohai.wang/202505/fnos-minidlna-filewall-setting/</link>
      <pubDate>Thu, 22 May 2025 15:50:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202505/fnos-minidlna-filewall-setting/</guid>
      <description>前言 之前我在debian基础上手搓minidlna服务，只需要在ufw中显式添加一条ufw allow proto tcp from 192.168.1.0/24 to any port 8200后，局域网内的设备（比如windows电脑文件管理器、安卓手机上的vlc软件中）都会自动出现dlna服务。
但是在fnos中，如果防火墙设置如下：
不勾选【局域网：默认允许访问】 不匹配入站规时禁止访问 然后新增一个DLNA默认端口8200的放行规则 理论上应该和debian + ufw + dlna这套手搓方案一样，局域网的机器就可以收到dlna服务了。
但实际上局域网内设备无法收到dlna的服务，或者严谨一点说，没有收到dlna的广播。
所以很长一段时间我都在pve上弄了一个单独的vm跑minidlna，而不是把dlna服务整合到fnos上。
不过，昨天把这个问题请教了ai以后，终于知道原因了。
问题原因 简单来讲，dlna除了用到8200/tcp，还需要用到1900/udp，所以只放行8200/tcp是不行的。
以下是ai提供的回答（其中48200端口是我自定义的dlna端口号）
到这里，又会出现第二个问题：
那为什么用debian + ufw的时候，只需要放行8200/tcp就可以了，在fnos下却还需要显示声明1900/udp呢？
答案是ufw默认会允许局域网流量！
以下是ai提供的表格
所以，最后的解决方案，就是在fnos的防火墙入站规则中，添加一条1900/udp即可。
🎉
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在飞牛fnOS上手动进行文件完整性校验</title>
      <link>https://ruohai.wang/202505/check-data-consistency/</link>
      <pubDate>Wed, 14 May 2025 00:03:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202505/check-data-consistency/</guid>
      <description>前言 玩过群晖的朋友都知道群晖的存储池在创建和使用的过程中经常能看到正在校验文件的一致性这个提示，虽然不知道底层原理但看着就让人很安心，让用户觉得文件绝对不会损坏。
fnos的存储空间的实现方案和群晖一样，都是mdadm + lvm + btrfs，但是fnos的存储空间在创建和使用的过程中，完全看不到校验文件一致性的提示。这不由得让我担心我的文件是否会出现什么宇宙射线引起的比特翻转但系统又没有定期做scrub导致文件损坏。
那fnos到底有没有进行文件一致性校验，我不知道。
但是我们可以手动进行文件校验。
文件校验 fnos的存储空间实现方案是mdadm + lvm + btfs，在2025年5月的更新中加入了ext4的支持，但我这里依然以btrfs为例。
要进行的文件校验分成两个部分：raid阵列的一致性校验 &amp;amp; 文件数据的一致性校验。
以下由ai提供的图表
那接下去就手动开始进行文件校验吧。
btrfs
以fnos的存储空间为例，一般挂载点都是/vol1，那btrfs的文件校验是以挂载点为目标
# 对存储空间1启动文件校验 sudo btrfs scrub start /vol1 # 查看校验的进度 sudo btrfs scrub status /vol1 校验完整后，可以看到输出结果如下
UUID: 6412be10-xxxx-xxxx-xxxx-xxxxxxxxxxxx Scrub started: Tue May 13 23:22:05 2025 Status: finished Duration: 1:15:23 Total to scrub: 514.29GiB Rate: 116.43MiB/s Error summary: no errors found mdadm
先确认系统的阵列状态
cat /proc/mdstat 输出结果示意如下
Personalities : [raid6] [raid5] [raid4] [raid1] [linear] [raid0] [raid10] md1 : active raid1 sde1[0] 156156928 blocks super 1.</description>
    </item>
    
  </channel>
</rss>
