<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202409s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202409/</link>
    <description>Recent content in 202409s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Sep 2024 11:43:53 +0800</lastBuildDate><atom:link href="https://ruohai.wang/202409/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Debian上部署和使用v2rayA &amp; 一些注意事项</title>
      <link>https://ruohai.wang/202409/v2raya-install-on-debian/</link>
      <pubDate>Sun, 29 Sep 2024 11:43:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/v2raya-install-on-debian/</guid>
      <description>前言 v2raya是一个使用web gui来配置v2ray的客户端，方便好用，特别适合没有图形界面的linux server系统。
之前已经写过一篇在debian上部署和配置的文章，但时间久远也懒得修修补补，直接重新写一篇。
安装 在debian系linux上安装，个人建议使用apt软件源安装。
# 添加公钥 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc # 添加软件源 echo &amp;#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&amp;#34; | sudo tee /etc/apt/sources.list.d/v2raya.list # 更新 sudo apt update # 安装 sudo apt install v2raya v2ray 到这里就完成了v2raya的安装，🎉
配置 v2raya服务配置
如果不需要做自定义调整，用默认配置启动v2raya，执行以下命令
## 启动 &amp;amp; 设置开机自启 sudo systemctl enable --now v2raya.service 启动成功后，默认端口是2017，打开浏览器，访问http://host_ip:2017。首次登录需要创建用户。
添加节点 &amp;amp; 导入订阅这些不再赘述，想必对于这些基本操作你已经具有丰富的经验。
v2raya服务的配置文件路径在/etc/default/v2raya，可以调整web ui的默认端口、log目录、bin目录等各项内容。
注意事项 v2ray-core VS xray-core
推荐使用v2ray而不是xray，apt软件仓库的xray至今（2024年9月）还不支持负载均衡，也就是基于最小ping值择优选取线路的功能只有v2ray-core支持。
本机代理 VS 局域网路由
【透明代理/系统代理】这个配置是用来对【本机】的网络进行代理，而【规则端口的分流模式】这个选项是用来当作局域网的路由。
搞清楚以上这点，就不会和我犯一样的错，开启了【系统代理】的同时还在同一台机器上装qbittorrent挂下载，导致所有bt流量都走代理让v2raya的资源占用飙升。</description>
    </item>
    
    <item>
      <title>Windows下删除桌面右键菜单中的AMD Software: Adrenalin Edition选项</title>
      <link>https://ruohai.wang/202409/windows-remove-amd-software-from-right-click-context-menu/</link>
      <pubDate>Thu, 19 Sep 2024 02:03:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/windows-remove-amd-software-from-right-click-context-menu/</guid>
      <description>前言 最近从使用的pc从intel换成了amd，发现桌面右键菜单中多出了一个AMD Software: Adrenalin Edition选项。
这个选项如果只是名字很长的话我也不会太在意，但是它会导致windows系统启动进入桌面以后，首次点出右键菜单时大大增加弹出时间，也就是点击右键以后要等好几秒才弹出菜单，这是我忍不了的，所以就想着找找方法把这个选项从右键菜单里删掉。
一开始尝试用ccleaner软件来管理右键菜单，发现ccleaner的右键菜单管理中压根就没有这个amd的选项。
所以最后用了网上找到的编辑注册表的方法，实测有效。
删除方法 打开注册表，定位到\HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\ACE
将右边栏中的默认项目直接右键删除。
删除后回到桌面，再次右键单击，可以看到amd software的选项已经删除。
参考文章 Win10怎么删除右键菜单AMD显卡选项？删除鼠标右键菜单AMD选项方法 remove amd software from right click context menu Win10 移除右键菜单 AMD Software 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用Docker方式部署rss feed生成器RSSHub</title>
      <link>https://ruohai.wang/202409/rsshub-install-docker-guide/</link>
      <pubDate>Sun, 08 Sep 2024 18:16:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/rsshub-install-docker-guide/</guid>
      <description>前言 rsshub是一个rss feed生成器，这点首先要理解，它不是rss feed订阅器或者rss阅读器，它是一个用来生成rss feed的工具。现在很多网站、社区、博客之类都已经不支持rss订阅，或者很多想订阅的自定义的内容（比如某个twitter用户），这时候就可以使用rsshub来生成rss feed，然后用rss订阅器来订阅这个feed就可以了。
在部署之前的一点个人经验和建议：最好弄个海外的vps或者能实现全局代理的机器来部署rsshub，因为要用rsshub来生成rss feed，首先rsshub能访问到那个网站吧，要不然一直报dial tcp io timeout就很尴尬。
部署 rsshub原生部署需要用到nodejs，我讨厌nodejs，所以选择用docker-compose方式部署。
用docker-compose方式部署，只需要搞定docker-compose.yml这个配置文件就行了。rsshub的【官方文档】也给出了配置模板，直接下载模板即可。
这是rsshub官方提供的docker-compose.yml文件（2024/09/08）。
services: rsshub: # two ways to enable puppeteer: # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled # * (consumes more disk space and memory) leave everything unchanged image: diygod/rsshub restart: always ports: - &amp;#34;1200:1200&amp;#34; environment: NODE_ENV: production CACHE_TYPE: redis REDIS_URL: &amp;#34;redis://redis:6379/&amp;#34; PUPPETEER_WS_ENDPOINT: &amp;#34;ws://browserless:3000&amp;#34; # marked healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;curl&amp;#34;, &amp;#34;-f&amp;#34;, &amp;#34;http://localhost:1200/healthz&amp;#34;] interval: 30s timeout: 10s retries: 3 depends_on: - redis - browserless # marked browserless: # marked image: browserless/chrome # marked restart: always # marked ulimits: # marked core: # marked hard: 0 # marked soft: 0 # marked healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;curl&amp;#34;, &amp;#34;-f&amp;#34;, &amp;#34;http://localhost:3000/pressure&amp;#34;] interval: 30s timeout: 10s retries: 3 redis: image: redis:alpine restart: always volumes: - redis-data:/data healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;redis-cli&amp;#34;, &amp;#34;ping&amp;#34;] interval: 30s timeout: 10s retries: 5 start_period: 5s volumes: redis-data: 根据文档可以确定rsshub需要用到3个镜像：rsshub本体 + redis + 浏览器，其中chrome镜像大概需要占用4GB的存储空间，请提前规划。其实整个模板里基本已经没有需要修改的地方了，直接docker-compose up -d就可以把服务拉起来使用。唯二需要修改的地方，一个可能是rsshub的port根据自己需求调整，另一个是redis-data这个数据保存路径，也是根据自己需求调整。</description>
    </item>
    
    <item>
      <title>使用Picgo上传文件到MinIO</title>
      <link>https://ruohai.wang/202409/picgo-plugin-for-minio/</link>
      <pubDate>Fri, 06 Sep 2024 21:08:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/picgo-plugin-for-minio/</guid>
      <description>前言 上一篇文章中完成了minio的部署和存储桶的创建，接下来就简单记录下用picgo作为客户端往minio传文件吧。
我这里用的词是【传文件】而不是【传图片】，因为minio是一个oss服务，它可以保存任何格式的文件。而picgo虽然定位是一个【图片上传】软件，但实际它并不会限制文件格式，因为文件格式的校验是由【服务端的图床程序】来完成的。
所以picgo + minio的组合，就可以当作一个【文件上传客户端 + 文件存储服务器】来使用。
配置 第一步：在minio中创建 access key
要开启minio的api上传功能，首先要在minio配置一个access key。
创建access key以后记得保存key和secret信息，因为minio只会展示一次secret。
第二步：在picgo中安装minio插件
picgo中安装插件需要本地有nodejs环境，自行安装即可，不在赘述。
在picgo硬件内的插件设置中，搜索minio，安装红色icon的这个插件。
插件安装号以后，在【图床设置】中进行配置
第三步：图床配置
每一个配置项的具体意思，可以查看插件【picgo-plugin-minio】在github项目主页的介绍。
也可以参考网友Gzzz制作的图表
完成配置后保存即可。
到这里所有配置都完成了，🎉
参考文章 使用 MinIO+PicGo 在服务器搭建图床 使用Minio与Picgo搭建个人图床 Herbertzz/picgo-plugin-minio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用MinIO自建OSS服务</title>
      <link>https://ruohai.wang/202409/minio-install-guide/</link>
      <pubDate>Fri, 06 Sep 2024 09:20:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/minio-install-guide/</guid>
      <description>前言 minio是一个对象存储方案（oss），一般都是公司企业之类的商业用途，个人用到的场景很少🤣，不过我还是找到了一个对我来说可以使用的场景，那就是用来做自建图床！
话不多说，记录以下minio的部署。我用的部署方式是下载已经编译好的二进制包，没有选择docker部署是因为我用来做host的机器是迅雷赚钱宝一代，系统是3.10内核的openwrt，用不了docker。
注意事项 minio从2022年开始，存储文件的方式就采用了纠删码格式，说人话就是上传的文件不再保留原格式，在文件系统里看到的是文件夹 + xl.meta文件。
如果需要获取源文件，必需要通过api或者web后台下载。
这个设计可以理解，minio毕竟是为了分布式存储设计的，纠删码可以理解为一种文件分片算法，类似raid但是比raid更先进，但缺点就是不适合个人用户。所以用minio来搭建图床服务就像杀鸡用牛刀，请根据自己的使用场景谨慎选择。
部署 第一步：安装
首先到【minio下载页面】找到对应自己硬件架构的二进制包，我的硬件是arm32/armv7，所以文件路径是/server/minio/release/linux-arm/minio。
用wget下载到本地后记得添加可执行权限
# 下载 wget -O minio https://dl.min.io/server/minio/release/linux-arm/minio # 添加可执行权限 chmod + x minio 第二步：启动
作为一个oss服务，肯定需要指定用来保存文件的路径了，所以最简单的启动命令如下
./minio server /path/to/save/data minio的默认监听端口是9000，启动成功以后可以打开浏览器访问http://host_ip:9000就进入minio的web控制台 了，默认账户名和密码都是minioadmin。
如果要指定端口号，启动命令添加--address参数即可。
./minio server --address=:12345 /path/to/save/data 这里有一个注意事项，minio区分了api的端口和web控制台的端口，默认的9000端口，或者在启动命令中指定的端口号，其实都是api端口。在浏览器中访问api端口时会自动跳转到webui的端口，如果装了防火墙的话记得放行端口。
如果要指定配置文件目录，在启动命令中添加--config-dir参数
./minio server --address=:12345 --config-dir /path/to/config /path/to/save/data 第三步：修改默认账户密码
从服务的启动日志中可以看到默认的账户密码都是minioadmin，而且会有黄字提醒修改账户密码。
修改密码的方式是在用户环境变量中添加两个参数MINIO_ROOT_USER和MINIO_ROOT_PASSWORD。根据自己的情况，在~/.bashrc或者/etc/profile中添加两行。
export MINIO_ACCESS_KEY=jackma export MINIO_SECRET_KEY=1234567890 编辑保存后，记得重新加载配置文件使配置生效
# 根据自己情况二选一 source .bashrc source /etc/profile 第四步：创建存储桶并配置匿名权限
创建存储桶
命名后确定即可。下面三个开关分别指版本控制、文件锁定、数量限制，根据自己需求选择是否启用。
创建的存储桶默认是私有private权限。如果要用作图床，也就意味着匿名访客需要有只读权限。
点击要编辑权限的桶，这里以2024为例。这里千万要注意，不是直接把bucket从private改成public，而是在Anonymous/匿名用户标签页进行修改。
点击Anonymous后点击add access rule添加规则
在prefix一栏输入/（斜杠的意思是所有规则中优先级最高），access一栏选择readonly即可，然后保存。
第五步：编辑systemd/sysvint服务文件
systemd的配置文件</description>
    </item>
    
    <item>
      <title>用Docker方式部署轻量RSS阅读器Miniflux</title>
      <link>https://ruohai.wang/202409/miniflux-install-guide/</link>
      <pubDate>Fri, 06 Sep 2024 00:33:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/miniflux-install-guide/</guid>
      <description>前言 最近准备自建一个rss阅读器（被互联网大厂的网络服务背刺过几次以后，我已经倾向于能自建的服务都自建）。
上一次使用rss阅读器可能还得追溯到10多年前的google reader，自从google突然宣布关闭reader服务以后，我也就在没有用过rss阅读器。而且这些年的互联网发展趋势，确实是从开放走向封闭，博客由盛而衰，内容社区也是往往是限制必须注册登录后内容可见，更有甚者甚至都不对搜索引擎开放收录，大搞私域流量。
回到正题，这次是要自建一个rss阅读器服务。首先是了解了以下现在可选的自建rss阅读起服务有哪些。这里看到【这篇博客】整理的表格。
我最后选择的是miniflux有两个原因，其一是考虑到资源占用，因为我可能需要把服务部署到性能孱弱的arm盒子上，其二是前两个服务用的都是php方案，我对php不熟，虽然都支持docker一键部署，但考虑到如果原生部署，miniflux只需要一个预编译的go二进制包就行了。
部署 miniflux官方的文档提供了部署教程，英语阅读没有障碍的话可以直接看官方文档。
我选择了docker-compose部署，所以非常简单，只需要准备一份docker-compose.yml文件即可。miniflux官方文档里已经提供了docker-compose.yml的模板，只需要根据自己的需求调整一些配置即可。
以下是官网模板在2024/09/06提供的模板，模板具有时效性，请留意官网模板可能会有更新变动。
services: miniflux: image: miniflux/miniflux:latest ports: - &amp;#34;80:8080&amp;#34; depends_on: db: condition: service_healthy environment: - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable - RUN_MIGRATIONS=1 - CREATE_ADMIN=1 - ADMIN_USERNAME=admin - ADMIN_PASSWORD=test123 db: image: postgres:15 environment: - POSTGRES_USER=miniflux - POSTGRES_PASSWORD=secret - POSTGRES_DB=miniflux volumes: - miniflux-db:/var/lib/postgresql/data healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;pg_isready&amp;#34;, &amp;#34;-U&amp;#34;, &amp;#34;miniflux&amp;#34;] interval: 10s start_period: 30s volumes: miniflux-db: 从yml文件中可以看到需要安装两个服务，一个是miniflux本体，另一个是数据库postgres。实测amd64版本的两个服务的镜像占用大概500MB的存储空间。
根据自己的需求，我对配置模板做了简单调整，调整的内容做了注释
services: miniflux: image: miniflux/miniflux:latest container_name: miniflux # 指定容器名称 user: 1000:1000 # 这里指定用非root账户运行容器 restart: always # 增加重启策略 ports: - &amp;#34;80:8080&amp;#34; # 指定端口以后记得防火墙放行 depends_on: db: condition: service_healthy environment: - DATABASE_URL=postgres://miniflux:123456@db/miniflux?</description>
    </item>
    
    <item>
      <title>杭州桐庐雅鲁漂流景区简单点评</title>
      <link>https://ruohai.wang/202409/trip-to-yalu-drift/</link>
      <pubDate>Mon, 02 Sep 2024 13:18:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/trip-to-yalu-drift/</guid>
      <description>总结 费用198rmb，水质不干净是黄泥水，排队时间太久，加上往返的高速过路费，最后人均大概250rmb（不包含餐饮）。漂流很刺激，但考虑到费用和排队体验的话，性价比不高。
简评：
票价188rmb，接驳车10rmb，合计就是198rmb。 周末或者节假日人多的时候排队等接驳车上山要40分钟~1个小时，候车厅没有开空调只有吊扇，会很热。如果不想受这份苦，可以找工作人员买vip服务，50rmb一人私家车送上山。 整个漂流大概需要1~1.5小时，整个漂流溪道的设计是急坡——休息——急坡——休息，在休息区可以购买水瓢、水枪、面罩，也有卖小吃烤肠补充体力。 水瓢、水枪之类可以提前在外面买好带进去，景区的东西都贵的要死。 景区有免费的浴室，漂流结束可以冲洗干净，记得带上换洗衣服。 雅鲁漂流的水质受天气影响很大，我们去的时候说前几天下过雨，所以水质看着是黄泥水，不干净。 流水账 昨天（周日）和朋友去了一趟杭州雅鲁漂流玩水。这个夏天杭州高温酷暑，一直想着出去玩水，但各种原因到秋天了才终于成行。
杭州周边的临安、桐庐有非常多的漂流景点，也没有太多兴趣挑选哪个更好玩，所以从网上随便找了个漂流排行榜，最后和朋友选择了排行第三的雅鲁漂流。
开车1个多小时到了景区，首先面对的问题就是排队等接驳车上山。候车区人员密集，我们排队的时候只有大吊扇而没开空调，实在是闷热。排队大概需要40分钟~1个小时。
上山以后穿号救生衣戴好安全帽就等开始等船，这时候就能看到溪水的水质了。当天的水质看着是个黄泥水，好像是因为前两天刚下过雨，😫。
不过这么大老远，来都来了，门票也买了，还是得玩起来。
整个漂流大概持续1~1.5个小时，中途会有缓流休息区，有小吃零食烤肠可以补充体力。
返程的时候路过天目溪上的一个湿地公园，景色不错，有个观鸟台可以停车。
喝杯奶茶 </description>
    </item>
    
  </channel>
</rss>
