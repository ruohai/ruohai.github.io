<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 限盐少许</title>
    <link>https://ruohai.wang/posts/</link>
    <description>Recent content in Posts on 限盐少许</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Jul 2023 23:35:17 +0800</lastBuildDate><atom:link href="https://ruohai.wang/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux下安装qBittorrent</title>
      <link>https://ruohai.wang/posts/install-qbit/</link>
      <pubDate>Fri, 14 Jul 2023 23:35:17 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/install-qbit/</guid>
      <description>debian仓库里qbit有俩版本，一个qbittorrent，另一个qbittorrent-nox。前者带qt5编写的gui，后者没有gui只有webui。我是在玩客云的小机器上装，不需要gui，所以这里选qbittorrent-nox。
apt install qbittorrent-nox 安装完成后，直接用守护线程模式启动。
qbittorrent-nox -d 默认端口8080，打开浏览器，访问http://host_ip:8080，默认用户admin，默认密码adminadmin，就可以开始使用了。
也可以把qbit添加到systemd服务并设置开机自启，这样就不需要再每次敲命令启动。
第一步：在/etc/systemd/system/目录下新建文件qbittorrent.service，把下面内容复制进去，保存退出。注意User一栏的值是指定运行qbit任务的用户，需要根据自己的情况修改。
[Unit] Description=qBittorrent Daemon Service After=network.target [Service] User=Jack ExecStart=/usr/bin/qbittorrent-nox ExecStop=/usr/bin/killall -w qbittorrent-nox [Install] WantedBy=multi-user.target 第二部：添加systemd服务的三条命令。
# 服务重载 systemctl daemon-reload # 启动服务(如果已经启动qbit，这一步可以跳过） systemctl start qbittorrent.service # 添加为开机自启 systemctl enable qbittorrent.service </description>
    </item>
    
    <item>
      <title>Linux下自定义主机名称（hostname）</title>
      <link>https://ruohai.wang/posts/change-hostname/</link>
      <pubDate>Fri, 14 Jul 2023 23:28:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/change-hostname/</guid>
      <description>查看当前的主机名
hostname 或者
hostnamectl 图方便可以用一条命令修改，这条命令修改的是/etc/hostname文件。退出重新登录以后就可以看到是新的主机名
hostnamectl set-hostname [newname] 严谨一些可以修改/etc/hosts，但上面这个操作后我的目的已经完成，所以这里不做记录。😄</description>
    </item>
    
    <item>
      <title>Linux下设置静态IP（固定IP）</title>
      <link>https://ruohai.wang/posts/static-ip-address-config/</link>
      <pubDate>Fri, 14 Jul 2023 23:23:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/static-ip-address-config/</guid>
      <description>先查看自己设备的网卡名称
ifconfig 如果提示命令不存在，则先安装net-tools
apt install net-tools 获取到网卡名称后，在/etc/network/interfaces文件中进行编辑。子网掩码、网关地址、dns地址可以根据自己的实际网络情况进行调整。完成编辑以后保存退出。
# 开机自动启用eth0 auto eth0 # 使用静态ip iface eth0 inet static # ip地址 address 192.168.1.4 # 子网掩码 netmask 255.255.255.0 # 网关地址 gateway 192.168.1.1 # dns服务器 dns-nameservers 192.168.1.1 重启网络
service network restart 或者
systemctl restart network 如果以上两个命令都提示无效，直接重启吧。😄</description>
    </item>
    
    <item>
      <title>Linux下安装Docker Engine</title>
      <link>https://ruohai.wang/posts/install-docker-engine/</link>
      <pubDate>Fri, 14 Jul 2023 23:20:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/install-docker-engine/</guid>
      <description>在linux上安装docker，官方有详细的教程指导如何安装。但如果你和我一样用的linux发行版是debian以及debian的衍生发行版，可以直接用debian官方维护的docker.io。
apt install docker.io docker官方把docker.io称为unofficial packages非官方的版本。
因为docker.io是debian在维护而不是docker官方，而且2019年的时候曾经停止维护了1年导致版本落后太多。但现在不用担心docker.io版本问题，目前仓库里已经是20.10.24。</description>
    </item>
    
    <item>
      <title>Linux下添加自定义alias</title>
      <link>https://ruohai.wang/posts/add-alias/</link>
      <pubDate>Fri, 14 Jul 2023 23:14:36 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/add-alias/</guid>
      <description>linux下添加自定义alias，编辑的文件位置有俩地方，全局（对所有用户生效）生效是/etc/bash.bashrc，对当前用户生效是~/.bashrc。
这里以仅针对单个用户进行配置为例。
nano ~/.bashrc 在最底下添加一行
alias ll=&amp;#39;ls -l&amp;#39; 保存，然后用source命令使生效
source ~/.bashrc </description>
    </item>
    
    <item>
      <title>玩客云可用Armbian和openWRT固件分享</title>
      <link>https://ruohai.wang/posts/wky-fireware-share/</link>
      <pubDate>Fri, 14 Jul 2023 23:07:44 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/wky-fireware-share/</guid>
      <description>玩客云，还有好多名字：赚钱宝、老母鸡、网心云，这里都指型号ws1608的那个小机器。
这机器现在pdd、闲鱼上的价格稳定在30rmb左右，但闲鱼上都要求10个起包邮，咱也不是矿场，买一两个回来玩玩就够了，所以我更推荐从pdd入手。
这机器玩了几个星期，目前来看，就能刷俩固件。第一刷armbian，然后根据自己需要手搓各种服务（file browser/qbittorrent/samba/alist/ddns-go/docker/typecho/cups/home assistant/&amp;hellip;），或者装casaos这种打包好各种服务的轻系统。第二刷openwrt当旁路由。也有很多人在armbian基础上再装openmediavault，但我根据omv官方的文档尝试了几次，不管是6.1内核还是5.9内核的固件，都没成功。
玩这种小设备肯定得去恩山论坛了，但论坛这种资源分享模式实在是太old school了，我不太喜欢，因为找资源太累。所以这里直接分享我用下来非常稳定的armbian和openwrt的两个固件下载地址。
armbian固件地址:https://github.com/hzyitc/armbian-onecloud
这个repo是根据上游armbian/build编译的玩客云专用固件。这里重点说下，固件名称中带burn字样的是线刷版本，刷入机内emmc；带minimal字样的是精简版。我用下来非常稳定。
openwrt固件地址：https://cloud.189.cn/t/rAv6v2ENnmAn （访问码：6hhb）
这个是恩山论坛里id:2224758988的用户分享的版本，我短暂体验了几天，也很稳定。如果上面这个链接失效，可以去【原帖地址】这里找。我对旁路由这种使用模式并不是很满意，所以用了几天以后就撤掉了。</description>
    </item>
    
    <item>
      <title>Linux下安装File Browser</title>
      <link>https://ruohai.wang/posts/filebrowser-setup/</link>
      <pubDate>Fri, 14 Jul 2023 23:00:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/filebrowser-setup/</guid>
      <description>第一步：新建安装目录
mkdir /usr/local/filebrowser 第二步：根据自己的硬件平台从【官方github repo】下载对应版本的安装包，这里以armv7为例。
# 进入安装文件夹 cd /usr/local/filebrowser # 下载安装包 wget https://github.com/filebrowser/filebrowser/releases/download/v2.23.0/linux-armv7-filebrowser.tar.gz # 解压 tar -zxvf linux-armv7-filebrowser.tar.gz 第三步：在安装目录/usr/local/filebrowser下新建config.json，添加配置信息。
# 创建配置文件 nano /usr/local/filebrowser/config.json 添加以下内容。其中root参数用来指定fireborwser展示的根目录，比如设定为/home，则webui中只能看到/home目录下的内容。
{ &amp;#34;port&amp;#34;: 8600, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/usr/local/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/var/log/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 第四步：把filebrowser添加到systemd服务。
# 创建配置文件 nano /etc/systemd/system/filebrowser.service 添加如下内容后保存退出。
[Unit] Description=The filebrowser Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/filebrowser/filebrowser -c /usr/local/filebrowser/config.json ExecStop=/bin/killall filebrowser PrivateTmp=true [Install] WantedBy=multi-user.target 第五步：systemd重载服务并设置开机启动
# 重载服务 systemctl daemon-reload # 启动filebrowser systemctl start filebrowser.service # 设置开机启动 systemctl enable filebrowser.</description>
    </item>
    
    <item>
      <title>Linux下Bash Shell开启命令自动补全</title>
      <link>https://ruohai.wang/posts/bash-completion-setup/</link>
      <pubDate>Fri, 14 Jul 2023 22:51:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/bash-completion-setup/</guid>
      <description>如果只是对单个用户生效，那下文中的/etc/bash.bashrc都要调整为~/.bashrc。
第一步：安装bash-completion。
apt install bash-completion 第二步：查看/etc/bash.bashrc文件中是否适配。
# 打开bash的用户配置文件 nano /etc/bash.bashrc 查看是否有下面这段内容，如果没有就添加到最后，保存退出。这段代码的意思是判断系统是否安装了bash_completion，如果安装则启用自动补全功能。
if ! shopt -oq posix; then if [ -f /usr/share/bash-completion/bash_completion ]; then . /usr/share/bash-completion/bash_completion elif [ -f /etc/bash_completion ]; then . /etc/bash_completion fi fi 第三步：重新加载用户的bash配置信息。
source /etc/bash.bashrc </description>
    </item>
    
    <item>
      <title>Linux下修改ssh默认端口</title>
      <link>https://ruohai.wang/posts/set-new-ssh-port/</link>
      <pubDate>Fri, 14 Jul 2023 22:28:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/set-new-ssh-port/</guid>
      <description>前言 这是一篇从搬瓦工vps的typecho搬过来的文章。对内容和格式做了轻微调整。
写这篇文章是因为前两天想动手改linux主机的默认ssh端口，但发现无论怎么改sshd_config文件都无济于事。简中互联网上以关键字ssh、修改端口之类搜出来的文章都千篇一律，再搜端口修改以后无效，出来的内容都说因为selinux。我就在这这个错误的方向上折腾了好久，但实际我的主机压根就没开启selinux。
最后用google搜英文关键字，才找到原因：systemd环境下ssh分为ssh.socket和ssh.service，这俩不同服务的配置文件完全不同。而较新的debian/ubuntu系统用的是ssh.socket。
找到问题原因以后就很好解决了，这里做简单记录。
查看ssh服务类型 要修改ssh默认端口，首先要分清楚自己linux机器的ssh是ssh.socket还是ssh.service。
systemctl status sshd 根据图中出现的ssh.socket字样区分。 ssh.service ssh.service的端口修改很简单，打开配置文件
nano /etc/ssh/sshd_config 找到port的配置进行修改
# 找到这条，默认是注释掉的，这里去掉注释 Port 22 # 添加一行自定义的端口 Port 12345 然后重启ssh服务即可
systemctl restart sshd 测试新端口OK以后，再注释掉旧端口然后重启sshd即可。
ssh.socket ssh.socket配置文件在/lib/systemd/system/ssh.socket，但我建议你千万不要去动原始文件。首先是这个配置文件会在更新openssh的时候被覆盖掉，其次在ssh.socket运行状态下修改配置文件，会导致ssh.socket服务出现异常（停止工作而且无法接受新的连接）。所以正确的配置方式如下
# 新建配置文件目录 mkdir -p /etc/systemd/system/ssh.socket.d 新建配置文件并写入监听端口信息
cat &amp;gt;/etc/systemd/system/ssh.socket.d/listen.conf &amp;lt;&amp;lt;EOF [Socket] # 这一栏需要保留，用来覆盖原配置文件中的22端口 ListenStream= # 这一栏填写新的ssh端口 ListenStream=1234 EOF 最后就是systemd重载服务并重启ssh了。
# 重载服务 systemctl daemon-reload # 重启ssh systemctl restart ssh 这个配置方法的参考来源：
https://askubuntu.com/questions/1439461/ssh-default-port-not-changing-ubuntu-22-10 https://discourse.ubuntu.com/t/sshd-now-uses-socket-based-activation-ubuntu-22-10-and-later/30189/6 从ssh.socket切换到ssh.service 讲真，我虽然已经掌握在ssh.socket模式下配置新端口的方法，但实际操作过程中还是碰到了ssh.socket异常的问题。那不如直接从ssh.socket切换到ssh.service吧！
# 禁用ssh.socket服务 systemctl disable --now ssh.socket # 启用ssh.</description>
    </item>
    
    <item>
      <title>Linux下用Hugo搭建博客并部署到Github Pages</title>
      <link>https://ruohai.wang/posts/hugo-setup-and-deploy-to-github/</link>
      <pubDate>Fri, 14 Jul 2023 15:15:15 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/hugo-setup-and-deploy-to-github/</guid>
      <description>前言 手上好几台armv7平台的电子垃圾，没错说的就是迅雷赚钱宝二代（ws1508）和迅雷玩客云（ws1608）。总琢磨着让这些电子垃圾在它们的生命末期发挥最后的光和热，给它们刷armbian、刷openwrt。正好我的搬瓦工vps还剩半个月要到期了，49.99刀/年的费用，对于现在的我也算是一笔不小的支出。能省则省，所以准备博客搬家。有很多捡垃圾玩家会把博客跑在自己的arm小主机上，但国内的网络环境下，自建服务器的备案和80/443端口解封根本无解，只能做到url:port进行公网访问，但这纯粹就是自娱自乐嘛。最后还是决定把博客部署到免费的github pages。
既然要用github pages，那只能用静态博客，无论是hexo、hugo还是jekyll，都需要一个本地的编译环境。既然如此，正好尝试一下在赚钱宝二代（ws1508）这台设备上安装hugo。
玩客云（ws1608）和赚钱宝二代（ws1508）主要硬件配置上一模一样，同样适用这个教程。
其实全平台都适用这个教程，只需要把apt install换成自己系统的版本就行了。
前期准备 一台功能正常的电脑/主机，linux/windows/macos/&amp;hellip;。赚钱宝二代的硬件是32位armv7，系统是armbian-bookworn github账号，假定用户名jack，并新建repo取名为jack.github.io 安装hugo 安装git apt install git 安装hugo。在armbian-bookworm的仓库里有hugo，在当下这个日期（2023-07-14），仓库里的hugo版本是v0.111.3，是2023年3月发布的。github hugo官方仓库的版本已经是v0.115.3。虽然都说喜新厌旧，但这不是巧了么，我就用armbian仓库的旧版。 apt install hugo 创建博客目录，下载主题 # 为方便管理在根目录新建data文件夹mkdir /data# 在data目录下创建博客目录cd data/hugo new site blog# 进入blog目录，进行git初始化cd blog/git init# 下载自己喜欢的主题（这里用m10c为例）git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c 编辑博客根目录的config.toml，添加一行。注意这里v0.111.3版本的hugo配置文件是config.toml，但v0.115.3版本的配置文件是hugo.toml。 theme = &amp;#39;m10c&amp;#39; 到这一步，本地hugo安装就算完成了。接下去是进行本地运行和预览。从这一步开始我碰到了不少的坑，本来30分钟就搞定的事情，我愣是折腾了几个小时，弄了一个通宵。这都是在我决定要用ssh在armv7电子垃圾上装hugo的那一刻就注定了的。天堂有路你不走，地狱无门你偏要闯。😔 本地运行和预览 预览主题。如果是本地安装hugo，然后本地运行本地预览，那网上的教程多如牛毛，都会教你敲命令hugo server然后打开浏览器输入http://localhost:1313就可以预览了。但很不巧，我是用局域网内其它机器预览。所以从这一步开始就有了区别。注意参数--bind=&amp;quot;0.0.0.0&amp;quot;用来监听局域网内的访问，下面这条命令执行成功以后，就可以浏览器中访问http://host_ip:1313进行主题预览了。 hugo server --bind=&amp;#34;0.0.0.0&amp;#34; 写文章。用下面这条命令创建markdown文档，然后用自己喜欢的文本编辑器（nano/vim/&amp;hellip;）打开它写内容。这里有一个坑，根据模板创建的markdown文档的头部信息里有个参数draft: true用来标记这个文档是一份草稿。注意啊，它标记了自己是草稿，不是正式文章，下面要考。 hugo new posts/hello-world.md 预览文章。网上的教程在这一步都会说执行hugo server，但是要注意，文章的头部信息里draft: true标记了它是一篇草稿，默认不会展示。所以想要看到文章，要么改头部信息draft: false，要么命令加上-D参数，这样它会把草稿也进行展示。我的建议是改文章头部信息draft: false，这样后面发布到github pages的时候就不会踩坑了。 hugo server --bind=&amp;#34;0.</description>
    </item>
    
    <item>
      <title>Linux下用Speedtest CLI进行网络测速</title>
      <link>https://ruohai.wang/posts/speedtest-cli-setup/</link>
      <pubDate>Fri, 14 Jul 2023 14:57:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/posts/speedtest-cli-setup/</guid>
      <description>前言 想要linux下测一下网速，机器是赚钱宝二代（ws1508），硬件是32位armv7，系统是armbian-bookworm。
debian的仓库里有一个speedtest-cli的包，一开始我用的就是这个。但注意这个包不是speedtest官方在维护，不是官方的！这也解释了为什么我之前用debian仓库里的speedtest-cli进行测速的时候，它自动选择的服务器都是hongkong或者taiwan，导致测速完全不准。而且通过命令speedtest --list|grep China也搜不出任何结果，一度离谱到speedtest --list出来只有taiwan的服务器。
后来网上搜了一圈【找到了原因】，才知道这个包不是speedtest官方的。
linux上真的是好多坑啊，一个简单的网络测速都是如此。
好了，现在记录一下怎么安装speedtest官方的工具来完成linux下的网络测速。
安装 找到【speedtest官方网站】，首页就有安装步骤。 # 下载sh脚本 curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash # 安装 apt install speedtest 查询可用的测速服务器 先speedtest -h看一下使用手册。 Usage: speedtest [&amp;lt;options&amp;gt;] -h, --help Print usage information -V, --version Print version number -L, --servers List nearest servers -s, --server-id=# Specify a server from the server list using its id -I, --interface=ARG Attempt to bind to the specified interface when connecting to servers -i, --ip=ARG Attempt to bind to the specified IP address when connecting to servers -o, --host=ARG Specify a server, from the server list, using its host&amp;#39;s fully qualified domain name -p, --progress=yes|no Enable or disable progress bar (Note: only available for &amp;#39;human-readable&amp;#39; or &amp;#39;json&amp;#39; and defaults to yes when interactive) -P, --precision=# Number of decimals to use (0-8, default=2) -f, --format=ARG Output format (see below for valid formats) --progress-update-interval=# Progress update interval (100-1000 milliseconds) -u, --unit[=ARG] Output unit for displaying speeds (Note: this is only applicable for ‘human-readable’ output format and the default unit is Mbps) -a Shortcut for [-u auto-decimal-bits] -A Shortcut for [-u auto-decimal-bytes] -b Shortcut for [-u auto-binary-bits] -B Shortcut for [-u auto-binary-bytes] --selection-details Show server selection details --ca-certificate=ARG CA Certificate bundle path -v Logging verbosity.</description>
    </item>
    
  </channel>
</rss>
