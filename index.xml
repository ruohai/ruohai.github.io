<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/</link>
    <description>Recent content on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 13 Oct 2025 16:44:49 +0800</lastBuildDate><atom:link href="https://ruohai.wang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3D打印如何赚钱的一些经验和思考</title>
      <link>https://ruohai.wang/202510/how-to-make-money-by-3d-print/</link>
      <pubDate>Mon, 13 Oct 2025 16:44:49 +0800</pubDate>
      
      <guid>https://ruohai.wang/202510/how-to-make-money-by-3d-print/</guid>
      <description>前言 不知不觉买3d打印机已经4个月了，从一开始只会上makerworld找模型，打印了一大堆塑料手办，到后期开始自学3d建模，自己测量、打样、修正，最后弄出一个适配零刻me mini的散热底座 &amp;amp; 散热外壳。
这期间有没有靠3d打印赚到钱呢？有的，前两个月的时候labubu比较火，打印了一些送朋友，然后朋友买了一些送朋友，后来自己设计了散热底座 &amp;amp; 散热外壳，大概卖了20多个。
但似乎也没有赚到钱，因为现在玩3d打印几乎没有什么门槛，1000块钱买一台a1 mini就可以开始接单打印了，所以线上已经卷到几乎没有利润。线下摆摊倒是利润丰厚，如果没有好地段的铺子，或者迈不开腿抹不开面去公园、游乐场、夜市卖货，那还是别想着线下赚钱了。
所以，折腾了这么几个月，似乎只是空欢喜而已。
但空欢喜不代表没有经验和思考，我还是总结了一些，希望对你有帮助。
方法 靠3d打印赚钱，大致有以下几种路子：
生产资料变现 大白话就是搞打印农场，薄利多销。我看到的报价，根据材料不同，从0.1rmb/g到1rmb/g不等，量大可谈。
这个方法需要有场地，需要购买大量机器，最最重要的是：有能力可以接到大订单。
符合以上条件的可以搞起来，不过这个法子就是纯纯牛马，比较辛苦。
渠道变现 就是线下卖货。
如果你在小孩多的地段有个铺子（比如学校门口的小卖部），或者愿意去公园、集市、游乐园、夜市流窜作案流动卖货，那利润会非常丰厚，一个成本几块钱的小手办，线下卖个三五十不成问题。
这个方法有风险：版权 &amp;amp; 城管。
如果你的渠道出货量大，可以考虑直接从农场去进货，因为自己打印其实挺费事费时的。
技能变现 如果你会参数化建模，可以主攻结构件、工程零部件、标准间、非标准间的模型制作和打印。
小到给自己的电子产品设计外壳，大到接工程订单做结构件，建模的报价从几百到上千不等，打印的费用另算。
这个路子的利润也非常丰厚，但是，打铁还需自身硬，首先自己得有不低的参数化建模能力，其次就是有人脉资源可以接到这种工程订单。
技能 + 流量变现 如果你会建模，而且主攻的是艺术设计类建模，那可以把各种热门大ip（比如labubu、mario、pokemon、东风导弹）做成3d模型，然后把模型分发到各大模型社区（比如拓竹makerworld），慢慢积攒粉丝和人气，前期主要靠模型网站的创作激励，后期等粉丝量上来了就是三板斧：建群、卖课卖模型、带货。
这个方法需要你有源源不断的输出高质量手办模型的能力，前期要慢慢熬，后期流量起飞以后收入丰厚。
不过这个方法务必要留意版权风险。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>飞牛x零刻ME mini散热底座 &amp; 散热外壳</title>
      <link>https://ruohai.wang/202509/beelink-me-mini-fan-dock-and-casing/</link>
      <pubDate>Wed, 24 Sep 2025 23:32:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202509/beelink-me-mini-fan-dock-and-casing/</guid>
      <description>前言 飞牛和零刻联名推出了首款【硬件联盟】产品，也就是零刻me mini的飞牛定制款，长这样。
我也入手了一个，不过是零刻原版。
手上有这个机器的，或者看过网上有关这个机器评测的，应该都知道这机器的散热很有问题，待机40多度，满载可能就6~70℃了。
我在网上找过这机器的散热改造方案，但是当时网上只有一款3d打印的散热外壳，如下图
这个外壳除了加大量散热孔之外，还把尺寸加宽，这样左右两侧就可以各塞进去一个8010的风扇。
这个外壳我有几点不太满意：
定价略贵 尺寸拉宽以后整个机器变肥了，不好看 后续我也收到有网友反馈这个外壳的几点不足：
装风扇比较麻烦 整机装配好以后很难再把外壳拆下来，没有着力点，需要暴力拆卸 拖2根线 + 1个usb转接头不好看 后来我在bilibili的零刻官方账号下面，有人反馈me mini这个机器在装了6块硬盘以后会供电不足掉盘，零刻官方的回复是【单盘功耗不要超过8w】。
所以，这机器本身的供电就捉襟见肘的情况下，我觉得再加俩风扇也不太合适。
那，既然没有合适的散热方案，那就自己动手设计一个吧。
散热底座 &amp;amp; 散热外壳 正好这段时间我在玩3d打印，而且看了几期cad的入门教程，也入手了一个9.9包邮的游标卡尺，万事俱备。
以下就是我设计的两款适配零刻 ME mini的散热产品。
方案一：9cm风扇散热底座
这个底座的思路是把机器抬高 + 风扇吹走底部热量，底座中可以加装一个9cm的风扇。
模型已经发布到拓竹makerworld社区：【飞牛 x 零刻ME mini全闪nas散热底座】
方案二：镂空散热外壳
这个外壳的尺寸和原版外壳相同，但是加了大量的散热孔。
模型已经发布到拓竹makerworld社区：【飞牛 x 零刻 ME mini 散热镂空外壳】
结语 以上两个模型，尺寸都是手工测量，经过反复打样修正，目前都已经迭代到了比较完美的状态。
我非常喜欢飞牛，飞牛os精炼的功能、ui的风格、免费的定价策略、基于debian的兼容性和自由度，我都非常喜欢，所以我设计的这两个模型是开放授权，可随意商用，也无需署名，算是我回馈给飞牛社区的一点微小的贡献。
希望我设计的这两个产品可以帮助你解决零刻ME mini这个机器的散热问题。
😘
对了，我在闲鱼上架了这两款产品，如果你愿意支持，可以找我代为打印制作。闲鱼链接：【这是我的闲鱼号】
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>玩3D打印几个月的一些经验和建议</title>
      <link>https://ruohai.wang/202509/some-tips-about-3d-printer/</link>
      <pubDate>Wed, 17 Sep 2025 14:52:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202509/some-tips-about-3d-printer/</guid>
      <description>前言 在6月份的时候入手了一台3d打印机，拓竹p1sc，至今已经有3个月的时间，陆陆续续也打印了接近800个小时，总结了一点点经验，以及一点点建议，做个记录。
如果你也准备买3d打印机，希望能给到你一些参考。
经验 &amp;amp; 建议 我是不是需要购买3d打印机
现在的3d打印机确实已经做到了傻瓜化的一键打印，上手难度非常低。很多短视频平台的账号都在推3d打印机，比如给老婆打印玩具、给同事打印玩具、打印玩具摆摊赚钱、自己设计玩具等等，让人看了非常心动想要购买。
而且现在的3d打印机也非常便宜，1000块左右就可以买到入门款的机器。很多人一冲动就入手了，然后玩了几天发现这玩意的麻烦和折腾远远超过它带来的乐趣，想卖二手也很麻烦，因为机器很大，最后只能把机器丢一边吃灰。
那问题来了，【我是不是需要买一台3d打印机呢？】
我的个人建议是，如果你满足以下几个条件中至少2条，可以考虑上车：
喜欢手办 喜欢塑料玩具、塑料模型 自己会3d建模 可以自己动手搞定一些简单的机械故障 家里至少有2平的地方可以放下机器和耗材 以下说一下原因：
绝大多数买了3d打印机的用户，都是上模型网站（比如拓竹的makerworld）找免费图纸然后一键打印，而模型网站上的绝大部分图纸，都是各种手办和模型。可以见下图，拓竹的模型网站makerworld提供的搜索热词。如果你对这些都没有特别打的兴趣，那大可不必买打印机。 3d打印机要发挥出最大的价值，一定是需要自己会建模，根据自己的需求来定制产品，是创造，而不是打一些网红手办、网红塑料玩具，只是复制，那和制造塑料垃圾没什么区别。尤其是在中国，工业化产能过剩，导致所有能流水线大批量生产的产品都便宜的要死，3d打印制作这种产品，不管是从价格还是质量上都毫无优势。如果你只是想弄一堆网红手办然后去摆摊，那最合适的方式是从3d打印农场去进货，而不是自己打印，因为打印一个手办的时间动辄就7~8个小时起步，可能一天都做不出一个产品。
短视频平台上很多3d打印玩家都在发自己玩3d打印的视频，你可以把这理解为一种营销，厂家需要给消费者种草来卖机器，博主发视频用来涨粉变现（确实很多人喜欢看这种视频）。实际的3d打印远比他们视频中呈现出来的过程漫长、复杂而且折腾。
现在的3d打印机确实已经非常傻瓜化，可以做到一键打印，但打印机出故障的概率其实也非常高。比如常见的堵头和卡料，都需要把机器的热头拆开卸成一个个小零件，排除故障以后再一个个装回去。卡料的排障比较简单，如果是堵头，不仅要拆成零件，还需要把热端加热到250℃以后用通针进行疏通，这个过程很容造成烫伤。也许你会问，既然出故障了肯定有保修啊，为什么不找厂家返修，🤔，emmmm。首先，这个故障不是机器本体的故障，机器本体是一套由控制电脑驱动的机械结构，几乎不会出故障，卡料、堵头，大概率是因为你用的耗材有问题，比如杂质、受潮、脆化，导致机械机构无法顺利运行，所以控制电脑报错了。就像你买车以后在路上开车突然爆胎了，不可能去找4s店说要保修。那如果机器出故障了自己确实搞不定，找厂家返修也可以，但这种硕大的机器打包寄快递也是非常麻烦的事情，一来一回也要好几天。如果你买的耗材质量品控不稳定，或者买了耗材以后存放不当受潮严重，那出现堵头卡料故障就是家常便饭了，不可能每次出故障都返厂的。
3d打印机需要一个2平大小的空间摆放，最好是单独一个房间摆放，因为有噪音和空气污染。首先是噪音，拓竹的a系列和新出的h系列运行噪音很低，但是p系列和x系列的噪音都非常明显。然后是空气污染，打印机在运行过程中会产生塑料微粉尘，有些廉价的耗材也可能掺了一些有害化学成分，在打印时被加热到220~250℃后会挥发到空气中。但是关于空气污染这一点目前尚无确切的证据，因为个人用户一两台打印机，用简单的空气检测仪器可能检测不到，你可以找一些3d打印农场拍的视频，几百台机器的车间里的空气净化器上的指数都是爆表的。
我已经决定买打印机了，选什么机器合适
首先可以确定一点，选拓竹，除非你是非常有经验的老手，否则我不建议买其它品牌的机器。
然后在拓竹的产品序列，定位大致如下：
定位从高到底：H2D &amp;gt; H2S ≈ X &amp;gt; P &amp;gt; A。其中H是新旗舰，X是老旗舰。H2D和H2S的区别是双头和单头。 不同定位的区别：打印板更大（可以打印更大的模型），支持的耗材更多（比如abs），功能更丰富（比如支持激光雕刻） A系列是i3结构，也就是龙门架结构，其它的P系列、H系列、X系列是core xy结构，区别是i3结构的组件简单维护方便价格便宜，适合入门，缺点是因为因为打印板需要前后移动，如果打印细高的模型，模型会晃动从而影响打印。 所以，最后的选购建议是：
预算2000以内：选a系列。a1和a1 mini的区别就是打印板大小和功率，如果你打印的模型尺寸都不大（在180mm以内），那a1 mini就够用了。个人推荐a1 mini。 预算2000~7000，选p系列，这个价位区间拓竹没有别的机器可选，只有p1。p1这个机器比较老了，缺点非常明显，比如运行噪音很大，还有一些新技术都没有集成，比如动态流量校准、打印板识别，但优点是这个机型经过了时间的考验，非常皮实耐操，不容易坏。 预算7000+，推荐H系列。X系列老旗舰虽好，但H系列新人胜旧人。 如果买a系列，机器到手以后最好做个封箱，因为噪音和空气污染。 要不要买ams
我的建议是买，除非你满足以下三点之一：
只打印单色，比如打印白模或者灰模，然后自己上色 每次打印都不嫌麻烦手动换色 买第三方的ams方案，或者自己动手搞一套ams方案 耗材怎么选
耗材我只用过petg和pla，其它的abs、tpu、pla+、pla-cf等等都没有用过，所以仅对pla和petg给出一点经验和建议。
pla：除了环保、可降解之外没有优点，因为缺点非常突出，耐热低（55℃会开始软化），强度差（摔了磕了会留坑），持久性差（室外阳光下和潮湿环境下会降解）。 petg：便宜大碗的耗材，平民大众和打印农场的首选，缺点是塑料质感明显、容易受潮、打印时容易出现絮状拉丝 不要迷信拓竹官方的耗材，第三方耗材选择很多。拓竹官方的耗材≠优质耗材，比如pla lite这个品类就是起到一个价格锚点的作用，很容易卡料，我几次卡料都是拓竹的pla lite 耗材的防潮和烘干是必要的，尤其是南方潮湿地区，耗材受潮除了影响打印质量（拉丝、鼓包、波浪纹），还容易导致堵头 如果一定要选pla，可以选改性pla，不如pla+，pla-cf之类 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>PVE 9.0 系统软件源的配置</title>
      <link>https://ruohai.wang/202508/pve-9-source-config/</link>
      <pubDate>Tue, 19 Aug 2025 21:42:17 +0800</pubDate>
      
      <guid>https://ruohai.wang/202508/pve-9-source-config/</guid>
      <description>前言 pve9正式上线已经有两周了，debian13也已经上线一周，今天换主机装pve，我也装了最新的pve9系统。
但是装完系统进行配置调整的时候，发现软件源配置文件从传统格式变成了deb822格式，而且当前（2025/08/19）时间清华的开源软件镜像站还没有更新pve的软件源配置。
经过简单摸索，搞定了deb822格式的debian软件源和pve软件源的配置。
debian的软件源配置 配置文件路径：/etc/apt/sources.list.d/debian.sources
首先备份一下原文件
mv /etc/apt/sources.list.d/debian.sources /etc/apt/sources.list.d/debian.sources.bak 然后创建一个自己的配置文件
touch /etc/apt/sources.list.d/debian.sources 然后用nano或者vim编辑debian.sources文件，粘贴以下内容后保存退出。
Types: deb URIs: https://mirrors.tuna.tsinghua.edu.cn/debian Suites: trixie trixie-updates trixie-backports Components: main contrib non-free non-free-firmware Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 # Types: deb-src # URIs: https://mirrors.tuna.tsinghua.edu.cn/debian # Suites: trixie trixie-updates trixie-backports # Components: main contrib non-free non-free-firmware # Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg # 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换 Types: deb URIs: https://mirrors.tuna.tsinghua.edu.cn/debian-security Suites: trixie-security Components: main contrib non-free non-free-firmware Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg # Types: deb-src # URIs: https://mirrors.</description>
    </item>
    
    <item>
      <title>飞牛fnOS突然掉电导致RAID5存储空间无法识别的问题解决</title>
      <link>https://ruohai.wang/202507/fnos-raid5-unrecognize-repair/</link>
      <pubDate>Tue, 29 Jul 2025 16:21:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/202507/fnos-raid5-unrecognize-repair/</guid>
      <description>前言 nas玩家迟早都会碰到的一个问题：因为突然断电，阵列无法识别了。
今天我就很不幸的遇到了，但幸运的是，在grok ai的帮助下，我最后成功的把阵列救了回来。
在这里做个记录，希望对你也有帮助。
注意事项：如无十分把握，请务必提前用dd命令给硬盘做镜像，避免raid修复失败导致数据彻底报废
问题描述 我用的nas系统是fnos，存储空间是3盘位raid5。因为一次意外断电，导致raid5阵列无法被fnos系统识别。
表现症状是：
在【硬盘信息】中可以看到硬盘，但都显示【未识别】或【未挂载】，以及【文件系统未知】，示意图如下。 在【存储空间】中无任何显示
ssh访问fnos，查看阵列的当前状态信息
一：用lsblk查看硬盘信息，确认阵列名称为/dev/md125。因为系统会尝试识别raid但最后识别失败，所以会出现2种结果。
# 系统识别raid有3个盘 sdh 8:112 0 232.9G 0 disk └─sdh1 8:113 0 232.9G 0 part └─md125 9:125 0 0B 0 md sdj 8:144 0 232.9G 0 disk └─sdj1 8:145 0 232.9G 0 part └─md125 9:125 0 0B 0 md sdk 8:160 0 232.9G 0 disk └─sdk1 8:161 0 232.9G 0 part └─md125 9:125 0 0B 0 md # 系统判定2个盘掉线，只有1个盘在线 sdh 8:112 0 232.</description>
    </item>
    
    <item>
      <title>升腾F610安装PVE系统后网络掉线、系统假死问题的解决</title>
      <link>https://ruohai.wang/202507/centerm-f610-offline-debug/</link>
      <pubDate>Sat, 26 Jul 2025 03:24:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202507/centerm-f610-offline-debug/</guid>
      <description>前言 最近又从海鲜市场入手了两台升腾c92，都是j1900芯片的版本。
这已经是我入手的第4、第5台c92了，因为试了一圈小主机以后，我觉得这个机器就是最适合我使用需求的小主机：超级省电、无风扇设计所以0噪音、便宜、够用。
但是，这次到手的2台机器，我发现其中一台虽然芯片是j1900，但是铭牌上的型号是f610而不是c92。
网上搜f610这个型号，除了官网的产品介绍，没有太多的其它信息，不过大致可以判断f610就是c92的小改款，拆机以后可以看到主板上的硬件布局、散热片大小就存在明显的区别。
给f610刷入c92的bios可以正常点亮，然后熟练的装上pve，再还原一大堆vm，最后找个不影响机器散热的小角落放着吃灰就行了。
不过实际使用时很快就翻车了，我碰到了一个很棘手的问题，故障如下：
机器运行一段时间后（或长或短，没有固定时间，但大致是3~8个小时），pve的web控制台无法访问，所有vm也无法访问，所有vm的服务也全部掉线，也就是所有vm以及pve本身，看上去应该都是网络掉线了 机器本身的功耗没有出现变化，电源按钮的指示灯依然是绿色（表示机器是运行状态），网口的灯也会闪烁 机器接上显示器，有几次出现linux登录的shell界面，但状态卡死，键盘输入无响应，有几次是无视频信号输出（屏幕不亮） 机器长按电源硬重启后，pve和所有vm都可以正常启动 在pve的web控制台查看系统日志，没有看到特别明显的错误信息 机器继续运行一段时间后，又重复出现如上的故障 机器出现这个问题后让我很头疼，因为很难确定到底是哪个环节出了问题，有可能是硬件问题，比如内存、硬盘、主板，有可能是软件问题，比如pve新版本有bug之类。
问题解决 使用memtester排除了内存的问题，使用smartmontools排除了硬盘的问题。
在网上搜索很久，并没有什么有价值的内容，最后还是靠着ai + dmesg日志定位到了原因：acpi错误。
使用dmesg | grep -i error命令查看内核日志，输出内容中有这么一条：
[ 0.397469] acpi PNP0A08:00: _OSC: platform retains control of PCIe features (AE_ERROR) 以下是grok给出的日志分析：
以下是grok给出的排查建议：
最后，根据ai建议，进行以下两步配置调整：
在bios中关闭acpi功能，并关闭所有c6/c7之类的休眠降低功耗的功能 在pve的grub配置文件中增加pcie_aspm=off参数 至此，问题解决，🎉
结论 问题解决了以后，复盘debug过程，我觉得，大概是f610和c92在硬件上确实有些许区别，所有对c92的bios固件兼容性不佳，导致acpi出现了问题，引起pve运行不稳定，频繁假死。
所以，还是那句话：捡垃圾有风险！！！！！！！
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>飞牛fnOS硬盘反复唤醒休眠的问题解决</title>
      <link>https://ruohai.wang/202506/fnos-hdd-auto-sleep-config/</link>
      <pubDate>Sat, 28 Jun 2025 20:59:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202506/fnos-hdd-auto-sleep-config/</guid>
      <description>先说一下我的fnos硬件方案：
pve host上虚拟机部署fnos 通过usb3.0接口外接一个硬盘柜 硬盘柜的固件默认10min无io会将硬盘休眠 在fnos中设置【外置硬盘】的休眠策略为【从不】 在以上的硬件方案下，在fnos的日志中会看到硬盘高频 &amp;amp; 反复出现硬盘休眠、硬盘唤醒的内容。
nas的硬盘要不要休眠这是一个许多人在争论的话题，有些人觉得功耗高所以选择没有io就要休眠，有些人觉得反复休眠影响硬盘寿命所以选择不休眠。但不管哪个方案下，这种几分钟就往复一次的休眠 + 唤醒都是无法接受的。
最近几个版本的fnos更新里都会提到硬盘休眠功能的bugfix和优化，但是因为我使用的硬盘柜的固件强制10min无io就自动休眠 &amp;amp; 无法修改，所以fnos暂时无法正确处理我这套硬件方案下的硬盘休眠问题。
那只能我们自己动手了！
linux下控制硬盘休眠最常用的工具就是hdparm了，直接ssh连上fnos
# 禁止休眠 sudo hdparm -S 0 /dev/sdf # 调整电源管理级别 sudo hdparm -B 254 /dev/sdf -S 0，表示禁用 standby 模式，硬盘将不会自动进入休眠状态 -B 254，将 APM 设置为最大性能模式，尽量减少电源管理干预 执行完成后，可以通过以下命令查看电源管理设置是否生效
sudo hdparm -I /dev/sdf | grep &amp;#39;Advanced power management level&amp;#39; 完成以上设置以后就静观其变了，看下fnos的日志中是否还会出现硬盘反复休眠 + 唤醒的情况。
如果fnos系统重启以后以上设置被重置，只需要写个bash脚本配合crontab定时执行即可。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>fnOS使用nginx反代后无法访问的问题解决</title>
      <link>https://ruohai.wang/202506/fnos-nginx-reverse-proxy-config/</link>
      <pubDate>Fri, 13 Jun 2025 08:09:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202506/fnos-nginx-reverse-proxy-config/</guid>
      <description>fnos自带了ddns，配置方便，用起来也很方便。但我不像把fnos暴露到公网，而且我在局域网中已经部署了一个虚拟机专门用来做反代，所以想把fnos的入口也整合到一起。
但是fnos用nginx做了反代以后会无法访问，具体表现就是卡在【加载中】最后显示断开连接。
在网上搜索一番，看了官方论坛里的一些答疑，确认了是我的nginx配置中没有开启websocket的支持，只需要加上以下三行配置即可
proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;upgrade&amp;#34;; 配置说明 proxy_http_version 1.1;
WebSocket 协议依赖 HTTP/1.1 的 Upgrade 机制，因此需要明确指定 Nginx 使用 HTTP/1.1 协议与后端服务器通信。 默认情况下，Nginx 可能使用 HTTP/1.0，而 HTTP/1.0 不支持 Upgrade 头，因此必须设置为 1.1。 proxy_set_header Upgrade $http_upgrade;
用途：将客户端发送的 Upgrade 请求头（如 websocket）转发到后端服务器。 作用：WebSocket 协议的建立需要客户端发送 Upgrade: websocket 请求头，告诉服务器需要切换协议。Nginx 作为反向代理，必须将这个头传递给后端，确保后端知道客户端请求的是 WebSocket 协议。 $http_upgrade 是 Nginx 的变量，表示客户端请求中 Upgrade 头的值。如果没有 Upgrade 头，$http_upgrade 为空。 proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
用途：将客户端的 Connection 请求头设置为 upgrade，并转发到后端服务器。 作用：WebSocket 协议要求 HTTP 请求头中的 Connection: Upgrade 来指示协议切换。Nginx 需要显式设置 Connection 头为 &amp;quot;upgrade&amp;quot;，以确保后端服务器能够正确识别 WebSocket 请求。 注意：这里直接设置为 &amp;quot;upgrade&amp;quot;，而非使用变量 $http_connection，是因为 WebSocket 协议明确要求 Connection 头值为 upgrade，无需动态获取。 完整的nginx配置如下：</description>
    </item>
    
    <item>
      <title>记录一次RAID5 &#43; BTRFS的文件损坏与恢复</title>
      <link>https://ruohai.wang/202506/recover-file-damage/</link>
      <pubDate>Wed, 11 Jun 2025 20:42:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202506/recover-file-damage/</guid>
      <description>1. 前言 上个月的时候我写了一篇《在飞牛fnOS上手动进行文件完整性校验》，当时纯粹是当作了解学习一个新的知识点并顺手做一个记录，但没有想到这么快就派上了用场，因为在不到一个月之后的6月9号，我在自己nas的raid5 + btrfs的存储空间进行btrfs scrub的时候，竟然报了6000多个uncorrectable errors（截图的时候是5000多个，等扫描完了达到6000多个）。
这可如何是好啊！虽然折腾nas折腾linux也有小2年，但这应该是我第一次发现了文件损坏的情况。以前肯定也有，因为我用的硬盘都是二手拆机硬盘，质量参差不齐，只要系统（黑群或者fnos）没有报异常，就当没有。
不过遇事不能慌，要慢慢理顺逻辑，搞清楚这6000多个无法修正的错误代表什么意思，然后想办法修复它们。
在写下这篇文章的时候，我已经完成了这次文件损坏的恢复，因为万幸我有一个备份nas，最后从备份中恢复了损坏的300多个文件。
这篇文章简单做个记录，希望对你也有一些帮助。
tips：要明确一点，btrfs scrub扫出来的uncorrectable errors就是无法修正的错误，没法通过mdadm raid进行恢复，因为mdadm是硬件冗余而不是备份，不是备份，不是备份。如果没有备份，那就没办法恢复了。 2. 事件回溯 我的NAS配置
我的nas的软硬件环境如下：
软件：系统是fnos，存储方案是mdadm + lvm + btrfs 硬件：基于intel h55主板diy的主机，有6个原生sata接口。一开始用其中5个sata口组建了5盘位raid5，后来换机箱，用了一块pcie转5 sata转接板实现了6+5一共11个sata接口，这个5盘位raid5阵列，2个盘插在原生sata口，3个盘插在转接的sata口。 中间发生了什么
在5月14日的时候执行btrfs scrub提示no errors found，所以此时没有文件损坏。 在6月7号时更换了机箱，从普通机箱换成了8盘位nas机箱，更换完成后成功点亮系统无异常。 点亮系统后，对5盘位的raid5阵列进行了更换其中一块硬盘的操作，也就是【在web控制台停用一块硬盘 + raid5降级运行 + 添加一个新硬盘 + raid5阵列重建】，整个过程顺利完成，无异常报错。 对重建后的这个5盘位raid5阵列进行btrfs scrub操作，出现大量的uncorrectable errors报错。 对这个raid5阵列进行mdadm --check操作，验证完成后无报错无异常。 fnos的web控制台中查看存储空间，显示正常。（图片为示意图） tips：不管是群晖还是fnos，在web控制台中显示的阵列是否健康或者正常，针对的都是用mdadm创建的这个raid是否健康，mdadm --check校验的内容是条带化数据与奇偶校验块是否一致。这个健康或者正常，无法代表底层文件系统（这里是btrfs）上的文件是否出现了静默损坏或一致性异常。 异常原因分析
根据以上回溯信息，大致可以判断，应该是更换机箱 + raid5换盘重建的过程中出现了问题，但无法确定具体是哪一步、哪一个硬件的问题。也许是pcie转sata口转接板有问题？也许是用拆机二手盘组raid5在重建的时候碰到坏道导致的文件损坏？也许是因为内存不带ecc？也许是新机箱的电气屏蔽不好？也许是老旧的atx电源质量太差稳定性不足？
但这些都不是当下的重点了，现在的重点是要想办法处理btrfs文件系统的6000多个errors。
3. 文件恢复 虽然btrfs scrub明确提示了有6000多个errors，但是没有明确给出重要信息：
有没有文件损坏 有多少个文件损坏 是哪些文件损坏 因为6000多个无法修复的错误可能只涉及几个文件，也可能涉及更多文件，具体取决于受损数据块属于哪些文件。
我有另一个冷备nas上有备份，但这个备份上一次同步已经是2个月之前，没法简单的直接还原。我需要一份准确的损坏的文件清单，然后在备份nas中找到这份清单上的文件进行恢复。
所以，这次文件恢复的最重要、最核心的任务就明确了：拿到损坏文件的清单。
tips：因为我的raid5阵列显示健康度clean没有问题，mdadm --check也没有报异常，所以我没有着急备份阵列（或者说备份阵列中的数据）。但我依然建议你如果碰到这种情况，优先进行备份。 方法一：查看内核日志（不推荐）
btrfs文件系统在进行scrub的过程中，碰到校验和错误，理论上异常信息中会包含对应的文件信息。
dmesg | grep -i btrfs 输出的日志信息大致如下：</description>
    </item>
    
    <item>
      <title>飞牛fnOS下DLNA服务的防火墙设置</title>
      <link>https://ruohai.wang/202505/fnos-minidlna-filewall-setting/</link>
      <pubDate>Thu, 22 May 2025 15:50:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202505/fnos-minidlna-filewall-setting/</guid>
      <description>前言 之前我在debian基础上手搓minidlna服务，只需要在ufw中显式添加一条ufw allow proto tcp from 192.168.1.0/24 to any port 8200后，局域网内的设备（比如windows电脑文件管理器、安卓手机上的vlc软件中）都会自动出现dlna服务。
但是在fnos中，如果防火墙设置如下：
不勾选【局域网：默认允许访问】 不匹配入站规时禁止访问 然后新增一个DLNA默认端口8200的放行规则 理论上应该和debian + ufw + dlna这套手搓方案一样，局域网的机器就可以收到dlna服务了。
但实际上局域网内设备无法收到dlna的服务，或者严谨一点说，没有收到dlna的广播。
所以很长一段时间我都在pve上弄了一个单独的vm跑minidlna，而不是把dlna服务整合到fnos上。
不过，昨天把这个问题请教了ai以后，终于知道原因了。
问题原因 简单来讲，dlna除了用到8200/tcp，还需要用到1900/udp，所以只放行8200/tcp是不行的。
以下是ai提供的回答（其中48200端口是我自定义的dlna端口号）
到这里，又会出现第二个问题：
那为什么用debian + ufw的时候，只需要放行8200/tcp就可以了，在fnos下却还需要显示声明1900/udp呢？
答案是ufw默认会允许局域网流量！
以下是ai提供的表格
所以，最后的解决方案，就是在fnos的防火墙入站规则中，添加一条1900/udp即可。
🎉
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在飞牛fnOS上手动进行文件完整性校验</title>
      <link>https://ruohai.wang/202505/check-data-consistency/</link>
      <pubDate>Wed, 14 May 2025 00:03:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202505/check-data-consistency/</guid>
      <description>前言 玩过群晖的朋友都知道群晖的存储池在创建和使用的过程中经常能看到正在校验文件的一致性这个提示，虽然不知道底层原理但看着就让人很安心，让用户觉得文件绝对不会损坏。
fnos的存储空间的实现方案和群晖一样，都是mdadm + lvm + btrfs，但是fnos的存储空间在创建和使用的过程中，完全看不到校验文件一致性的提示。这不由得让我担心我的文件是否会出现什么宇宙射线引起的比特翻转但系统又没有定期做scrub导致文件损坏。
那fnos到底有没有进行文件一致性校验，我不知道。
但是我们可以手动进行文件校验。
文件校验 fnos的存储空间实现方案是mdadm + lvm + btfs，在2025年5月的更新中加入了ext4的支持，但我这里依然以btrfs为例。
要进行的文件校验分成两个部分：raid阵列的一致性校验 &amp;amp; 文件数据的一致性校验。
以下由ai提供的图表
那接下去就手动开始进行文件校验吧。
btrfs
以fnos的存储空间为例，一般挂载点都是/vol1，那btrfs的文件校验是以挂载点为目标
# 对存储空间1启动文件校验 sudo btrfs scrub start /vol1 # 查看校验的进度 sudo btrfs scrub status /vol1 校验完整后，可以看到输出结果如下
UUID: 6412be10-xxxx-xxxx-xxxx-xxxxxxxxxxxx Scrub started: Tue May 13 23:22:05 2025 Status: finished Duration: 1:15:23 Total to scrub: 514.29GiB Rate: 116.43MiB/s Error summary: no errors found mdadm
先确认系统的阵列状态
cat /proc/mdstat 输出结果示意如下
Personalities : [raid6] [raid5] [raid4] [raid1] [linear] [raid0] [raid10] md1 : active raid1 sde1[0] 156156928 blocks super 1.</description>
    </item>
    
    <item>
      <title>往LVM中添加磁盘&amp;扩容</title>
      <link>https://ruohai.wang/202504/lvm-add-disk/</link>
      <pubDate>Thu, 10 Apr 2025 12:40:34 +0800</pubDate>
      
      <guid>https://ruohai.wang/202504/lvm-add-disk/</guid>
      <description>前言 手上有很多2GB、8GB之类的小容量U盘，弃之可惜，所以我用lvm将这些u盘拼成了一个逻辑卷lv，将容量积少成多作为大容量存储空间使用。
比如现在是一个2GB的u盘 + 一个8GB的u盘拼成了一个总容量为9.5GB的lv
查看物理卷pv信息
# 命令 pvs # 显示信息 PV VG Fmt Attr PSize PFree /dev/sdc1 music lvm2 a-- &amp;lt;7.45g 0 /dev/sdd1 music lvm2 a-- &amp;lt;1.93g 0 查看物理卷pv详细信息
# 命令 pvdisplay # 显示结果 --- Physical volume --- PV Name /dev/sdd1 VG Name music PV Size &amp;lt;1.93 GiB / not usable 2.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 493 Free PE 0 Allocated PE 493 PV UUID Wrn9BJ-ezwM-pGYi-Ohdo-2eT0-Hzq1-wE2R9Y --- Physical volume --- PV Name /dev/sdc1 VG Name music PV Size 7.</description>
    </item>
    
    <item>
      <title>飞牛系统（fnOS）开启OVS后导致网络掉线的问题解决</title>
      <link>https://ruohai.wang/202504/fnos-ovs-makes-network-down/</link>
      <pubDate>Mon, 07 Apr 2025 14:57:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202504/fnos-ovs-makes-network-down/</guid>
      <description>fnos引入虚拟机系统以后在网络设置中添加了一个【启用OVS】的功能，大致是用openswitch工具来创建和管理虚拟网桥之类。
这个入口和编辑网络的入口放在一起，太过于明显，而且没有防呆设置，所以很容易误点导致开启了ovs网络。
当前fnos还处在快速开发期，存在很多bug，这个【误操作开启ovs网络】以后，很容易导致fnos出现网络问题，问题大致如下：
丢失公网，也就是所有公网服务掉线（比如ddns内网穿透、系统更新、数据刮削等等所有需要联网的服务），但局域网可以正常访问。 在上述【问题1】情况下，在【网络设置】中调整网络配置，会导致局域网也掉线，也就是无法访问fnos的网页，至此fnos公网和局域网的全部服务掉线，但重启机器后可以恢复到【问题1】 在上述【问题2】的情况下，如果继续在【网络设置】中开关OVS，不仅会导致fnos网络掉线，还会导致重启后也无法恢复网络，至此，只能通过将机器接上键盘和显示器，通过控制台访问 此处不深究是什么原因导致的网络崩溃，只说如何快速恢复网络：
将fnos主机接上显示器和键盘，通过控制台输入账户密码登录以后 用ovs-vsctl工具删除网桥即可 # 查看当前的网桥 sudo ovs-vsctl list-br # 删除网桥 sudo ovs-vsctl del-br &amp;lt;br-name&amp;gt; 重启网络或者重启系统 # 重启网络 sudo systemctl restart NetworkManager.service # 重启系统 sudo reboot 到这里网络就恢复正常了。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>笔记本电脑用作Linux Server时合盖&amp;屏幕背光的设置</title>
      <link>https://ruohai.wang/202503/laptop-linux-server-config/</link>
      <pubDate>Wed, 12 Mar 2025 23:47:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202503/laptop-linux-server-config/</guid>
      <description>笔记本电脑安装headless linux系统(不带桌面gui)作为服务器使用时，有两个问题需要解决：
合盖以后系统自动休眠 屏幕常亮 要解决也很简单
取消合盖休眠 只需要修改/etc/systemd/logind.conf配置文件即可
找到HandleLidSwitch开头的三个设置项
HandleLidSwitch=suspend # 合上盖子时休眠 HandleLidSwitchExternalPower=suspend # 接通电源时合上盖子仍休眠 HandleLidSwitchDocked=ignore # 当连接外接显示器时忽略盖子动作 参数释义：
suspend：休眠（默认行为）。 hibernate：进入深度休眠（需要确保系统支持）。 poweroff：关机。 ignore：忽略盖子关闭动作（不会休眠）。 根据自己的需求，将suspend修改为ignore即可，然后用一下命令重启服务后生效
sudo systemctl restart systemd-logind.service 关闭屏幕背光 对于关闭屏幕，网上有很多方法都说通过电源控制来管理，但我实测以后发现不仅需要额外安装一堆包而且还不管用，所以最后用的方法是：直接将屏幕亮度设置为0
可以先用以下命令查看当前屏幕的亮度
# 不同硬件可能路径不同，请自行调整 cat /sys/class/backlight/intel_backlight/brightness 用以下命令将屏幕亮度设置为0
echo 0 | sudo tee /sys/class/backlight/intel_backlight/brightness 有些奇怪的硬件可能会自动重置屏幕亮度，也就是明明关闭了背光，但过段时间以后屏幕又会变亮，这种情况可以用crontab配合bash脚本时间自动检测屏幕亮度
bash脚本如下(需要root权限)
#!/bin/bash # 通常亮度控制文件位于这个路径 brightness_file=&amp;#34;/sys/class/backlight/intel_backlight/brightness&amp;#34; # 不同系统可能需要调整路径，例如： # /sys/class/backlight/amdgpu_bl0/brightness # /sys/class/backlight/acpi_video0/brightness # 检查文件是否存在 if [ ! -f &amp;#34;$brightness_file&amp;#34; ]; then echo &amp;#34;无法找到亮度控制文件&amp;#34; exit 1 fi # 获取当前亮度 current_brightness=$(cat &amp;#34;$brightness_file&amp;#34;) # 检查亮度是否为0 if [ &amp;#34;$current_brightness&amp;#34; -ne 0 ]; then # 需要root权限来修改亮度 echo 0 | tee &amp;#34;$brightness_file&amp;#34; &amp;gt; /dev/null echo &amp;#34;亮度已设置为0&amp;#34; else echo &amp;#34;亮度已经是0&amp;#34; fi 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>飞牛系统fnos存储空间扩容/mdadm &#43; lvm &#43; btrfs方案的磁盘扩容</title>
      <link>https://ruohai.wang/202503/fnos-expand-vol-size/</link>
      <pubDate>Sat, 01 Mar 2025 22:17:00 +0800</pubDate>
      
      <guid>https://ruohai.wang/202503/fnos-expand-vol-size/</guid>
      <description>前言 飞牛系统的存储空间用的mdadm + lvm + btrfs的方案（群晖也是这个方案），如果想要扩容会比较麻烦，因为嵌套太多层了，不能像ext4文件系统那样用fdisk先d再n然后w最后resize2fs就行了，而且飞牛系统fnos截至目前还没有在网页控制台上添加扩容的功能。
自己盲操一遍发现比预想的复杂，不过最后还是在网上找到了别人的教程，所以写篇博客记录一下。
注意：操作有风险，记得给系统做快照、备份
操作 磁盘扩容的第一步肯定是换更大的硬盘或者在虚拟机host（pve或者esxi）中调整虚拟磁盘的大小。
这里以pve为例
在弹窗中调整大小
此时通过lsblk命令可以看到对应的磁盘/dev/sda已经变成从原来的10GB变成了15GB，但分区sda1、raid1阵列md0以及存储空间trim_xxxx的空间大小依然还是10GB。
接下去操作分成四步，依次是：
1. 扩容磁盘分区sda1
2. 扩容阵列md0
3. 扩容lvm卷trim-xxxx
4. 扩容存储空间vol1
tips: 如果是换更大容量的硬盘，可以直接换盘让阵列重建，或者用dd命令把旧盘克隆到新盘，后面的步骤就和下面的操作完全一样了。
第一步：扩容磁盘分区
分区扩容依然用到我们熟悉的fdisk，如果是gpt分区的话可以用gdisk，根据自己的情况使用。
操作步骤如图所示
步骤解析：
第一步是选择要扩容的磁盘，sudo fdisk /dev/sda，会要求输入密码认证，红字提示意思是分区大小和磁盘容量不符（废话我刚扩容了磁盘） 第二步是删除旧分区，敲字母d即可。这一步以及后面几步都无需担心数据丢失，因为操作只保留内存中，只要不保存都不会写入磁盘 第三步是创建新分区，敲字母n即可，然后会依次提示新分区的编号、新分区的起始扇区、新分区的结束扇区，都按回车用默认值 第四步出现红字提示说磁盘上有个旧分区表的签名，是否删除，敲字母n不删除 第五步，确认以上操作都没有问题，敲字母w保存本次操作 至此，分区扩容就完成了。我们用1sblk命令可以看到现在分区/dev/sda1的容量已经从10GB变成15GB惹。
tips：如果是多盘阵列，则需要依次扩容每个盘位的分区。
第二步：扩容阵列
首先确认要扩容的阵列的名字，我这里的阵列是md0。注意，在上一步中需要确认阵列中所有硬盘都已经完成了分区扩容。
可以先用mdadm -D /dev/md0命令查看阵列的状态
可以看到阵列md0当前的容量是10GB，状态是clean。
注意扩容阵列之前一定要留意阵列的状态，不要在非clean状态下扩容，说不定阵列会炸。
然后用命令mdadm --grow /dev/md0 --size=max进行扩容，会有提示阵列已经扩容到15GB，此时再用mdadm -D /dev/md0可以看到阵列已经变成15GB惹。
用lsblk再次确认阵列扩容结果
第三步：扩容lvm卷
用vgs命令查看当前的lvm卷的信息，可以看到还是10GB。
用pvresize /dev/md0命令将阵列md0的扩容信息同步给lvm
然后用vgs确认lvm卷的空间信息，可以看到对应的lvm卷已经多出了5GB的剩余空间。
接着继续扩容这个lvm卷，可以先用df -h命令获取这个lvm卷的完整路径名（注意不要忘记最后面的那个-0）
用以下命令扩容
sudo lvextend -l +100%FREE /dev/mapper/trim_ec850a20_129d_4f06_ad54_21eec30762f9-0 ## 成功提示 Size of logical volume trim_ec850a20_129d_4f06_ad54_21eec30762f9/0 changed from &amp;lt;9.</description>
    </item>
    
    <item>
      <title>用终端修改飞牛系统（fnOS）的IP地址</title>
      <link>https://ruohai.wang/202502/fnos-edit-ip-via-terminal/</link>
      <pubDate>Fri, 28 Feb 2025 21:55:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202502/fnos-edit-ip-via-terminal/</guid>
      <description>fnos的网络配置文件的路径有别于debian官方，不是/etc/network/interfaces，也不是/etc/netplan/xxxx.yaml。
fnos的网络配置文件正确路径是/etc/NetworkManager/system-connections/xxxx.nmconnection。
用nano/vim编辑以上文件即可，修改后通过systemctl restart NetworkManager.service重启网络服务后生效。
参考文章 飞牛fnOS中如何通过命令行修改IP地址~关键时刻可能会成为你的救命稻草~ 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>NAS的CPU该如何选择？算力换时间 VS 时间换算力</title>
      <link>https://ruohai.wang/202502/how-to-select-nas-cpu/</link>
      <pubDate>Thu, 20 Feb 2025 14:43:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202502/how-to-select-nas-cpu/</guid>
      <description>前言 本文根据grok3 ai的回答进行整理
分析 对于家用NAS（网络附加存储），在选择是用“算力换时间”还是“时间换算力”时，确实需要根据你的使用场景和对功耗、电费的关注来权衡。以下是一些分析和建议：
算力换时间（高性能硬件，快速完成任务） 优点： 任务处理速度快，比如文件传输、数据备份、转码（如果你用NAS看视频）等都能迅速完成。 适合需要高性能的场景，例如4K视频转码、虚拟机运行或多用户并发访问。 缺点： 高性能硬件（如更强的CPU、更多内存）通常功耗较高。 即便在空闲时，高端NAS的待机功耗也可能比低功耗设备高。 硬件成本和电费开支会增加。 功耗影响： 以常见的家用NAS为例，低端设备（如双盘位Synology DS223j）待机功耗约10-15W，而高端型号（带Intel/AMD CPU的DS923+）可能达到30-50W甚至更高，负载时功耗还会显著上升。 如果每天运行24小时，按中国平均电费0.6元/度计算，低端NAS一年电费约50-80元，而高端NAS可能翻倍甚至更多。 适用场景：如果你对速度要求高（比如频繁处理大文件或需要实时服务），且不在意稍高的电费，算力换时间更适合。
时间换算力（低功耗硬件，慢点无所谓） 优点： 低功耗硬件（比如ARM架构的CPU）能极大减少电费开支。 对于普通家用需求（如文件存储、轻量备份、照片管理），性能通常够用。 待机功耗低，长期运行成本更可控。 缺点： 处理复杂任务时速度慢，比如转码视频、运行Docker容器或大数据迁移会明显拖时间。 不适合高负载或多任务并发的场景。 功耗影响： 以低功耗NAS（如Realtek RTD1619B芯片的型号）为例，待机功耗可能仅5-10W，即使满载也很少超过20W。 按同样电费计算，一年电费可能仅30-50元，非常省电。 适用场景：如果你主要用NAS存文件、做简单备份，不常跑重负载任务，且特别在意功耗和电费，时间换算力是更好的选择。
你的需求：功耗和电费优先 既然你明确提到在意功耗和电费，建议优先选择“时间换算力”的方案，也就是选用低功耗的NAS设备。以下是一些具体建议：
硬件选择： 推荐入门级或低功耗NAS，比如Synology DS223j（Realtek RTD1619B芯片）、QNAP TS-233等，功耗低且满足基础存储需求。 硬盘选择节能型（如WD Red或Seagate IronWolf的低转速型号），避免高功耗的企业级硬盘。 优化设置： 启用硬盘休眠功能，闲置时降低功耗。 避免常开不必要的服务（如媒体服务器、虚拟机）。 性能权衡： 如果偶尔需要高算力任务（比如视频转码），可以考虑用PC临时处理，而不是让NAS长期承担高负载。 折中方案 如果你既想要低功耗，又偶尔需要高性能，可以选择中端NAS（如Synology DS723+），搭配节能设置：
平时低功耗运行基本任务。 需要算力时临时提升性能，任务完成后进入休眠。 不过这种方案硬件成本稍高，适合预算宽裕的用户。 结论 综合来看，既然你更在意功耗和电费，时间换算力（低功耗硬件）是目前最适合你的选择。推荐从低功耗设备入手，满足日常需求的同时把电费控制在最低。如果未来需求增加，再考虑升级硬件或优化方案。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>qBittorrent跟随系统开机启动但无法匹配到IPv6用户的问题解决</title>
      <link>https://ruohai.wang/202412/qbit-start-after-ipv6-address/</link>
      <pubDate>Sun, 29 Dec 2024 16:48:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/qbit-start-after-ipv6-address/</guid>
      <description>前言 本文根据chatgpt的答案进行整理发布。
问题描述 在无头debian系统上装了qbittorrent-nox并设置了开机启动，启动脚本如下：
[Unit] Description=qBittorrent-nox service for user %I Documentation=man:qbittorrent-nox(1) Wants=network-online.target After=local-fs.target network-online.target nss-lookup.target [Service] Type=simple PrivateTmp=false User=%i ExecStart=/usr/bin/qbittorrent-nox TimeoutStopSec=1800 [Install] WantedBy=multi-user.target 在防火墙中也放行了ipv6的端口（有ipv6的公网地址）。
[ 6] 12345 (v6) ALLOW IN Anywhere (v6) 但发现在系统重启之后，qbit中的下载任务无法匹配到ipv6的用户，如果此时手动重启qbit，下载任务就可以立即匹配到ipv6用户。
初步判断是系统重启之后，在获取到网络和获取到ipv6公网地址之间存在一个时间差，但qbit在这个时间差中间启动了，导致qbit无法获取到ipv6公网地址。
问题解决 方法一：修改qbit的systemd启动脚本，增加对host是否获取到ipv6公网地址的判断逻辑
首先用ip addr命令获取系统网卡设备的名称
然后在qbit的启动脚本中添加一段ExecStartPre代码，其它部分不需要修改。
[Unit] Description=qBittorrent-nox service for user %I Documentation=man:qbittorrent-nox(1) Wants=network-online.target After=local-fs.target network-online.target nss-lookup.target [Service] ExecStartPre=/bin/bash -c &amp;#39;until ip -6 addr show dev enp6s18 | grep &amp;#34;inet6 .*global&amp;#34;; do sleep 1; done&amp;#39; Type=simple PrivateTmp=false User=%i ExecStart=/usr/bin/qbittorrent-nox TimeoutStopSec=1800 [Install] WantedBy=multi-user.</description>
    </item>
    
    <item>
      <title>使用systemd-mount配置nfs和samba共享的开机自动挂载</title>
      <link>https://ruohai.wang/202412/systemd-mount-nfs-and-samba/</link>
      <pubDate>Sun, 22 Dec 2024 22:32:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/systemd-mount-nfs-and-samba/</guid>
      <description>前言 本文根据chatgpt的回答进行整理。
正文 在linux上给额外的硬盘配置开机自动挂载一般都是通过编辑/etc/fstab来完成，很方便，但这种方式下，如果硬盘丢失，开机的时候就需要进入恢复模式重置/etc/fstab才能正常进入系统。
systemd-mount模块也能完成开机自动挂载（它设计出来就是替代/etc/fstab），而且在丢失硬盘的情况下不会影响正常开机，所以尤其适合用它来挂载nfs或者samba共享的目录（因为共享目录很可能会掉线）。
所以记录以下用systemd-mount挂载nfs和samba的模板和步骤。
NFS
假定要把nfs共享目录挂载到本地/mnt/nfs。
在/etc/systemd/system目录下新建mnt-nfs.mount文件，注意mnt-nfs对应挂载点/mnt/nfs，名字必须要对应。
配置文件内容如下
[Unit] Description=Mount NFS share Wants=network-online.target After=network-online.target [Mount] What=remote_server_ip:/remote/path Where=/mnt/nfs Type=nfs Options=_netdev,auto TimeoutSec=30 [Install] WantedBy=multi-user.target 参数释义：
What：NFS 服务器和共享路径。将 remote_server_ip:/remote/path 替换为你实际的 NFS 服务器 IP 地址和共享路径。 Where：挂载点的本地路径，即 /mnt/nfs。 Type：文件系统类型，这里是 nfs。 Options：挂载选项，_netdev 表示网络设备挂载，auto 表示在启动时自动挂载。 TimeoutSec：如果挂载操作在指定时间内没有完成，将终止挂载尝试。 WantedBy=multi-user.target：使挂载在系统进入多用户目标（即正常运行级别）时进行。 Samba
假定要把samba共享目录挂载到本地/mnt/smb。
在/etc/systemd/system目录下新建mnt-smb.mount文件，注意mnt-smb对应挂载点/mnt/smb，名字必须要对应。
配置文件内容如下
[Unit] Description=Mount Samba Share After=network.target [Mount] What=//samba-server/share Where=/mnt/smb Type=cifs Options=credentials=/home/username/.smbcredentials,iocharset=utf8,vers=3.0,uid=1000,gid=1000 TimeoutSec=30 [Install] WantedBy=multi-user.target 参数释义：
What：Samba 共享的地址（//samba-server/share）。 Where：挂载点（/mnt/smb）。 Options：挂载选项，可以根据需要调整。比如 credentials 是指一个包含用户名和密码的文件（/home/username/.smbcredentials）。 TimeoutSec：挂载操作的超时设置（可根据需要调整）。 最后一步：启用服务
完成以上配置后，启动服务 &amp;amp; 设置开机启动</description>
    </item>
    
    <item>
      <title>PVE基础使用：This host key is known by other names的问题处理</title>
      <link>https://ruohai.wang/202412/pve-virt-machine-duplicated-key-fingerprint/</link>
      <pubDate>Sun, 22 Dec 2024 21:56:12 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/pve-virt-machine-duplicated-key-fingerprint/</guid>
      <description>前言 开篇Tips：本文根据chatgpt的回答进行整理。
问题描述 在pve上使用同一个备份还原出多个虚拟机，还原成功后，每个虚拟机都各自生用ssh-keygen -t xxx生成一对密钥，然后用此密钥作为登录凭证进行ssh登录认证时，本地的终端出现以下提示
The authenticity of host &amp;#39;[192.168.1.207]:12345 ([192.168.1.207]:12345)&amp;#39; can&amp;#39;t be established. ED25519 key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx. This host key is known by the following other names/addresses: C:\Users\Ruohai/.ssh/known_hosts:11: [192.168.1.209]:12345 Are you sure you want to continue connecting (yes/no/[fingerprint])? 从提示内容来看，就是用同一个备份还原出的两个虚拟机，虽然各自生成了密钥，但密钥的指纹（fingerprint）相同。
我尝试在两个虚拟机中删除旧ssh-key然后重新生成，但本地终端依旧会出现以上提示。
问题解决 在Proxmox VE（PVE）系统中，当你使用相同的虚拟机备份（即还原同一个虚拟机的镜像）来创建多个虚拟机时，每个虚拟机会有一个相同的SSH密钥对。如果这些虚拟机在同一个网络中并且它们的SSH密钥相同，那么它们的SSH指纹也会相同。当你尝试通过SSH连接到这些虚拟机时，系统会提示“key指纹重复”，因为它发现多个主机具有相同的SSH指纹。
解决方法：清空旧的SSH密钥，强制系统重新生成密钥。
操作：删除/etc/ssh目录下的ssh_host_*_key文件并重启服务。
sudo rm /etc/ssh/ssh_host_* sudo dpkg-reconfigure openssh-server 在执行dpkg-reconfigure命令时，会弹出蓝色窗口进行选择
选择第二项keep the local version currently installed，即保持当前的/etc/sshs/sshd_config配置文件，不要覆盖。
然后系统会重新生成不同加密模式的密钥对，提示信息如下
ruohai@debian:/etc/ssh$ sudo dpkg-reconfigure openssh-server Creating SSH2 RSA key; this may take some time .</description>
    </item>
    
    <item>
      <title>PVE基础使用：创建虚拟机时机型i440fx和q35如何选择</title>
      <link>https://ruohai.wang/202412/pve-i440fx-vs-q35/</link>
      <pubDate>Fri, 20 Dec 2024 01:03:30 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/pve-i440fx-vs-q35/</guid>
      <description>前言 开篇Tips：本文根据chatgpt的回答进行整理。
正文 在pve系统下创建虚拟机时，有一个机型的选项，默认是i440fx，还有另外一个可选项q35。这两选项有何区别，它俩孰优孰劣，该如何选择呢？
在 Proxmox VE (PVE) 中创建虚拟机时，i440fx和q35是两种不同的虚拟机硬件平台，它们主要的区别在于芯片组的模拟。
i440fx：
老旧平台，类似于早期的 Intel 440FX 芯片组。 它支持较老的硬件和设备模型，兼容性较强，适合运行较旧的操作系统或软件（比如 Windows XP、Windows 7 等）。 适合需要较低兼容性要求的系统。 q35：
较新的平台，模拟的是 Intel 的 Q35 芯片组，支持更多现代特性。 提供更好的硬件虚拟化支持，例如更好的 PCIe 设备支持、SATA 和更高效的内存管理。 支持 UEFI 启动，适合运行现代操作系统，尤其是 Windows 10、Windows 11 或 Linux 现代发行版。 选择哪个？
如果你要运行较旧的操作系统或不需要特殊硬件支持，i440fx 是一个更安全的选择，因为它兼容性更好。 如果你要运行较新的操作系统或需要现代硬件特性（如 PCIe 支持、UEFI 启动等），q35 更适合。 一般来说，现代的虚拟化需求推荐选择 q35，尤其是在需要支持 64 位 UEFI 引导或现代硬件功能时。 结论 默认i440fx适合绝大部分情况，兼容性更好 如果硬件比较新，推荐q35 如果有特殊需求，比如uefi启动（win8之后的windows系统）、硬件直通，选q35 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>使用smartmontools对硬盘进行long test任务显示interrupted的问题处理</title>
      <link>https://ruohai.wang/202412/smartmontools-long-test-interrupted/</link>
      <pubDate>Wed, 18 Dec 2024 23:17:20 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/smartmontools-long-test-interrupted/</guid>
      <description>前言 开篇Tips：本文根据chatgpt的答案进行整理发布。
问题描述 在debian下使用smartmontools对硬盘进行long test
smartctl -t long /dev/sda 终端会显示smartctl开始在后台对硬盘进行长测试，预计97分钟。
=== START OF OFFLINE IMMEDIATE AND SELF-TEST SECTION === Sending command: &amp;#34;Execute SMART Extended self-test routine immediately in off-line mode&amp;#34;. Drive command &amp;#34;Execute SMART Extended self-test routine immediately in off-line mode&amp;#34; successful. Testing has begun. Please wait 97 minutes for test to complete. Test will complete after Wed Dec 18 16:41:14 2024 UTC Use smartctl -X to abort test. 但实际每次检测了10%以后这个long test任务就中止了，用smart -a可以看到检测记录</description>
    </item>
    
    <item>
      <title>使用smartmontools查看usb外接硬盘时显示Unknown USB bridge的问题处理</title>
      <link>https://ruohai.wang/202412/smartmontools-unknow-usb-bridge/</link>
      <pubDate>Wed, 18 Dec 2024 22:07:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/smartmontools-unknow-usb-bridge/</guid>
      <description>前言 开篇Tips: 本文根据chatgpt的回答进行整理。
问题描述 在debian下用smartmontools工具查看usb外接硬盘的smart信息是，根据经验，敲入以下命令
smartctl -a /dev/sdx 此时会出现错误提示
/dev/sda: Unknown USB bridge [0x152d:0x0578 (0x204)] Please specify device type with the -d option. Use smartctl -h to get a usage summary 问题解决 这个问题通常出现在smartmontools无法自动识别通过USB接口连接的硬盘。USB桥接器的控制器可能与smartctl无法兼容，因此提示&amp;quot;Unknown USB bridge&amp;quot;。为了解决这个问题，你需要手动指定硬盘设备的类型。
你可以通过添加-d选项来强制指定设备类型，具体步骤如下：
通过-d选项指定设备类型：你可以尝试用-d usb来指定USB设备类型。命令如下：
smartctl -d usb -a /dev/sda 尝试不同的设备类型：如果-d usb不工作，可以尝试其他的设备类型。常见的选项包括：
-d sat：适用于SATA硬盘。 -d scsi：适用于SCSI硬盘。 -d ata：适用于传统ATA硬盘。 例如，如果你使用的是SATA硬盘，通过USB桥接，你可以尝试：
smartctl -d sat -a /dev/sda Tips：实测用-d sat可以识别通过usb连接的外接sata硬盘。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>Debian下Crontab中的Java任务不执行的问题排除</title>
      <link>https://ruohai.wang/202412/crontab-java-not-run/</link>
      <pubDate>Wed, 18 Dec 2024 18:45:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/crontab-java-not-run/</guid>
      <description>前言 开篇Tips：本文根据chatgpt的回答进行整理。
问题描述 使用的azulJDK官方下载的jre17，在debian下解压到自定义目录以后，在~/.bashrc下配置了java的环境变量
export JAVA_HOME=/opt/jre export PATH=$JAVA_HOME/bin:$PATH 执行java -version可以正常输出版本信息。
但是在crontab中配置了定时任务【30 6 * * * java -jar /path/to/my/jarfile.jr】的定时任务不执行。与此对比的是，在另一台debian机器上，直接用apt方式安装default-openjre以后（apt仓库里的jre版本也是17），同样的cron任务可以正确执行。
问题原因 crontab任务没有正确识别这些变量的原因可能是cron执行时使用的是不同的环境，它不会加载~/.bashrc或其他shell配置文件。
说人话就是crontab没有读取到我配置在~/.bashrc中的java环境变量
解决方法 方法一：在 crontab 中显式设置环境变量
在 crontab 中直接设置 JAVA_HOME 和 PATH 环境变量，确保 cron 执行时能够找到 java。
打开 crontab 编辑器：
crontab -e 然后在 crontab 文件中添加环境变量的配置，例如：
# 显式设置环境变量 JAVA_HOME=/opt/jre PATH=$JAVA_HOME/bin:$PATH # 定时任务 30 6 * * * java -jar /path/to/my/jarfile.jar 这样，每次 cron 执行任务时，都会加载这些环境变量。
方法二：在 crontab 中定义完整的 java 路径
如果不想设置环境变量，也可以直接在 crontab 中使用 java 的完整路径。</description>
    </item>
    
    <item>
      <title>在Windows 10 LTSC上安装appxbundle文件</title>
      <link>https://ruohai.wang/202412/windows-ltsc-install-appxbundle/</link>
      <pubDate>Wed, 18 Dec 2024 18:32:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/windows-ltsc-install-appxbundle/</guid>
      <description>前言 开篇tips：本文基于chatgpt的回答进行整理修改。
正文 在 Windows LTSC（长期服务通道）版本上安装 .appxbundle 文件的步骤和其他 Windows 版本类似，可以通过 PowerShell 或者通过双击文件进行安装。以下是详细步骤：
方法 1：使用 PowerShell 安装
在 PowerShell 中输入以下命令来安装 .appxbundle 文件：
Add-AppxPackage -Path &amp;#34;C:\path\to\your\appxbundlefile.appxbundle&amp;#34; 安装过程可能会需要一些时间，完成后你应该能够在开始菜单找到应用程序。
Tips：我用的是这个方法，实测有效。
方法 2：直接通过双击文件安装
找到.appxbundle文件
在文件资源管理器中找到.appxbundle文件，双击.appxbundle文件，Windows 应该会自动开始安装该应用。如果文件关联正确，它会直接启动 Microsoft Store 或应用安装界面，然后按照屏幕上的提示完成安装。
Tips：这个方法在windows 10 ltsc上肯定是行不通的。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>Windows下将Samba共享映射为本地文件夹</title>
      <link>https://ruohai.wang/202412/windows-mklink-soft-link/</link>
      <pubDate>Wed, 18 Dec 2024 18:12:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/windows-mklink-soft-link/</guid>
      <description>前言 开篇TIPS：本文基于chatgpt内容进行整理。
正文 在Windows上，Samba共享通常会被映射为网络驱动器（如Z盘），而不是本地磁盘。
Windows本身并没有直接提供将Samba共享映射为本地磁盘的功能，因为Samba共享本质上仍然是通过网络协议（如SMB/CIFS）进行访问的。
然而，可以使用一些替代方法实现类似的效果：
方法一：使用符号链接（Symbolic Link）:
你可以在Windows上创建符号链接，将某个目录链接到Samba共享目录。这样，虽然共享仍然通过网络访问，但可以像本地目录一样使用。
在cmd命令行中，使用mklink命令，注意使用管理员权限启动cmd，否则会报权限不足：
mklink /D E:\samba \\192.168.1.111\movie 其中/d或者/D指的是软链接，对应的硬链接参数是/J或者/j。
使用以上命令即可将192.168.1.111服务器上共享的movie目录映射到本地E盘的samba文件夹。
Tips：我用的这个方法，实测有效。缺点是只能映射成一个本地文件夹。
方法二：利用第三方软件（如Rclone、WinFsp等）:
有些第三方工具如Rclone（一个开源工具）允许你将远程共享（包括Samba）挂载为本地磁盘（类似于网络驱动器，但更加灵活）。 使用Rclone时，你可以通过设置挂载命令把Samba共享挂载到Windows的本地磁盘上，表现得更像本地磁盘。 例如：
rclone mount remote:/path/to/share X: --vfs-cache-mode writes 这里的 remote:/path/to/share 代表Samba共享，X: 是你希望它映射为的本地驱动器字母。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>AI开始替代个人博客</title>
      <link>https://ruohai.wang/202412/ai-starts-replace-blog/</link>
      <pubDate>Tue, 17 Dec 2024 18:14:51 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/ai-starts-replace-blog/</guid>
      <description>最近俩月开始使用chatgpt和copilot来帮助解决一些日常中我会碰到的问题，大部分是折腾linux时候的一些常见的技术小问题，小部分是比如杭州周边游的推荐、一些头痛脑热生病、心理健康类的问题。
这其中的大部分问题，也就是折腾linux、arm盒子，如果是以前，我在通过搜索引擎找解决方案 + 自己实践解决以后，大概率会根据自己的实际处理过程，花点时间写一篇博客出来做记录。但是自打从【搜索引擎搜解决方案】转向【直接问chatgpt】以后，写篇博客记录一下自己解决问题的过程已经变得没有意义了。
为什么用搜索引擎找解决方案的时候有必要自己写一篇博客做记录？
因为搜索引擎搜出来的内容乱七八糟，质量参差不齐，而且中文互联网上的内容很多都是内容农场抄来抄去，很多不要脸的社区搬了别人的内容以后还加上各种查看限制，比如注册可见、登录可复制、下载附件收费甚至挂马。如果是个人网站，可能域名过期、网站关闭、内容已删除。所以最后在找到真正有用的方案以后，有必要自己做个归纳整理，记录成文，方便自己后期回溯。当然如果能帮到别人就更好了。
但是有了ai以后，用搜索引擎会碰到的问题就完全不存在了，虽然ai给出的答案正确率大概也就80~90%，但是对比搜索引擎里一堆良莠不齐的结果 + 自己一个一个打开查看的体验好太多了。而且ai给出的答案排版也非常的漂亮，比自己辛辛苦苦敲markdown发布的博客在可读性上简直是吊打。
这就导致了大部分的it技术类的博客已经完全没有必要记录了，直接问ai即可，也省去了自己敲markdown码字的过程。
以后我可能直接拿chatgpt回答的内容整理修改作为博客发布了。
剩下的依然有必要更新发布的博客内容，大概也就那种原创性的、和自己有关的内容，比如记录生活、记录想法、输出观点之类。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>PhotoPrism缺点大吐槽：哪哪都不行，建议弃用</title>
      <link>https://ruohai.wang/202412/photoprism-complains/</link>
      <pubDate>Thu, 05 Dec 2024 15:18:39 +0800</pubDate>
      
      <guid>https://ruohai.wang/202412/photoprism-complains/</guid>
      <description>前言 先声明：从去年的7~8月份我开始折腾自建相册，当时对比了immich最后选择了photoprism，至今也用了一年半的时间了，所以算是个老用户了，不是简单新手向的吐槽。
为什么用了一年半以后才开始写这个吐槽文，因为我自己用java写了一个小服务来处理照片归档，所以最后一个对pp的依赖也没有了，终于可以把pp从我的服务器上remove掉惹。
在放弃pp的这一刻，写篇文章记录一下我在使用pp的过程中碰到的几个超级大槽点。
超级大槽点 槽点一：照片统一重命名都按照UTC时区处理
这个是pp归档照片时最大的bug。
pp有个功能，就是按照统一规则生成一个唯一的文件名将照片进行重命名，所以最后的文件名都是yyyyMMdd_HHmmss_xxxxxxxx.jpg这种格式，其中最后8位x应该是类似md5一样根据文件生成的8位字符串。
这个功能很好用，也是强制启用的功能。按照这个规则重命名以后的照片/视频，根据文件名就能很方便的知道文件的创建时间，而且也统一了文件名，看上去很干净规整。
但是这个功能有个很大的bug！！！！
pp是按照utc时区来生成的文件名，也就是北京东八区的照片时间需要减去8个小时来生成文件名！！！
比如某时某刻我在东八区拍了一张jpg照片，拍摄时间是2024年12月5日15点36分44秒，那照片归档正确的文件名应该是20241205_153644_xxxxxxxx.jpg。但是pp会读取照片exif中的时区信息，换算成utc时区的时间生成文件名，也就是北京时间减去8个小时，最后就变成了20241205_073644_xxxxxxxx.jpg。
(╯‵□′)╯︵┻━┻
不过，比起原始照片文件各种乱七八糟无规则、无意义、自然递增的文件名格式，现在这个文件名只是时间少了8个小时，好像也不是太大的问题。
那就要配合上下面这个大杀器！
槽点二：照片归档也按照UTC时区处理
pp归档图片和视频文件时，是根据文件的创建时间，按照yyyy/mm的目录结构来归档文件的。
但是由于槽点一的存在，又导致了一种情况：
月初拍的照片有可能被归档到上个月！比如，2024年12月1号早上7点拍的照片，减去8小时是2024年11月30号晚上11点，就被归档到2024/11目录惹 年初拍的照片可能被归档到上一年！比如：2024年1月1日早上7点拍的照片，减去8小时候是2023年12月31日晚上11点，就被归档到2023/12目录惹 这种情况下，如果在pp中搜索2024年12月份的照片，或者搜2024年的照片，这种错误归档的照片就搜不到了！！！
(╯‵□′)╯︵┻━┻
我在使用photoprism的这一年半时间里，也想过是不是我什么地方没设置正确，比如是不是docker-compose.yml中没有加timezone参数，是不是服务器的时间设置错误。我在官方wiki和官方github issue里也找过，但实在是个人能力有限，没有找到什么有用的解决方法。我甚至在想，也许这是因为pp是一个面向全球用户的服务，开发团队为了解决那些经常往返不同时区的用户的照片归档问题，所以直接暴力的统一换算成utc时区。如果真的如此，那我要给pp开发团队送上1000个赞👍，这明显不是像我这种今生都没有离开过东八区的宅男能有的国际视野。
我非常喜欢pp这个按照文件时间统一命名的功能，虽然有换算成utc时区的大槽点，但另外几个相册（比如immich）都没有这个功能，所以最后我不得不继续坚持使用pp。
槽点三：图片算法识别功能很垃圾
pp作为一个完整的相册服务，也提供了图像算法识别功能，用来进行图像主体识别、人脸识别、自动标签、自动创建精彩时刻、图片质量打分等等智障功能。
但我实体使用下来的体验是：不好用，非常不好用。
不说和google、apple的图像识别算法对比，也不和国内各个手机厂商提供的手机智能相册比，只是和immich比，我都感觉差了很多。主体识别错误、检测不到人脸、自动标签错误，很难说达到可用级别。
对于pp的图像识别算法功能，我的点评是：能用但是不好用，徒增功耗、浪费算力，建议关闭。
槽点四：免费版pp的gps解析功能有限制
相信很多pp用户和我一样都是用的免费社区版（community）做自建相册，pp免费版也带了照片地图功能，根据照片exif中保存的gps信息显示照片的拍摄地并显示在地图上。
但是，但是，pp的骚操作又又又来惹！！！
免费版pp根据gps坐标数据解析地理位置的api有请求数量限制！！！有rate limit！！！
也就是如果导入比较多的照片，很容易就达到这个reverse geocodeing接口的请求数量限制，这个api会超时无响应报timeout错误让你以为是自己网络出了问题。因为immich就有很多请求是访问google，如果不挂科学上网使用immich，查看日志的时候会看到大量的timeout请求。
如果不小心触发了这个rate limit，很抱歉你的pp解析照片地理位置的功能就gg了。
如果你在导入照片的时候，导到中途免费请求次数用完了，会发生什么：
剩下的照片依然能导入，只是剩下的照片都没有地理信息了 解析照片gps的请求依然会发起，但每次都是超时无响应（timeout），这个超时要等好几秒，导致整个导入过程变成非常慢 在官方wiki我没有查到明确的免费请求次数，也没有查到如果免费请求次数耗尽以后是否会隔天重置。
不过作为免费白嫖党，官方对此功能做出rate limit也算可以理解，因为官方提供这个服务需要开销，只是让付费用户分摊了。
如果你是pp重度用户，建议花钱订阅支持pp，就可以无限制使用照片地理信息解析的接口惹。
如果你和我一样是pp白嫖党，建议关闭pp的【地点】功能。
槽点五：普通图片的时间信息提取规则不完善
首先定义下这里说的普通图片。这里把用手机、相机拍摄而成的图片称之为【拍摄行为】产生的照片，把存的网图、微信图、截图、微博图称之为【非拍摄行为】产生的普通图片。
pp在将文件进行归档时，需要提取文件的时间信息。如果是照片文件，这类文件的exif中都有完整的Date/Time Original、 Date/Time Digitized信息，只需要读取这些tag中保存的时间字符串解析成时间，然后用这个时间给文件重新命名就行了（别忘了会减去8个小时）。
如果是普通图片，这种文件的exif中没有Date/Time Original、 Date/Time Digitized这些tag，那要如何提取这个文件的时间呢？
经过我的摸索，pp提取文件时间信息的规则优先级如下：
Date/Time Original、 Date/Time Digitized：这俩tag可以理解位照片的拍摄时间，pp读到这个时间后会按照utc时区处理 从文件名中提取时间：图片文件的exif没有以上两个tag，但文件名中包含了时间信息，比如Snipaste_2024-12-05_20-50-36.jpg，只需要拿到2024-12-05_20-50-36这段字符进行解析即可。这个规则下，pp读到什么时间就是什么时间，不会处理时区。 如果以上两个规则都无法提取到文件的时间，则以系统当前时间为准，pp读到这个时间后也会按照utc时区处理 这些规则不仅仅是pp在用，其它相册服务应该也大差不差。
从以上规则可以看出，普通图片文件很容易因为无法满足规则1、规则2，最后在归档时，直接以系统当前时间给文件重命名。从某种程度上说，这倒也无可厚非，毕竟没有其它方法获取这种文件的创建时间了，只能用这种方式作为保底。
但是，是的，又要接一个但是，为什么这也会成为pp的一个大槽点？
因为pp的规则2（从文件名中提取时间）甚至都不支持它自己的归档文件名格式，也就是yyyyMMdd_HHmmss_xxxxxxxx，pp碰到这么标准的文件名竟然无法提取时间，最后会按照规则3给文件重命名！！！
这个bug会导致的问题就是：用pp归档过一次的文件，如果重新导入pp，那这些普通图片文件都会按照系统当前时间进行重命名和归档！也就是这些普通文件不管第一次导入时被归档到哪天，在二次导入时，都会被归档到今天。
你可能会觉得奇怪，为什么会有傻x把已经归档过的照片反复导入pp归档。</description>
    </item>
    
    <item>
      <title>在Debian上编译Memos的前端工程</title>
      <link>https://ruohai.wang/202411/memos-frontend-build-on-debian/</link>
      <pubDate>Fri, 29 Nov 2024 11:31:50 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/memos-frontend-build-on-debian/</guid>
      <description>前言 【usememos/memos】是这一年多来我高频使用的一个开源、自托管的网络服务，每天都会在自建的memos上更新好几条，已经被我当作一个自建的微博在使用。
因为我部署memos的机器是迅雷出品的赚钱宝一代（ws1408），硬件非常老（armv7l） + 适配的系统也很老（3.10内核的openwrt，不支持docker），所以我一直用的原生部署。
原生部署的好处是可以脱离docker，缺点就是前后端都需要自己编译。
memos的后端工程，github上已经有热心网友编译了适配各硬件平台的二进制包，开箱可用，就不需要自己动手了。指路：
memos的前端工程，我没有找到现成的，但是前端项目的优点是真正【一次编译处处可用】，随便弄个电脑编译出来以后在任何机器上都可以用。所以决定自己动手编译。
update：
刚发现【memospot/memos-builds】这个项目已经把前后端都一起编译打包了，不需要自己动手编译了 🤣
之前我已经写过一篇【在Windows上编译Memos的前端项目】。这次准备把memos从0.17.1更新到0.18.2，所以又要自己编译一份memos的前端工程，正好试着在debian上编译试试。
关于memos的吐槽 memos这个项目的用户对开发者的怨念都挺大的，🤣，因为ui/ux和功能经常变化，旧功能bug不fix的情况下不断引入新的功能。
我停在0.17.1这个版本大半年的时间，因为它暂时符合了我的需求：
有评论功能，而且评论的入口非常显眼 有首页热力图 每日回顾的入口可以很方便的进行日期跳转 但随着我高频使用memos以及数据量的上升，这个版本出现了越来越严重的性能瓶颈：
首页热力图的api设计有问题，是从后端获取全部memo记录以后在前台根据每条memo的时间戳进行按日统计，导致页面响应迟钝 每日回顾中跳转日期查看当天的memos的api设计也有问题，是从当前时间开始每次往前获取20条，直到爬到所选日期的memos为止。 搜索功能的api设计更是有问题，也是根据时间倒序每次获取20条然后在前端进行查询条件匹配 上面这三个设计有问题的api导致memos在数据量上去以后，首页加载、搜索功能、每日回顾显示指定日期memos这三个功能完全无法使用。
这个api设计的bug直到0.18.2版本才fix，但0.18.2版本又有了新的问题，比如评论入口及其隐蔽、首页热力图取消、时间线功能无法跳转到过往日期。
0.18.2不完美，之后的版本不仅没解决已有的问题，而且界面又开始变动 + 引入了不稳定的新功能，所以暂时还是选择停留在0.18.2。
编译 第一步：编译环境准备
编译memos前端项目需要node.js和npm，所以先安装这俩。我用的apt仓库中的nodejs和npm，虽然版本老了一点，但不影响这个项目的编译。
注意：安装大概需要1GB的存储空间。 sudo apt install nodejs npm 安装完以后通过-v命令确认安装成功
然后，因为众所周知的网络原因，需要设置一下npm的国内镜像，我这里用的是taobao的镜像
sudo npm config set registry https://registry.npmmirror.com apt仓库安装的nodejs/npm是不带corepack模块的，但编译memos需要用到corepack，所以安装一下
sudo npm install -g corepack 然后又双叒叕因为众所周知的网络原因，需要给corepack指定国内镜像地址
export COREPACK_NPM_REGISTRY=https://registry.npmmirror.com 好了，到这里就完成编译环境的准备工作了。
第二步：下载源码
这次编译我选择的是0.18.2版本，到项目的github仓库release页面找到对应版本的源码，下载到本地即可
# 下载 wget https://github.com/usememos/memos/archive/refs/tags/v0.18.2.tar.gz # 解压 tar -zxvf v0.18.2.tar.gz 下载以后查看Dockerfile文件，确认编译的步骤
# Build frontend dist. FROM node:20-alpine AS frontend WORKDIR /frontend-build COPY .</description>
    </item>
    
    <item>
      <title>Syncthing基础使用：在Windows下设置开机自启 &amp; 后台运行</title>
      <link>https://ruohai.wang/202411/syncthing-auto-start-and-run-backend-on-windows/</link>
      <pubDate>Thu, 21 Nov 2024 02:18:10 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/syncthing-auto-start-and-run-backend-on-windows/</guid>
      <description>前言 syncthing官方提供的windows版本在运行时需要保持一个命令行窗口并通过浏览器进行配置的方式进行使用。
但我想要把syncthing设置为跟随windows系统开机自动启动并保持后台运行，最好是作为一个windows服务存在，尽量做到无感使用。
syncthing官方提供了两种方案，第一种是把syncthing添加到windows系统服务（比较麻烦），第二种是通过把快捷方式添加到启动目录（有bug，&amp;ndash;no-console参数在windows下无效）
最后经过实践，找到了一个比较方便快捷的设置方式，在此做个简单记录。
设置 第一步：下载文件 &amp;amp; 解压
从synchting官方下载windows版本的压缩包，解压到本地目录，我把它解压到D:\Program Files\Syncthing目录。
第二步：创建脚本
在syncthing的安装目录下新建一个bat文件，录入以下内容后保存。
@echo off if &amp;#34;%1&amp;#34;==&amp;#34;h&amp;#34; goto begin start mshta vbscript:createobject(&amp;#34;wscript.shell&amp;#34;).run(&amp;#34;&amp;#34;&amp;#34;%~nx0&amp;#34;&amp;#34; h&amp;#34;,0)(window.close)&amp;amp;&amp;amp;exit :begin cd /d D:\Program Files\Syncthing &amp;amp;&amp;amp; syncthing.exe serve --no-browser --no-restart --logflags=0 注意bat脚本中最后一行中的文件路径D:\Program Files\Syncthing要根据自己的实际情况调整。
第三步：创建快捷方式
将上一步中创建的bat脚本创建快捷方式。
然后在地址栏中访问%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup，或者用win+r呼出运行窗口以后输入shell:startup，打开widows启动目录。
最后把bat脚本的快捷方式粘贴到这个启动目录即可。
好了，到这里就完成了syncthing在windows系统下的开机自启 &amp;amp; 后台运行了，开机的时候cmd窗口会一闪而过，但syncthing的进程依然在后台运行。
🎉
官方方案bug的修复 官方方案提到的第二种方式，创建一个快捷方式并在快捷方式中添加--no-console --no-browser参数，我实测在windows10下--no-console参数是无效的，但可以通过修改设置来实现。
在自己创建的快捷方式上右键——属性——选项，勾选使用旧版控制台，然后重启系统即可。
参考文章 使用syncthing多终端数据同步，并设置随系统自动启动 Starting Syncthing Automatically -no-console option does not work when Windows Terminal is set as Default Terminal application 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Linux上挂载LVM分区 &amp; LVM VG name重复的问题解决</title>
      <link>https://ruohai.wang/202411/lvm-mount-on-linux/</link>
      <pubDate>Tue, 19 Nov 2024 12:11:48 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/lvm-mount-on-linux/</guid>
      <description>前言 最近重装pve系统，把系统盘从32G的硬盘换成了120GB的硬盘。
因为旧的pve系统盘上还有一个虚拟机备份，所以准备直接把旧pve系统盘插到新pve主机上，然后挂载旧硬盘上的分区把备份文件复制到新硬盘的分区上。
但实际操作中碰到了两个问题：
pve系统盘是lvm分区而不是传统分区，无法直接挂载 新旧两个pve系统盘下的lvm volume group的名字都叫做pve，出现了volume group重名的问题 在网上找了一些资料和文章，最后当然成功解决的问题，顺便在此做个简单记录。
tips: volume group以下都简称vg 准备工作 把旧的系统盘插到pve主机上之后，先通过lsblk查看硬盘信息
# 输入命令 root@pve:~# lsblk # 显示硬盘信息 NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS ## sda是现在的系统盘 sda 8:0 0 119.2G 0 disk ├─sda1 8:1 0 1007K 0 part ├─sda2 8:2 0 1G 0 part └─sda3 8:3 0 118.2G 0 part ├─pve-swap 252:0 0 7.6G 0 lvm [SWAP] └─pve-root 252:1 0 110.6G 0 lvm / # 这是老的pve系统盘，有三个分区 sdd 8:48 0 29.</description>
    </item>
    
    <item>
      <title>大运河杭钢公园简单记录</title>
      <link>https://ruohai.wang/202411/hanggang-park/</link>
      <pubDate>Tue, 19 Nov 2024 11:01:48 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/hanggang-park/</guid>
      <description>前言 大运河杭钢公园，由废弃的杭州钢铁厂旧址改造而成的公园，保留了大量的焦炉、高炉、传送带等大型设施，非常适合拍一些废土风格的照片。
夏天的时候听说已经开放了，但当时开车去绕了两圈都没有找到入口。
请一定带上你身边最会拍照的那位好朋友一起去拍照打卡。
目前园区里已经由一个图书馆和一个seesaw咖啡馆
钢铁巨兽
钢铁巨兽
一些手机随手拍的照片。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>黄龙洞宝石山轻徒步路线记录</title>
      <link>https://ruohai.wang/202411/baoshishan-hike/</link>
      <pubDate>Mon, 18 Nov 2024 12:39:36 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/baoshishan-hike/</guid>
      <description>前言 很久没出门了，今天中午出门去了一趟黄龙洞 + 宝石山的轻徒步路线。
今天天气阴沉，秋风瑟瑟，而且是工作日，所以山上的游客很少。
这条路线从黄龙洞上山，到宝石山一弄下山，途径初阳台、蛤蟆峰、抱朴道院、保俶塔。在蛤蟆峰是制高点，可以俯瞰西湖和杭州市区，景色很好，强烈推荐。
简单放几张照片，做个记录。
蛤蟆峰制高点
西湖断桥
保俶塔和远处的杭州环球中心
宝石流霞
寿星石
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>PVE基础操作之：虚拟机的备份和还原</title>
      <link>https://ruohai.wang/202411/pve-backup-and-restore-virt-machine/</link>
      <pubDate>Thu, 14 Nov 2024 05:12:34 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/pve-backup-and-restore-virt-machine/</guid>
      <description>前言 pve上操作虚拟机的备份与还原都可以通过web ui进行操作，非常的简单方便。
备份 在pve的webui中点击需要备份的虚拟机，依次点击备份——立即备份
在弹窗中进行备份的自定义设置。基本上啥都不需要改，全部用默认参数即可。
点击立即备份，会有新弹窗显示备份进度，耐心等待知道出现TASK OK就表示备份完成。
在虚拟机的备份一栏中可以看到本机的备份文件。
在本地存储的备份一栏中也可以看到所有虚拟机的备份文件。
到此就完成了虚拟机的备份。
还原 在pve的webui中，可以通过虚拟机的备份入口，或者从pve目录的备份入口，找到需要还原的虚拟机备份文件，点击还原。
在弹出的窗口中设定还原虚拟机时的参数。
存储：指定虚拟机虚拟磁盘文件的存放位置，留空默认就是和备份虚拟机的存储位置相同 VM：指定虚拟机的vmid，默认即可 唯一：如果用同一个备份文件部署多个虚拟机，需要勾选此项用来生成唯一mac信息，避免局域网内mac地址冲突 其它参数都用默认即可 点击还原后会弹窗显示任务进度，依然是等到出现TASK OK就表明还原成功。
到此就完成了虚拟机的还原。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>升腾C92开启USB3.0的设置</title>
      <link>https://ruohai.wang/202411/centerm-c92-enable-usb3/</link>
      <pubDate>Wed, 13 Nov 2024 12:30:48 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/centerm-c92-enable-usb3/</guid>
      <description>前言 手上的升腾c92/J1900刷pve跑虚拟机都有两周了才发现自带的usb3.0接口竟然一直工作在usb2.0模式下，所以赶紧网上搜下一下怎么开启usb3.0，写篇文章做个记录。
设置 首先确认自己的机器usb3.0功能是否已经开启
lsusb -t 如下图，如果是5000M则表明已经开启usb3.0功能，如果都是480M或者更低的数字则说明没有开启。
开机按F2进入bios界面，调整以下设置项来开启usb3.0支持
Chipset-&amp;gt;South Bridge-&amp;gt;USB Configuration-&amp;gt;USB2.0(EHCI&amp;gt; Support 修改为Disabled Chipset-&amp;gt;South Bridge-&amp;gt;USB Configuration-&amp;gt;XHCI Mode 修改为Enabled 在参考文章中，作者还提供了开启cpu睿频、来电自启的设置方式，有需要的可以到原文中查看。
参考文章 升腾C92: BIOS开启USB3.0方法 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>使用acme.sh通过dns验证方式获取Let&#39;s Encrypt证书</title>
      <link>https://ruohai.wang/202411/acmesh-get-lets-encrypt-cert/</link>
      <pubDate>Tue, 12 Nov 2024 11:24:07 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/acmesh-get-lets-encrypt-cert/</guid>
      <description>前言 之前已经写过一篇相关主题的文章，但那片文章主要内容都是如何debug，最后搞得自己想要重新部署acme.sh的时候依然一头雾水，所以重写一篇。
acme.sh通过认证的方式有两种
http：需要在网站更目录放置文件来验证域名的所有权 dns：需要有权限在dns解析中添加记录来验证域名的所有权 我这里选择的是第2种验证方式。
操作过程 通过acme.sh通过dns验证的方式获取let&amp;rsquo;s encrypt证书的方式可以分为以下几步：
获取和安装acme.sh 通过dns验证 更新证书 以下分步骤讲解。
第一步：获取和安装acme.sh
通过以下命令自动获取 &amp;amp; 安装，root或者non-root用户都可以。
curl https://get.acme.sh | sh -s email=my@example.com # 或者 wget -O - https://get.acme.sh | sh -s email=my@example.com tips： 因为网络原因大概率会提示网络链接错误，需要自己解决网络问题 脚本执行完成后，默认会把acme.sh添加为alias，但需要手动重载一下用户配置文件才会生效 第二步：通过dns验证
我用的是阿里云的dns解析服务，所以需要先配置阿里云api key信息。其它dns服务商的配置参数可以翻阅参考文章中的第二篇文章。
export Ali_Key=&amp;#34;&amp;lt;key&amp;gt;&amp;#34; export Ali_Secret=&amp;#34;&amp;lt;secret&amp;gt;&amp;#34; 然后执行dns验证
acme.sh --issue --dns dns_ali -d example.com -d *.example.com tips: dns_ali显而易见是指阿里云dns服务，其它dns服务商的api名字可以通过查询参考文章二获得 -d example.com生成单域名证书，-d *.example.com生成泛域名证书，但泛域名证书容易滥用，需要注意网络安全防护 第三步：更新证书
完成dns验证以后，就可以更新证书了。
acme.sh --renew -d example.com -d *.example.com 更新成功之后，把fullchain.cer和example.com.key两个文件复制到web服务器的指定证书目录并完成配置即可。
参考文章 acme.sh wiki中文版 How to use DNS API 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>PVE基础操作之：完成装机后的优化/初始化设置</title>
      <link>https://ruohai.wang/202411/pve-initial-config-guide/</link>
      <pubDate>Tue, 12 Nov 2024 09:02:22 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/pve-initial-config-guide/</guid>
      <description>前言 pve系统的装机没什么难度，和普通debian装机没什么区别，按照默认设置一路下一步就行了，就算有不懂的地方网上也有一大堆教程。
pve装完系统之后就可以登陆webui了，到这一步还有许多设置需要优化，或者叫初始化：
删除local-lvm分区 换源 关闭订阅弹窗提醒 很多次装完pve以后我都要上网找教程，所以自己写篇博客做个记录。
删除local-lvm分区 pve装完系统以后默认会有一个local分区和一个local-lvm分区，默认这俩分区各司其职，比如local用来存镜像文件（iso）、local-lvm用来存磁盘镜像，但这样的结果就是本意是好的，但实际体验反而很不好，比如导致一个分区不够用但另一个分区空荡荡。所以第一步就是删除local-lvm分区。操作分成三步：
第一步：在webui上通过shell访问pve，然后输入以下命令
# 删除分区 lvremove /dev/pve/data # 提示是否删除，敲y Do you really want to remove active logical volume pve/data? [y/n]: y # 重新分配空间 lvextend -rl +100%FREE /dev/pve/root 第二步：在webui中删除local-lvm分区
网图，我的pve系统这个分区已经删除了，所有这里借用alay.cc的图片 第三步：调整local分区的用途
如果你的pve只有一个local分区（或者叫local目录），默认这个分区是不能存放磁盘镜像（也就是虚拟机要用到虚拟磁盘）的，在删除local-lvm分区以后，需要把这个功能添加到local分区。
在内容一栏中，把所有功能都加上即可。
到此就完成了分区空间的合并。
换源 pve默认源是proxmox收费源，不订阅的话无法更新，所以需要更换其它的免费源。
pve需要替换的源一共有三个：
debian proxmox ve ceph 第一步：debian换源。
依然是webui界面通过shell访问pve主机
# 编辑debian源的文件 nano /etc/apt/sources.list 将默认的内容全部注释
#deb http://ftp.debian.org/debian bookworm main contrib #deb http://ftp.debian.org/debian bookworm-updates main contrib # security updates #deb http://security.debian.org bookworm-security main contrib 然后粘贴国内的源，我这里选择用清华的源</description>
    </item>
    
    <item>
      <title>Syncthing的安装配置与使用的简单教程</title>
      <link>https://ruohai.wang/202411/syncthing-install-and-config-guide/</link>
      <pubDate>Wed, 06 Nov 2024 05:07:39 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/syncthing-install-and-config-guide/</guid>
      <description>前言 之前已经写过几篇syncthing的安装配置文章，但是时间久远，而且当时用的图床也都挂了 &amp;amp; 图片没有备份所以没法恢复，索性重新写一篇。
安装&amp;amp;启动 我用的系统是debian，软件仓库里就有syncthing，可能版本稍微旧了一点但不影响使用
sudo apt install synchting 安装好以后启动syncthing时需要指定是哪个用户来跑syncthing，如果你是root一把梭玩家，那指定root即可，否则就指定一个non-root用户。我这里以ruohai为例。
#以ruohai用户运行syncthing并设置开机启动 sudo systemctl --enable syncthing@ruohai.service 初始化配置 syncthing默认的webui的访问端口是8384，默认的通信监听端口是22000（和其它syncthing之间进行通信），所以如果有防火墙的话记得放行端口，我的防火墙管理程序是ufw，设置如下。
# 对192.168.1.0/24这个网段内的所有设备开放访问 sudo ufw allow proto tcp from 192.168.1.0/24 to any port 8384,22000 但是放行端口以后暂时还不能访问synchting的webui，因为syncthing默认只监听本机的网络请求，也就是127.0.0.1，需要手动修改配置文件，配置文件的默认路径~/.config/syncthing/config.xml。
# 用nano或者vim编辑配置文件 nano /home/ruohai/.config/syncthing/config.xml 找到gui的配置部分，修改address中的127.0.0.1为0.0.0.0，就可以监听来自所有网络的请求了。
修改完以后记得重启synchting服务
sudo systemctl restart syncthing@ruohai.service 到这里就完成syncthing的所有初始化配置了，接下去就可以访问syncthing的webui开始使用。
webui配置 在浏览器中访问http://host_ip:8384就可以打开syncthing的webui了。
首先弹窗出来的信息就是是否允许发送匿名使用报告，根据自己喜好选择即可。
点掉弹窗以后看到红色危险提醒，因为默认没有设置webui的访问账户，所以可以匿名访问blabla之类，所以需要设置一下访问账户信息。
点击设置，在【图形用户界面/GUI】标签页设置账户密码。
保存后浏览器会弹窗要求账户验证，输入刚刚设置的账户信息即可。
添加远程设备 多个设备之间想通过synchting来同步文件夹，首先要互相添加远程设备。
假定在LMDE设备上的syncthing上查看设备id。
获取到设备ID串号和一个二维码
假定在另一个Photo的机器上的【远程设备】设置区域，点击【添加远程设备】
在窗口中输入设备ID、设备名称后保存。
然后在LMDE设备上会弹窗显示新设备添加请求，选择添加设备即完成两个设备的绑定。
弹窗显示详细的设备信息和简单的配置项，无须修改，直接点击【保存】即可。
到此就完成了两个设备的绑定。
文件夹同步 完成两个设备的syncthing绑定以后，默认的同步文件夹是Default Folder，路径是~/Sync。
以此为例，我们将LMDE设备的Default Folder共享给设备Photo并进行同步。
第一步：在LMDE设备中将文件夹共享给Photo
点击选项
在共享标签中选择共享的设备Photo
在高级标签中设定两个设备之间的同步策略
完成设置后直接保存即可。
第二步：在Photo中接受共享
出现弹窗提示有文件夹共享请求，点击添加</description>
    </item>
    
    <item>
      <title>Linux使用fdisk对分区进行扩容操作</title>
      <link>https://ruohai.wang/202410/fdisk-extend-partition/</link>
      <pubDate>Thu, 31 Oct 2024 09:34:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/fdisk-extend-partition/</guid>
      <description>前言 之前写过一篇【Linux下操作分区扩容】，那篇文章中操作分区扩容的工具是parted，这次换fdisk。
一般linux各发行版都自带fdisk，而parted都需要另外安装。
对于分区扩容这个操作，parted用起来会让人简单 &amp;amp; 放心，因为它是直接resizepart，而fdisk是先删除旧分区再建新分区，虽然两种操作都是变更分区表信息、都不会丢失数据，但fdisk那种删旧建新的过程确实会让人更胆战心惊一些。
操作 第一步：确认当前分区结构
首先要确认想要扩容分区需要是连续的扇区，如下示意图，在根区分之后有空闲空间，就可以扩容根分区。
|-------------------------------------11GB-----------------------------------------| |---512MB启动分区---|---954MB缓存（swap）分区---|---8.6GB根（/）分区---|---空闲空间---| 分区结构如下
NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 11G 0 disk ├─sda1 8:1 0 512M 0 part /boot/efi ├─sda2 8:2 0 954M 0 part [SWAP] └─sda3 8:3 0 8.6G 0 part / 最后使用fdisk命令查看分区信息
sudo fdisk /dev/sda 分区信息如下
Disk /dev/sda: 11 GiB, 11811160064 bytes, 23068672 sectors Disk model: Virtual Disk Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 4096 bytes I/O size (minimum/optimal): 4096 bytes / 4096 bytes Disklabel type: gpt Disk identifier: E73B5228-BBA7-453F-AD2D-0D97322BC45B Device Start End Sectors Size Type /dev/sda1 2048 1050623 1048576 512M EFI System /dev/sda2 1050624 3004415 1953792 954M Linux swap /dev/sda3 3004416 20971486 17967071 8.</description>
    </item>
    
    <item>
      <title>海鲜市场捡垃圾买玩客云的一些注意事项</title>
      <link>https://ruohai.wang/202410/onecloud-buy-tips/</link>
      <pubDate>Wed, 16 Oct 2024 13:43:18 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/onecloud-buy-tips/</guid>
      <description>长话短说，直接说注意事项：
玩客云的硬件有两个版本，v1.0和v1.3，网上的刷机教程里提到这两版的区别时只会说短接点不一样，但实际这俩版本对armbian主线固件、openwrt固件的兼容性也不一样。这里提到的armbian主线固件是【hzyitc/armbian-onecloud】，openwrt固件是【openwrt】。如果是v1.3那就没啥问题，如果是v1.0，那有一部分机器刷入这俩固件以后根本无法启动、无法使用（进不了系统、无法获取ip、接hdmi没有信息输出），但是刷入网心云固件就一切正常。我入手过17台玩客云，碰到了6台玩客云都出现了不兼容armbian和openwrt固件的问题。注意是有一部分，并不是v1.0就一定不兼容。如果在海鲜市场淘玩客云捡垃圾的时候注意区别，最好挑v1.3版本。如果不小心买到v1.0版的不兼容主线armbian、不兼容openwrt的机器，那只能自己想办法了，要么刷网心云跑pcdn，要么去论坛里找找有没有适配的固件。
玩客云的sd卡槽io性能很差，大概只能跑到3~5MB/s。
玩客云的s805芯片是arm32的架构，虽然debian12以及接下去的debian13依然支持该硬件架构，但很多的软件和docker镜像都已经不提供arm32的版本，而且【hzyitc/armbian-onecloud】这个项目从今年3月（2024/03）开始也已经停止维护，除非自己从armbian主线编译，否则大概率不会再有新固件发布，只能去各种论坛找资源。
玩客云的usb接口的io性能大概能跑到30MB/s，但是如果通过usb口挂硬盘 + samba共享，因为算力限制、协议开销，实际的io大概25MB/s。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>使用Gmeek &#43; Github Pages部署个人博客</title>
      <link>https://ruohai.wang/202410/gmeek-github-pages-blog/</link>
      <pubDate>Thu, 10 Oct 2024 22:48:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/gmeek-github-pages-blog/</guid>
      <description>白嫖github pages来搭建个人博客已经有海量的教程和应用，但这次的gmeek有点不太一样，非常不一样，值得写篇博客推荐一下。
简单列举一下gmeek这个博客框架和常用的hexo/hugo这些博客框架的区别：
发布方式不同。hexo/hugo这些常用的框架，都是在本地或者vps上写好markdown文本，然后编译成静态网页资源，最后把静态资源push到github repo完成发布。而gmeek是在github repo的issues页面创建新的issue来编写文章，编写完以后保存，然后github action通过设定的workflow脚本自动把issues中的内容编译成静态资源发布到github pages。
搜索引擎的亲和度不同。这里点名百度（其它搜索引擎我没用过所以不太清楚），百度不会收录未备案的国内个人博客站，也不会收录部署在github pages网站。但是用gmeek框架会不一样，因为gmeek的【博客原文】其实是发布在github issues的，各大搜索引擎（尤其是各种内容农场、机翻搬运站）对github issues的内容收录的非常勤快而且搜索的权重很高，甚至是全文收录而不是只收录一个标题。
gmeek框架集成了utteranc.es项目用github issues来实现评论功能，比hego/hexo之类博客框架的整合度更高（需要找支持评论的主题，或者通过插件来外挂评论），而且做到了博客正文和博客评论都聚合在一个issue帖子内，不会出现正文和评论的割裂感。
简单总结，核心就是3点：
不需要在本地部署编译环境 搜索引擎会全文收录你的博客 评论系统好用 &amp;amp; 方便 不知道这两点是否对你有吸引力，于我是一眼就被吸引，而且gmeek的默认主题也非常简洁清爽。
强烈推荐这个博客框架。
这是项目主页：Meekdai / Gmeek
这是官方的快速上手教程：Gmeek快速上手
这是博客demo：Meekdai
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用Docker方式部署在线Markdown编辑器flatnotes</title>
      <link>https://ruohai.wang/202410/flatnots-installation/</link>
      <pubDate>Tue, 08 Oct 2024 15:31:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/flatnots-installation/</guid>
      <description>前言 一直在找一个支持自建（self-host）而且轻量的web端markdown编辑器，能支持html样式预览，如果ui能好看又简洁的话就最棒了，但始终没找到合适的，所以之前我写博客那些文字的时候都是在filebrowser里直接编辑，效果如图。
虽然能用，但是不够好用。
今天在刷github上【awesome-selfhosted/awesome-selfhosted】项目的时候发现了flatnots，简单试用以后几乎完美满足我的需求。所以写篇文章做个简单记录。
部署 &amp;amp; 使用 部署
【dullage / flatnotes】项目主页提供了docker部署的命令，所以这一步没啥难度，复制官方提供的命令然后简单自定义修改即可。我喜欢用docker-compose方式部署，这里贴出官方的yaml模板。
# 官方docker-compose.yml模板 version: &amp;#34;3&amp;#34; services: flatnotes: container_name: flatnotes image: dullage/flatnotes:latest environment: PUID: 1000 PGID: 1000 FLATNOTES_AUTH_TYPE: &amp;#34;password&amp;#34; FLATNOTES_USERNAME: &amp;#34;user&amp;#34; FLATNOTES_PASSWORD: &amp;#34;changeMe!&amp;#34; FLATNOTES_SECRET_KEY: &amp;#34;aLongRandomSeriesOfCharacters&amp;#34; volumes: - &amp;#34;./data:/data&amp;#34; # Optional. Allows you to save the search index in a different location: # - &amp;#34;./index:/data/.flatnotes&amp;#34; ports: - &amp;#34;8080:8080&amp;#34; restart: unless-stopped 官方只提供了arm64/amd64两个硬件平台的docker镜像，如果想在arm32平台（比如玩客云）上部署，只能找第三方打包的镜像，目前在dockerhub能搜到的只有这个版本【codeotto/flatnotes-arm32】，比官方落后一个版本，但能用。
使用
使用docker-compose方式一键部署成功之后，打开浏览器访问http://host_ip:8080即可。
用自己配置的账户密码登陆后，界面超级精简，功能也超级精简，只有查找、切换主题、新建、显示全部笔记四个功能。
markdown编辑器的界面好看而且好用。
笔记以markdown形式保存，目录结构清晰，不需要数据库，非常方便。
官方提供了demo可以直接在线体验：demo site
搜索功能
flatnotes自带的搜索功能，实测，除了无格式的正文内容不会建立索引，其它的标题、引用、代码块之内的内容都会建立索引。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian和OpenWrt上使用sqlite3-cli进行简单数据维护</title>
      <link>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</link>
      <pubDate>Mon, 07 Oct 2024 19:38:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/sqlite3-guidance-on-openwrt/</guid>
      <description>前言 我使用的memos默认用的数据库是sqlite，在长期使用memos的过程中，偶尔需要直接操作数据库进行一些冗余数据清理、错误数据debug。
在windows上维护sqlite数据库时，我用的工具是免费 &amp;amp; 开源的【sqlite studio】，带gui操作界面，非常好用，值得推荐。
但很多时候我希望ssh连上linux服务器以后，直接在终端中维护sqlite数据库，这就需要用到sqlite-cli工具。写篇文章做个记录。
安装 &amp;amp; 使用 首先是安装sqlite3-cli工具。
在openwrt上，只需要在软件仓库中根据关键字搜索然后点击安装即可。
在debian上直接apt一把梭。
sudo apt install sqlite3 然后是一些简单的数据库维护。
使用sqlite3-cli工具打开sqlite的db文件
sqlite3 /path/to/sqlite3/dbfile.db 然后就会进入sqlite&amp;gt;的命令符界面，表明已经可以对sqlite数据库文件进行操作了。
最后列举几个常用的sqlite3-cli的命令
# 显示数据库 .databases # 显示数据库表 .tables # 退出 .quit 参考文章 SQLite 命令 pawelsalawa/sqlitestudio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上设置静态IP（固定IP）</title>
      <link>https://ruohai.wang/202410/debian-config-static-ip/</link>
      <pubDate>Sat, 05 Oct 2024 17:44:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/debian-config-static-ip/</guid>
      <description>前言 我目前接触到的debian用到的网络管理工具有两个，一个是传统的networkmanager，另一个是netplan。
两种网络管理工具下配置静态ip的方法不太一样，这里汇总做个记录。
区分networkmanager和netplan 首先要搞清楚自己的debian系统用的网络管理工具是哪个，chatgpt的回答如下
但实际判断networkmanager的方法不太对，有效的方法只需要看/etc/network目录下是不是有interfaces文件即可。
判断netplan，只需要看是否有/etc/netplan这个目录，并查看这个目录下是否有配置文件。
获取网卡设备名称 使用命令ip addr查看网卡的名称，后面配置的时候需要用到
如果所示，网卡名称即为enp2s0
networkmanager 编辑/etc/network/interfaces文件，根据自己需求录入静态ip参数即可
allow-hotplug enp2s0 # 支持热插拔 auto enp2s0 # 开机自动启用eth0 iface enp2s0 inet static # 使用静态ip address 192.168.1.4 # ip地址 netmask 255.255.255.0 # 子网掩码 gateway 192.168.1.1 # 网关地址 dns-nameservers 192.168.1.1 # dns服务器 编辑后保存退出，然后重启网络服务
sudo systemctl restart networking.service netplan netplan的情况稍微复杂一些，因为netplan是一个配置工具，需要搭配底层来实现网络管理，那底层管理工具可以是networkmanager，也可以是systemd-networkd。
我碰到的情况都是netplan + networkd的组合，查看/etc/netplan目录下的yaml配置文件就可以清楚自己系统的工具组合。注意每个系统的netplan的yaml配置文件名称不一定相同，根据自己情况调整。
在配置文件中可以看到，管理网络的工具是networkd。
那接下去就有几种修改方法：
netplan指定网络工具 + netplan生成配置 netplan指定网络工具 + networkd配置 netplan指定网络工具 + networkmanager配置 出于配置的难易程度 &amp;amp; 可阅读性考虑，我推荐使用第二种方案。
首先修改/etc/netplan目录下的yaml配置文件，只需要指定renderer是networkd即可，下面关于dhcp的配置都注释。
然后到/etc/systemd/network目录，可以看到有个network配置文件，原始配置是将网络配置功能托管给了netplan。
我们需要根据自己需求修改配置</description>
    </item>
    
    <item>
      <title>在Debian上部署硬件性能监控面板Netdata</title>
      <link>https://ruohai.wang/202410/netdata-install-guide/</link>
      <pubDate>Wed, 02 Oct 2024 20:57:34 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/netdata-install-guide/</guid>
      <description>前言 平时使用linux的时候，需要查看实时硬件性能占用时，我都是在终端里直接敲htop，最近想着部署一个支持web端的监控面板。
支持的web面板的硬件性能监控方案有很多，glances、zabbix、netdata、cockpit、1panel等等，从轻量级的监控面板到比较中的全功能panel应有尽有。
最后就部署的简单程度 &amp;amp; 性能资源占用两方面考虑，选择了netdata。
部署 在debian上安装netdata非常简单，直接apt即可
sudo apt install netdata 安装好以后，编辑配置文件/etc/netdata/netdata.conf
默认的配置文件中需要修改绑定IP和默认端口即可。
# 默认只监听127.0.0.1本机的请求 bind socket to IP = 0.0.0.0 # 根据自己需求调整端口号 default port = 19999 以上调整完以后，重启netdata服务
sudo systemctl restart netdata.service 在浏览器中访问http://host_ip:19999就可以访问了。如果服务器上安装了防火墙，记得放行端口。
汉化 netdata默认语言英文，如果英文阅读有障碍想，或者想要汉化，可以参考这个项目【DX-Kevin/Netdata-chinese-patch】,替换4个js/html文件即可，非常方便。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上部署NFS网络文件系统</title>
      <link>https://ruohai.wang/202410/nfs-install-guide/</link>
      <pubDate>Wed, 02 Oct 2024 13:11:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/nfs-install-guide/</guid>
      <description>前言 玩nas的对各种网络共享文件协议肯定不陌生，比如smb/samba、nfs、afp、webdav等等。
之前我一直用的smb/samba，也用过几次webdav，这次尝试下nfs，水篇文章做个简单记录。
部署 nfs的部署分为服务端和客户端，两端的部署方式些微不同。
服务端（server）
首先是安装必须的软件包，nfs-common作为依赖包必定会安装，所以在命令中不需要体现
sudo apt install nfs-kernel-server 然后编辑nfs的配置文件/etc/exports，设定共享目录。
sudo nano /etc/exports 添加共享目录的配置信息
/path/to/share/folder 192.168.1.111(rw,async) tips：
/path/to/share/folder：共享目录的路径 192.168.1.111：指定共享客户端的ip，也可以用子网掩码来指定网段，或许还有其它指定方式可以自行研究 (rw,async)：指定共享目录的权限，常用的rw（可读可写）、同步异步（sync/async），其它参数可以等需要调优了再翻阅文档 配置完成以后，可以直接重启nfs服务生效
sudo systemctl restart nfs-server.service 也可以不重启nfs服务依然让配置生效
sudo exportfs -arv tips:
-a：全部挂载或全部卸载 -r：重新挂载 -v：显示详细信息 如果电脑上启用了防火墙，需要放行两个端口
2049,111/tcp 2049,111/udp 好了，到这里nfs的服务端配置就完成惹。🎉
客户端（client）
首先是安装必须的软件包
sudo apt install nfs-common 然后直接mount看下能不能挂载成功，假定挂载到本地的/mnt/nfs，命令中的-t nfs这部分指定协议的内容可以省略。
mount -t nfs 192.168.1.111:/path/to/share/folder /mnt/nfs 不出意外的话就挂载成功了。如果需要把nfs文件夹设置成开机启动挂载，可以通过编辑/etc/fstab，也可以用systemd-mount来实现，这里以后者为例。在/etc/systemd/system目录下新建一个mnt-nfs.mount文件（注意这个文件名mnt-nfs需要和挂载点/mnt/nfs路径对应），然后录入以下内容
[Unit] Description=nfs auto mount After=network.target [Mount] What=192.168.1.111:/path/to/share/folder Where=/mnt/nfs Type=nfs [Install] WantedBy=multi-user.target 保存文件，然后执行命令添加为系统服务
# 重载 sudo systemctl daemon-reload # 添加服务 &amp;amp; 开机自启 sudo systemctl enable --now mnt-nfs.</description>
    </item>
    
    <item>
      <title>在Debian上用Docker方式部署aria2/aria2Ng</title>
      <link>https://ruohai.wang/202410/aria2-install-on-debian/</link>
      <pubDate>Tue, 01 Oct 2024 19:10:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202410/aria2-install-on-debian/</guid>
      <description>前言 开篇直言，个人建议使用docker方式部署aria2/aria2ng，不要去折腾原生安装，因为原生安装和配置aria2的话实在是太麻烦了。
开箱即用的docker版aria2才是正解。
部署 选择用docker方式部署aria2，那接下去只要挑选一个合适的docker镜像版本就行了。
根据dockerhub的下载数量和star数量，这里推荐【superng6/aria2】，weiui用的是aria2ng。
这版镜像的overview页面有详细的安装步骤，这次摘录部分。我是用docker-compose方式部署，docker-compose.yml文件如下
version: &amp;#34;3.1&amp;#34; services: aria2: image: superng6/aria2:latest container_name: aria2 network_mode: host environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - SECRET=&amp;lt;your-secret&amp;gt; - CACHE=512M - PORT=6800 - WEBUI=true - WEBUI_PORT=8080 - BTPORT=32516 - UT=true - QUIET=true - SMD=true volumes: - ./config:/config - ./downloads:/downloads restart: unless-stopped 参数释疑：
PORT=6800：aria2的rpc端口 WEBUI_PORT=8080：aria2ng web ui的访问端口 BTPORT=32516：DHT和BT监听端口，如果用防火墙记得放行这个端口 更多配置项参考dockerhub页面即可。
最后就是一键安装惹
sudo docker-compose up -d 部署成功以后，打开浏览器访问http://host_ip:8080即可。
参考文章 superng6/aria2: overview 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Debian上部署和使用v2rayA &amp; 一些注意事项</title>
      <link>https://ruohai.wang/202409/v2raya-install-on-debian/</link>
      <pubDate>Sun, 29 Sep 2024 11:43:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/v2raya-install-on-debian/</guid>
      <description>前言 v2raya是一个使用web gui来配置v2ray的客户端，方便好用，特别适合没有图形界面的linux server系统。
之前已经写过一篇在debian上部署和配置的文章，但时间久远也懒得修修补补，直接重新写一篇。
安装 在debian系linux上安装，个人建议使用apt软件源安装。
# 添加公钥 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc # 添加软件源 echo &amp;#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&amp;#34; | sudo tee /etc/apt/sources.list.d/v2raya.list # 更新 sudo apt update # 安装 sudo apt install v2raya v2ray 到这里就完成了v2raya的安装，🎉
配置 v2raya服务配置
如果不需要做自定义调整，用默认配置启动v2raya，执行以下命令
## 启动 &amp;amp; 设置开机自启 sudo systemctl enable --now v2raya.service 启动成功后，默认端口是2017，打开浏览器，访问http://host_ip:2017。首次登录需要创建用户。
添加节点 &amp;amp; 导入订阅这些不再赘述，想必对于这些基本操作你已经具有丰富的经验。
v2raya服务的配置文件路径在/etc/default/v2raya，可以调整web ui的默认端口、log目录、bin目录等各项内容。
注意事项 v2ray-core VS xray-core
推荐使用v2ray而不是xray，apt软件仓库的xray至今（2024年9月）还不支持负载均衡，也就是基于最小ping值择优选取线路的功能只有v2ray-core支持。
本机代理 VS 局域网路由
【透明代理/系统代理】这个配置是用来对【本机】的网络进行代理，而【规则端口的分流模式】这个选项是用来当作局域网的路由。
搞清楚以上这点，就不会和我犯一样的错，开启了【系统代理】的同时还在同一台机器上装qbittorrent挂下载，导致所有bt流量都走代理让v2raya的资源占用飙升。</description>
    </item>
    
    <item>
      <title>Windows下删除桌面右键菜单中的AMD Software: Adrenalin Edition选项</title>
      <link>https://ruohai.wang/202409/windows-remove-amd-software-from-right-click-context-menu/</link>
      <pubDate>Thu, 19 Sep 2024 02:03:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/windows-remove-amd-software-from-right-click-context-menu/</guid>
      <description>前言 最近从使用的pc从intel换成了amd，发现桌面右键菜单中多出了一个AMD Software: Adrenalin Edition选项。
这个选项如果只是名字很长的话我也不会太在意，但是它会导致windows系统启动进入桌面以后，首次点出右键菜单时大大增加弹出时间，也就是点击右键以后要等好几秒才弹出菜单，这是我忍不了的，所以就想着找找方法把这个选项从右键菜单里删掉。
一开始尝试用ccleaner软件来管理右键菜单，发现ccleaner的右键菜单管理中压根就没有这个amd的选项。
所以最后用了网上找到的编辑注册表的方法，实测有效。
删除方法 打开注册表，定位到\HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\ACE
将右边栏中的默认项目直接右键删除。
删除后回到桌面，再次右键单击，可以看到amd software的选项已经删除。
参考文章 Win10怎么删除右键菜单AMD显卡选项？删除鼠标右键菜单AMD选项方法 remove amd software from right click context menu Win10 移除右键菜单 AMD Software 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用Docker方式部署rss feed生成器RSSHub</title>
      <link>https://ruohai.wang/202409/rsshub-install-docker-guide/</link>
      <pubDate>Sun, 08 Sep 2024 18:16:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/rsshub-install-docker-guide/</guid>
      <description>前言 rsshub是一个rss feed生成器，这点首先要理解，它不是rss feed订阅器或者rss阅读器，它是一个用来生成rss feed的工具。现在很多网站、社区、博客之类都已经不支持rss订阅，或者很多想订阅的自定义的内容（比如某个twitter用户），这时候就可以使用rsshub来生成rss feed，然后用rss订阅器来订阅这个feed就可以了。
在部署之前的一点个人经验和建议：最好弄个海外的vps或者能实现全局代理的机器来部署rsshub，因为要用rsshub来生成rss feed，首先rsshub能访问到那个网站吧，要不然一直报dial tcp io timeout就很尴尬。
部署 rsshub原生部署需要用到nodejs，我讨厌nodejs，所以选择用docker-compose方式部署。
用docker-compose方式部署，只需要搞定docker-compose.yml这个配置文件就行了。rsshub的【官方文档】也给出了配置模板，直接下载模板即可。
这是rsshub官方提供的docker-compose.yml文件（2024/09/08）。
services: rsshub: # two ways to enable puppeteer: # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled # * (consumes more disk space and memory) leave everything unchanged image: diygod/rsshub restart: always ports: - &amp;#34;1200:1200&amp;#34; environment: NODE_ENV: production CACHE_TYPE: redis REDIS_URL: &amp;#34;redis://redis:6379/&amp;#34; PUPPETEER_WS_ENDPOINT: &amp;#34;ws://browserless:3000&amp;#34; # marked healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;curl&amp;#34;, &amp;#34;-f&amp;#34;, &amp;#34;http://localhost:1200/healthz&amp;#34;] interval: 30s timeout: 10s retries: 3 depends_on: - redis - browserless # marked browserless: # marked image: browserless/chrome # marked restart: always # marked ulimits: # marked core: # marked hard: 0 # marked soft: 0 # marked healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;curl&amp;#34;, &amp;#34;-f&amp;#34;, &amp;#34;http://localhost:3000/pressure&amp;#34;] interval: 30s timeout: 10s retries: 3 redis: image: redis:alpine restart: always volumes: - redis-data:/data healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;redis-cli&amp;#34;, &amp;#34;ping&amp;#34;] interval: 30s timeout: 10s retries: 5 start_period: 5s volumes: redis-data: 根据文档可以确定rsshub需要用到3个镜像：rsshub本体 + redis + 浏览器，其中chrome镜像大概需要占用4GB的存储空间，请提前规划。其实整个模板里基本已经没有需要修改的地方了，直接docker-compose up -d就可以把服务拉起来使用。唯二需要修改的地方，一个可能是rsshub的port根据自己需求调整，另一个是redis-data这个数据保存路径，也是根据自己需求调整。</description>
    </item>
    
    <item>
      <title>使用Picgo上传文件到MinIO</title>
      <link>https://ruohai.wang/202409/picgo-plugin-for-minio/</link>
      <pubDate>Fri, 06 Sep 2024 21:08:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/picgo-plugin-for-minio/</guid>
      <description>前言 上一篇文章中完成了minio的部署和存储桶的创建，接下来就简单记录下用picgo作为客户端往minio传文件吧。
我这里用的词是【传文件】而不是【传图片】，因为minio是一个oss服务，它可以保存任何格式的文件。而picgo虽然定位是一个【图片上传】软件，但实际它并不会限制文件格式，因为文件格式的校验是由【服务端的图床程序】来完成的。
所以picgo + minio的组合，就可以当作一个【文件上传客户端 + 文件存储服务器】来使用。
配置 第一步：在minio中创建 access key
要开启minio的api上传功能，首先要在minio配置一个access key。
创建access key以后记得保存key和secret信息，因为minio只会展示一次secret。
第二步：在picgo中安装minio插件
picgo中安装插件需要本地有nodejs环境，自行安装即可，不在赘述。
在picgo硬件内的插件设置中，搜索minio，安装红色icon的这个插件。
插件安装号以后，在【图床设置】中进行配置
第三步：图床配置
每一个配置项的具体意思，可以查看插件【picgo-plugin-minio】在github项目主页的介绍。
也可以参考网友Gzzz制作的图表
完成配置后保存即可。
到这里所有配置都完成了，🎉
参考文章 使用 MinIO+PicGo 在服务器搭建图床 使用Minio与Picgo搭建个人图床 Herbertzz/picgo-plugin-minio 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用MinIO自建OSS服务</title>
      <link>https://ruohai.wang/202409/minio-install-guide/</link>
      <pubDate>Fri, 06 Sep 2024 09:20:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/minio-install-guide/</guid>
      <description>前言 minio是一个对象存储方案（oss），一般都是公司企业之类的商业用途，个人用到的场景很少🤣，不过我还是找到了一个对我来说可以使用的场景，那就是用来做自建图床！
话不多说，记录以下minio的部署。我用的部署方式是下载已经编译好的二进制包，没有选择docker部署是因为我用来做host的机器是迅雷赚钱宝一代，系统是3.10内核的openwrt，用不了docker。
注意事项 minio从2022年开始，存储文件的方式就采用了纠删码格式，说人话就是上传的文件不再保留原格式，在文件系统里看到的是文件夹 + xl.meta文件。
如果需要获取源文件，必需要通过api或者web后台下载。
这个设计可以理解，minio毕竟是为了分布式存储设计的，纠删码可以理解为一种文件分片算法，类似raid但是比raid更先进，但缺点就是不适合个人用户。所以用minio来搭建图床服务就像杀鸡用牛刀，请根据自己的使用场景谨慎选择。
部署 第一步：安装
首先到【minio下载页面】找到对应自己硬件架构的二进制包，我的硬件是arm32/armv7，所以文件路径是/server/minio/release/linux-arm/minio。
用wget下载到本地后记得添加可执行权限
# 下载 wget -O minio https://dl.min.io/server/minio/release/linux-arm/minio # 添加可执行权限 chmod + x minio 第二步：启动
作为一个oss服务，肯定需要指定用来保存文件的路径了，所以最简单的启动命令如下
./minio server /path/to/save/data minio的默认监听端口是9000，启动成功以后可以打开浏览器访问http://host_ip:9000就进入minio的web控制台 了，默认账户名和密码都是minioadmin。
如果要指定端口号，启动命令添加--address参数即可。
./minio server --address=:12345 /path/to/save/data 这里有一个注意事项，minio区分了api的端口和web控制台的端口，默认的9000端口，或者在启动命令中指定的端口号，其实都是api端口。在浏览器中访问api端口时会自动跳转到webui的端口，如果装了防火墙的话记得放行端口。
如果要指定配置文件目录，在启动命令中添加--config-dir参数
./minio server --address=:12345 --config-dir /path/to/config /path/to/save/data 第三步：修改默认账户密码
从服务的启动日志中可以看到默认的账户密码都是minioadmin，而且会有黄字提醒修改账户密码。
修改密码的方式是在用户环境变量中添加两个参数MINIO_ROOT_USER和MINIO_ROOT_PASSWORD。根据自己的情况，在~/.bashrc或者/etc/profile中添加两行。
export MINIO_ACCESS_KEY=jackma export MINIO_SECRET_KEY=1234567890 编辑保存后，记得重新加载配置文件使配置生效
# 根据自己情况二选一 source .bashrc source /etc/profile 第四步：创建存储桶并配置匿名权限
创建存储桶
命名后确定即可。下面三个开关分别指版本控制、文件锁定、数量限制，根据自己需求选择是否启用。
创建的存储桶默认是私有private权限。如果要用作图床，也就意味着匿名访客需要有只读权限。
点击要编辑权限的桶，这里以2024为例。这里千万要注意，不是直接把bucket从private改成public，而是在Anonymous/匿名用户标签页进行修改。
点击Anonymous后点击add access rule添加规则
在prefix一栏输入/（斜杠的意思是所有规则中优先级最高），access一栏选择readonly即可，然后保存。
第五步：编辑systemd/sysvint服务文件
systemd的配置文件</description>
    </item>
    
    <item>
      <title>用Docker方式部署轻量RSS阅读器Miniflux</title>
      <link>https://ruohai.wang/202409/miniflux-install-guide/</link>
      <pubDate>Fri, 06 Sep 2024 00:33:53 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/miniflux-install-guide/</guid>
      <description>前言 最近准备自建一个rss阅读器（被互联网大厂的网络服务背刺过几次以后，我已经倾向于能自建的服务都自建）。
上一次使用rss阅读器可能还得追溯到10多年前的google reader，自从google突然宣布关闭reader服务以后，我也就在没有用过rss阅读器。而且这些年的互联网发展趋势，确实是从开放走向封闭，博客由盛而衰，内容社区也是往往是限制必须注册登录后内容可见，更有甚者甚至都不对搜索引擎开放收录，大搞私域流量。
回到正题，这次是要自建一个rss阅读器服务。首先是了解了以下现在可选的自建rss阅读起服务有哪些。这里看到【这篇博客】整理的表格。
我最后选择的是miniflux有两个原因，其一是考虑到资源占用，因为我可能需要把服务部署到性能孱弱的arm盒子上，其二是前两个服务用的都是php方案，我对php不熟，虽然都支持docker一键部署，但考虑到如果原生部署，miniflux只需要一个预编译的go二进制包就行了。
部署 miniflux官方的文档提供了部署教程，英语阅读没有障碍的话可以直接看官方文档。
我选择了docker-compose部署，所以非常简单，只需要准备一份docker-compose.yml文件即可。miniflux官方文档里已经提供了docker-compose.yml的模板，只需要根据自己的需求调整一些配置即可。
以下是官网模板在2024/09/06提供的模板，模板具有时效性，请留意官网模板可能会有更新变动。
services: miniflux: image: miniflux/miniflux:latest ports: - &amp;#34;80:8080&amp;#34; depends_on: db: condition: service_healthy environment: - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable - RUN_MIGRATIONS=1 - CREATE_ADMIN=1 - ADMIN_USERNAME=admin - ADMIN_PASSWORD=test123 db: image: postgres:15 environment: - POSTGRES_USER=miniflux - POSTGRES_PASSWORD=secret - POSTGRES_DB=miniflux volumes: - miniflux-db:/var/lib/postgresql/data healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;pg_isready&amp;#34;, &amp;#34;-U&amp;#34;, &amp;#34;miniflux&amp;#34;] interval: 10s start_period: 30s volumes: miniflux-db: 从yml文件中可以看到需要安装两个服务，一个是miniflux本体，另一个是数据库postgres。实测amd64版本的两个服务的镜像占用大概500MB的存储空间。
根据自己的需求，我对配置模板做了简单调整，调整的内容做了注释
services: miniflux: image: miniflux/miniflux:latest container_name: miniflux # 指定容器名称 user: 1000:1000 # 这里指定用非root账户运行容器 restart: always # 增加重启策略 ports: - &amp;#34;80:8080&amp;#34; # 指定端口以后记得防火墙放行 depends_on: db: condition: service_healthy environment: - DATABASE_URL=postgres://miniflux:123456@db/miniflux?</description>
    </item>
    
    <item>
      <title>杭州桐庐雅鲁漂流景区简单点评</title>
      <link>https://ruohai.wang/202409/trip-to-yalu-drift/</link>
      <pubDate>Mon, 02 Sep 2024 13:18:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202409/trip-to-yalu-drift/</guid>
      <description>总结 费用198rmb，水质不干净是黄泥水，排队时间太久，加上往返的高速过路费，最后人均大概250rmb（不包含餐饮）。漂流很刺激，但考虑到费用和排队体验的话，性价比不高。
简评：
票价188rmb，接驳车10rmb，合计就是198rmb。 周末或者节假日人多的时候排队等接驳车上山要40分钟~1个小时，候车厅没有开空调只有吊扇，会很热。如果不想受这份苦，可以找工作人员买vip服务，50rmb一人私家车送上山。 整个漂流大概需要1~1.5小时，整个漂流溪道的设计是急坡——休息——急坡——休息，在休息区可以购买水瓢、水枪、面罩，也有卖小吃烤肠补充体力。 水瓢、水枪之类可以提前在外面买好带进去，景区的东西都贵的要死。 景区有免费的浴室，漂流结束可以冲洗干净，记得带上换洗衣服。 雅鲁漂流的水质受天气影响很大，我们去的时候说前几天下过雨，所以水质看着是黄泥水，不干净。 流水账 昨天（周日）和朋友去了一趟杭州雅鲁漂流玩水。这个夏天杭州高温酷暑，一直想着出去玩水，但各种原因到秋天了才终于成行。
杭州周边的临安、桐庐有非常多的漂流景点，也没有太多兴趣挑选哪个更好玩，所以从网上随便找了个漂流排行榜，最后和朋友选择了排行第三的雅鲁漂流。
开车1个多小时到了景区，首先面对的问题就是排队等接驳车上山。候车区人员密集，我们排队的时候只有大吊扇而没开空调，实在是闷热。排队大概需要40分钟~1个小时。
上山以后穿号救生衣戴好安全帽就等开始等船，这时候就能看到溪水的水质了。当天的水质看着是个黄泥水，好像是因为前两天刚下过雨，😫。
不过这么大老远，来都来了，门票也买了，还是得玩起来。
整个漂流大概持续1~1.5个小时，中途会有缓流休息区，有小吃零食烤肠可以补充体力。
返程的时候路过天目溪上的一个湿地公园，景色不错，有个观鸟台可以停车。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在AMD B450主板上使用Intel Arc显卡</title>
      <link>https://ruohai.wang/202408/intel-arc-770-gpu-on-b450-motherboard/</link>
      <pubDate>Thu, 29 Aug 2024 20:48:13 +0800</pubDate>
      
      <guid>https://ruohai.wang/202408/intel-arc-770-gpu-on-b450-motherboard/</guid>
      <description>结论 amd b450主板能不能用intel arc系列显卡？ 能，但是有几个注意事项：
bios请升级到最新版本以提高兼容性 b450主板的pcie插槽大概率只支持到pcie3.0，但现在的显卡都支持到pcie4.0，也许、可能会因为pcie带宽瓶颈影响显卡的性能发挥 如果是msi主板，要留意今年出了一个严重的安全漏洞CVE-2024-36877，msi肯定发布了修复安全漏洞的新版bios。这些新版bios可能反而会存在兼容性问题。具体可以看下面的流水账 intel arc显卡能不能跑黑神话悟空？ 能，不仅能跑，画质也还过得去。
我的搭配是arc a770显卡 + 1080p显示器，要求是战斗场景能稳定60fps（也就是用测试工具需要能跑80fps的平均帧）。这个要求下，可以实现tsr + 80超采 + 高画质（个别严重影响性能的项目调整为中画质）。
一些流水账 为了玩《黑神话：悟空》所以预算2000rmb准备买一张显卡，一番挑选之后入手了intel arc a770，价格1800rmb。
我用的主板是msi b450m mortar max，理论上是不支持intel arc显卡的，因为intel显卡的商家在产品页面都会标明使用条件，amd平台需要500系列的主板以上。
话虽如此，但我还是愿意冒着损失1800rmb的代价来实际测试一下（因为显卡一次性贴纸撕毁后不接受7天无理由退货）。
amd的am4/b450系列的主板，都知道成长性很好，刷了新bios以后就可以支持5000系列的锐龙cpu。为了保证兼容性，请先更新bios到最新。
但是这里有个注意事项，msi b450m mortar max这个主板，请刷2023年10月26日的7B89v2K版bios，千万不要刷2024年发布的这两个新版。我是用2023年的7B89v2K版bios，插intel arc a770显卡，开启uefi模式，启用resize bar功能，在使用过程中没有任何问题。但是刷2024年这两个版本的bios会出现开机蓝屏提示系统文件损坏、开机黑屏没有画面输出等非常恶性的bug。
更新了bios以后，记得在bios中启用uefi引导模式 &amp;amp; 开启resize bar功能。
之后正常装上windows系统并打上intel官方的驱动即可正常使用arc a770显卡。
但是，这里又有一个注意事项，msi b450m mortar max这个主板的pcie插槽只支持到3代标准，理论上带宽瓶颈会严重限制显卡的性能发挥。
我没有用鲁大师、3dmark之类的跑分来做对比测试，而是直接跑跑黑神话悟空了。
按照b站up远古时代装机猿推荐的1080p画质配置（其中超分技术从fsr改成了tsr），测试工具可以稳定80fps左右，实际游戏（我只玩到第一章）可以稳定75fps左右，在特效比较多的场景会掉到65fps左右。整体表现属于稳定、可玩、画质不错。
比如下面这个击杀boss广谋的场景
实时帧率是70fps。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>杭州建德马岭天观景区简单点评</title>
      <link>https://ruohai.wang/202408/trip-to-malingtianguan/</link>
      <pubDate>Tue, 27 Aug 2024 14:31:50 +0800</pubDate>
      
      <guid>https://ruohai.wang/202408/trip-to-malingtianguan/</guid>
      <description>前言 8月25号的时候和家里人去了一趟杭州建德的马岭天观景区，一天玩下来觉得这个景区还算有趣，做个简单记录与点评。
费用 首先是最重要的费用明细：
美团、抖音上都有团购票，买259rmb的通票即可。这个票对比359rmb的全票只少了两个项目（步步惊心 + 高空骑行），而这两个项目我们在现场也消费了，只需要40rmb，三个人的话能还价到100rmb。 停车费应该是2块一个小时，露天停车场，我停了4个多小时，实际付费10元。 水滑梯的雨衣可以自选买或不买，应该是20块一件。 景区有很多摄影师，在一些网红打卡点会闪现然后帮你抓拍一些照片。这些照片在下山中途的必经之路上可以购买，9寸带相框是30元。 所以整个景区的必须消费就是259的通票 + 10元停车费，合计270rmb。其它都是非必须的消费项目，可以忽略。
简评 魔毯
上山要坐5趟魔毯。所谓魔毯，其实就是物料传送带，只是做了一些简单的安全加固措施就用来载人了。
前几个月广西某景区的魔毯出现人员伤亡意外事故，所以这个设施我有点忌惮。但来都来了，还是得坐，不可能自己徒步爬山。幸运的是前面4个魔毯都安全下车，不幸的是第5个魔毯在起身时和工作人员的互动出了问题导致我的手指被夹了。出了一点血但很快就止住了，没啥大碍，就是很痛。
步步惊心 + 高空骑行
这俩项目对于259rmb的通票游客是需要另外付费的，费用是40rmb，如果人多的话可以和老板还价。
这俩项目个人觉得不刺激也不惊险，如果能还价到30块的话可以试试。
天观佛手桥
这应该是这个景区最重要的造景，小红书、抖音上只要是这个景区的打卡照都少不了这俩佛手。
万福顶
这是景区的制高点，斜坡上的造景是龙鳞坝瀑布。
这个景和佛手桥都适合用无人机拍照，在地面因为受视角所限只能看到局部，得高空俯瞰才能看到全景。整个山脊线上的造景应该是模仿的龙背，近处的龙鳞 + 远处的龙尾。
悬崖秋千
这个造景就没啥可讲的，一个很常见的景区游玩项目。
个人建议恐高、心脏不好、晕海盗船、晕3D的人千万不要玩这个项目。
天空之镜
也是在景区很常见的一个造景，一个玻璃台上放了一些网红打卡的装置，比如鸟巢、云梯之类，适合喜欢拍照打卡的游客。
水滑梯 + 旱滑梯 + 滑索
最后就是下山了，下山分为3段。
首先是水滑梯，也就是有水的玻璃滑道。这应该是这个景区最有意思的游玩项目，一定要玩。虽然水滑梯里的水量不多，但水浪很大，不穿雨衣的话会浑身湿透。不过景区提供的雨衣防水效果也很一般，如果有贵重电子设备的话可以给电子设备单独准备一间雨衣。
然后是旱滑梯，其实就是石滑梯，和临安大明山的是石滑梯一样。但是马岭天观的旱滑梯给游客准备的滑梯服比临安大明山的滑梯服差多了，导致整个旱滑梯的体验非常差。
最后是滑索，没啥可说的，夏天玩的话注意拖鞋不要掉了。
总结 水滑梯的体验很好，拉高了整个景区的趣味性 佛手桥、天空之境、万福顶只适合打卡拍照 魔毯有安全风险，乘坐魔毯千万注意安全 最好带一身换洗衣服，水滑梯如果弄湿了衣服可以下山以后在卫生间换干净衣服 300rmb的费用性价比一般，如果能通票199rmb的话我给五星 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>联想BIOS在UEFI模式下出现no bootable device found的问题解决</title>
      <link>https://ruohai.wang/202408/debian-uefi-no-bootable-device/</link>
      <pubDate>Tue, 13 Aug 2024 11:10:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202408/debian-uefi-no-bootable-device/</guid>
      <description>前言 最近一直在折腾一台别人淘汰的旧电脑，型号是联想c260，板载cpu是intel j1800。
这机器到手以后我就直接开始重装debian了，但是碰到了2个问题：
在uefi模式下，装好debian拔掉引导u盘以后重启，会提示找不到启动设备no bootable device found 在legacy模式下，装好debian以后能进入系统，但是无法软关机/软重启，在输入关机/重启命令以后一直提示watchdog did not stop，只能硬关机（长按电源键或者直接拔电源） 第一个问题反复尝试后无解，而且联想的bios也没有开放高级功能来修改配置。
第二个问题反复尝试也无解，但凑合还能用，只要每次想重启/关机的时候手动长按电源开关就行了。
但最近我往这台机器上装pve，在uefi模式下竟然可以正常关机，🤔，我觉得可以找找对应的解决方案了。
功夫不负有心人，很快就找到了类似的问题而且成功解决了，在这里做个简单记录。
原因 简单来讲就是联想这台古董机器的uefi固件版本太低了（或者做了阉割没有实现完整的efi功能），不兼容debian 12的bootloader。
debian 12安装好以后的boot分区目录结构大致如下
├── boot │ ├── config-5.10.0-18-amd64 │ ├── efi │ │ └── EFI │ │ └── debian │ │ ├── BOOTX64.CSV │ │ ├── fbx64.efi │ │ ├── grub.cfg │ │ ├── grubx64.efi │ │ ├── mmx64.efi │ │ └── shimx64.efi 但联想这个机器的uefi固件能识别的boot目录的结构应该如下
├── boot │ ├── config-5.15.53-1-pve │ ├── efi │ │ └── EFI │ │ ├── BOOT │ │ │ ├── BOOTX64.</description>
    </item>
    
    <item>
      <title>Windows系统通知中心出现恶意通知的问题处理</title>
      <link>https://ruohai.wang/202408/windows-notification-malware-removal/</link>
      <pubDate>Fri, 02 Aug 2024 04:17:19 +0800</pubDate>
      
      <guid>https://ruohai.wang/202408/windows-notification-malware-removal/</guid>
      <description>前言 在m0nkrus的【官网】下载了lightroom classic，下载的压缩包用windows defender扫描会报毒，但是我核对了镜像文件的md5和sha1，文件没问题，所以还是放心安装了。
但很快就发现中了一个恶意病毒：通知中心开始给我弹赌博网站的广告。
然后在windows设置的【通知与操作】页面，也可以看到多出来一个gazetanovostey.com的项目。当时我没有截图，所以这里用的网上找到的类似的图片。
立刻用windows defender全盘扫描但是没有报异常，关掉这个恶意项目的通知权限似乎也确实不会再弹广告，看上去好像是个守规矩的恶意病毒。但我有点儿洁癖，碰到这种恶意软件以后一般都是直接全盘格式化然后重装系统。但冷静了一会，想试试怎么能够把这个恶意广告清理掉。
清理 在windows的通知和操作设置页面，这个恶意项目只能设置开启或者关闭，不能右键删除。
在网上搜索类似问题，傻屌的微软社区（Microsoft Community）里都是一些牛头不对马嘴的问答，对于解决这个问题毫无帮助。但最后还是找到解决办法了，而且实测以后确实也有效。
第一步：注册表中删除记录
定位到\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings，根据恶意弹窗的广告信息定位到项目。我的记录已经被删除了，所以截图无法展示，这里以telegram为例。
比如我根据恶意弹窗的广告关键词可以定位到gazetanovostey.com，删除。如果你的恶意项目无法定位，可以反复开关通知权限，查看右侧栏中的enable字段的值的变化来定位，定位以后提取关键词或者UUID。
第二步：数据库中删除记录
打开windows资源管理器，定位到C:\Users\XXXX\AppData\Local\Microsoft\Windows\Notifications，文件夹下会有个wpndatabase.db的数据库文件。
这个是sqlite3的数据库文件，可以用【SQLiteStudio】或者【sqlite3-cli】进行编辑。我用的带gui的SQLiteStudio。
打开数据库以后，根据恶意广告的关键词进行搜索，比如我的sql如下
select * from NotificationHandler where PrimaryId like &amp;#39;%gazetanovostey%&amp;#39;; 因为我的恶意广告的记录已经被删除，所以截图以telegram为例 根据搜索记录，确定RecordId是133，接下去就是删除它。
delete from NotificationHandler where RecordId = 133; 好了，至此恶意广告的项目就清理完成，打开设置中心的通知与操作，可以看到gazetanovostey项目已经被删除。
🎉
参考文章 如何删除Win10中“获取来自这些发送者的通知”无效的项目 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>Node.js在Windows下配置环境变量</title>
      <link>https://ruohai.wang/202407/nodejs-env-config-on-windows/</link>
      <pubDate>Wed, 31 Jul 2024 14:16:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/202407/nodejs-env-config-on-windows/</guid>
      <description>前言 前两天因为要在本地编译memos的前端项目需要nodejs环境，而我的电脑在重装系统以后又得重新配置一遍nodejs的环境变量。
网上的教程内容啰嗦，设置方法也不统一，有的用NODE_HOME有的又用NODE_PATH，而且广告一堆，索性自己写一篇，做个简单记录。
安装与配置 第一步：下载安装
这一步没啥好说的，到官网找到下载链接，根据自己需要下载对应版本到本地，然后双击安装即可。
现在nodejs的安装程序在安装时会自动配置环境变量
安装完成后，打开windows下的terminal，测试是否安装成功。
也可以在windows的环境变量配置中查看。
到这一步，nodejs的本地安装与环境配置已经完成了，已经可以直接使用nodejs。
只是在这种默认配置下，通过npm install下载的包（package）、模块（module）、缓存（cache）都在c盘。
如果你的c盘足够大，或者你的硬盘没有分区，那就不需要再看第二步来自定义nodejs的全局目录了。
第二步：指定全局目录与缓存目录
先找地方新建两个文件夹，node_cache和node_global。
然后打开windows terminal输入以下命令
npm config set prefix &amp;#34;/path/to/my/node_global&amp;#34; npm config set cache &amp;#34;/path/to/my/node_cache&amp;#34; 执行了以上命令以后，可以通过npm config get来查看设置是否成效
第三步：设置module变量
在系统变量中新建一项NODE_PATH，指定module路径
在用户变量中编辑Path，修改默认的%USERPROFILE%\AppData\Roaming\npm为指定的global路径
修改以后保存退出。
第四步：指定镜像源
众所周知的原因，nodejs官方镜像在国内访问几乎不可用，一般都需要指定镜像源，比如阿里的镜像源
npm config set registry https://registry.npm.taobao.org/ 执行以上命令以后，同样可以通过npm config get查看是否设置成功
第五步：设置权限
最后还有一点需要注意，windows下nodejs安装完成后，默认的安装文件夹nodejs只有管理员才有修改和写入权限，普通用户会提示权限不足。需要右键安装文件夹，在安全标签页添加权限。
针对Authenticated Users，添加修改和写入权限。
参考文章 【安装指南】nodejs下载、安装与配置详细教程 node.js安装及环境配置超详细教程【Windows系统安装包方式】 Node.js安装及环境配置之Windows篇 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>Memos从0.15升级到0.17新增评论功能</title>
      <link>https://ruohai.wang/202407/memos-update-from-0.15-to-0.17/</link>
      <pubDate>Sun, 28 Jul 2024 17:01:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202407/memos-update-from-0.15-to-0.17/</guid>
      <description>前言 我的memos部署在迅雷赚钱宝一代（ws1408）上，硬件架构是arm32/armv7，host系统是3.10内核的openwrt21，部署方式是预编译的后端二进制包 + 自己编译的前端。
最初是因为硬件架构限制，memos官方从0.15开始就不再维护针对arm32/armv7硬件的docker镜像，所以我一直停留在0.15.0这个版本。
后来搞定了非docker方式的部署（后端的二进制包 + 前端自己编译），但因为使用习惯 + 新版本功能没有需求，所以一直都没有动力升级。
自从我的twiter被炸号以后，我就迁移到了自建memos。之后一直有曾经的twitter好友以及现实里的朋友在关注我的memos更新，这份关注持续至今。非常感谢他们，他们的关注让我在这两年的潦草生活中依然感受到些许亮光。
为了方便和他们互动，我准备把memos从0.15版本升级。
memos在v0.16加入了评论功能
在v0.17加入了通知中心（inbox收件箱）
至此评论功能算是比较完善可用，所以我决定升级到v0.17.1。
升级 memos在v0.16的changlog中提到需要数据迁移 &amp;amp; 有表结构的变更。
而且在最初体验memos时，我确实碰到了升级新版以后对旧数据库不兼容的问题，需要手动执行sql更新脚本。所以我对memos的升级感到一点担心，因为需要迁移数据。
但是实际在测试升级的过程中发现是多虑了，从v0.15升级到0.17非常丝滑，不需要自己整理sql更新脚本，因为memos的作者已经内置了数据迁移脚本，在升级过程中会自动执行，整个过程非常丝滑，完全不需要人工干预。
如果是docker方式升级，拉取指定版本的镜像以后直接运行即可。
如果是非docker方式部署，前端需要自己编译，后端在【memospot/memos-builds】下载二进制包，覆盖原项目文件后重启memos即可。注意windows下载某几个版本的压缩包文件时windows defender会报毒，和项目作者反馈以后对方表示是windows defender误报，具体可以看这个【issue】。
以下是升级过程中用到的sql代码（适用于sqlite），如果你对自己动手更有信息，可以参考。操作之前请先备份数据库。
# 新加字段 ALTER TABLE resource ADD COLUMN memo_id INTEGER; # 更新数据 UPDATE resource SET memo_id = ( SELECT memo_id FROM memo_resource WHERE resource.id = memo_resource.resource_id LIMIT 1 ); # 建索引 CREATE INDEX idx_resource_memo_id ON resource (memo_id); # 删表 DROP TABLE IF EXISTS memo_resource; # 删表 DROP TABLE IF EXISTS shortcut; # 插入版本号（新版本号必须要加，要不然每次重启都会自动开始迁移数据） INSERT INTO migration_history (version, created_ts) VALUES (&amp;#34;0.</description>
    </item>
    
    <item>
      <title>让Samba共享支持软链接（symlink）</title>
      <link>https://ruohai.wang/202407/samba-enable-symlinks/</link>
      <pubDate>Thu, 25 Jul 2024 16:02:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202407/samba-enable-symlinks/</guid>
      <description>前言 昨天想到在samba共享的目录下新建了一个软链接指向了另外一个目录，试一下能否通过这种方式把多个目录整合到一个共享目录下，方便windows上进行访问。这样的话，windows只需要添加一个网络文件夹就行了，不需要每个共享目录都创建一个网络文件夹的入口。
实际测试以后，在默认的samba配置下，可以在samba共享文件内创建软连接，但是在windows终端上挂载/访问这个目录是看不到目录内的软链接的。
网上查了一下，只需要简单配置就可以支持，在此做个记录。
配置 网上找到的配置教程里都说在smb.conf文件中添加三个配置即可，如下
wide links = yes follow symlinks = yes unix extensions = no 直接加到global域然后重启smbd.service以后就行了。
测试成功以后起了好奇心，顺便查了下samba官方wiki这仨参数都是什么意思，是不是可以优化、精简。
以下就是参数释疑：
wide links
简单来讲就是【是否允许samba服务跟踪位于共享目录之外的链接】，默认是no。讲人话就是，假设指定共享data目录，然后data目录下有个软连接指向了data之外的其它目录，这是否允许，默认是no。
很明显要实现我想要的功能，这个配置要改成yes。
然后这个参数和unix extensions同时启用的话会存在安全漏洞，所以要启动wide link就必须把unix extensions功能关闭。
然后官网wiki对这个参数定义的作用域是section，所以按照wiki规范是应该配置在共享目录下而不是global域。
unix extensions
这个参数是smb1 unix extensions的同义词，也就是仅对smb1协议有效，如果你在smb.conf中设定了最低协议是smb2或者更高版本，那这个参数可以忽略。
这个参数是HP定义的用来支持unix smb1/cifs特性的参数，作用域是global，默认是yes。wiki中特别说明windows终端默认已经不支持这个特性（因为windows默认禁用smb1协议）
考虑到smb1协议的漏洞、我访问samba共享文件夹的设备都是windows pc、和wide links参数冲突，所以这个参数要设定为no。
follow sysmlink
这个参数用来设定是否允许samba支持软连接，看上去和wide link没区别。
作用域section，默认是启用。
总结 通过对官方wiki的查询，了解了这三个配置参数的明确定义。所以，合理、规范、精简的配置如下：
[global] unix extensions = no [share folder] wide links = yes 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>贝壳云P1刷入Armbian以后USB3.0接口速率不达标的问题解决</title>
      <link>https://ruohai.wang/202407/beikeyun-enable-usb3/</link>
      <pubDate>Wed, 24 Jul 2024 02:08:08 +0800</pubDate>
      
      <guid>https://ruohai.wang/202407/beikeyun-enable-usb3/</guid>
      <description>前言 手上的几个贝壳云p1盒子入手已经很久了，但除了学会用电烙铁焊上刷机要用到的usb2.0口并被烫了几次手指，这几个盒子并没有用起来。
这几天重新折腾盒子，刷入ophub-armbian以后接上usb硬盘，用dd测速发现只能跑到usb2.0的带宽。
我第一反应是usb3.0的驱动问题，上网查了一下资料以后，发现是贝壳云p1这个机器很奇怪的对usb3.0接口做了硬件限速。
😫
为什么啊，为什么，厂家是什么脑回路，明明是usb3.0的接口，为什么要加硬件限速限制成usb2.0，你直接做usb2.0不是更省成本吗？
不过万能的网友已经破解了硬件限速，只需要抠掉主板上的24个电阻就行了。
操作 拆外壳这一步就不上图了，卸掉背壳上的三颗螺丝，然后用撬棒撬开上壳即可，注意上壳又led灯的排线，不要大力拉扯。
拆开外壳以后，首先要撕掉覆盖再usb接口外壳上的黑色胶布。
撕掉黑色胶带以后，可以看到usb接口内测又一排密密麻麻的电阻。为了方便，这里根据接近hdmi接口的顺序进行编号。
其中1、3、4号口的电阻布局相同，2号口布局不太一样。参考下图把红圈中的电阻都抠掉。
抠电阻可以用刻刀、螺丝刀、镊子等等，但务必要精细操作，不要蛮力破坏主板，或者抠掉附近其它电器件。
每个usb接口对应6个电阻，4个接口一共抠掉24个电阻，最后将主板清理干净即可。
给机器重新通电开机，接上usb硬盘，再用dd测速，就可以跑满速了。
参考文章 为下载而生的贝壳云P1如何玩转小钢炮系统 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>魔兽世界使用CASCE Explorer把枪声替换为弓声</title>
      <link>https://ruohai.wang/202407/wow-replache-sound-gun-fire-by-bow-release/</link>
      <pubDate>Fri, 12 Jul 2024 01:07:10 +0800</pubDate>
      
      <guid>https://ruohai.wang/202407/wow-replache-sound-gun-fire-by-bow-release/</guid>
      <description>前言 首先庆祝一下魔兽世界国服在经历了漫长的停服以后终于又回归了，短暂的半个月wlk怀旧服公测以后，今天正式上线。🎉
我在游戏里玩的角色的职业是猎人，副本刷了很久但一直没刷到弓/弩远程武器，目前使用的是一把枪。枪械的bangbang声音实在是吵的头疼，所以想着替换枪械的音效，最好是能直接用游戏内置的弓的原声替换掉枪的声音，如果实在不行的话直接把枪静音也行。
在网上搜索了一番（包括nga），很多都是美化枪声的，并不满足我的需求。所以最后还是自己动手，想办法用软件提取wow安装文件夹内的原始音频。
使用的软件 想要解压魔兽世界文件，古早时期网上有两款工具，一款是mpqeditor，另一款是winmpq。其中mpqeditor在十多年前我还用过一两次，提取了贫瘠之地十字路口的bgm。
但现在时过境迁，mpqeditor和winmpq的软件资源不一定好找，需要在各种下载站里和大量的广告斗智斗勇，或者在一些邀请注册制的资源论坛里辛苦的回帖下载。
不过还好，现在用了新的方案：WoW-Tools/CASCExplorer
这个项目目前依然在更新，还提供了windows下的绿色安装包，实际使用体验非常好，强烈推荐。
替换音效 这里以目前国服wlk怀旧服为例。
第一步：提取音频文件
首先下载CASCExplore的github项目的release页面下载软件到本地
解压后双击CASCExplorer.exe运行。
然后按照数字编号顺序，依次打开项目——选择wow安装目录——选择wow版本-打开目录进行操作，wow版本选择wow-classic即可。
根据你电脑的算力，大概需要等待半分钟到几分钟的时间来读取魔兽世界的相关文件。
等项目加载完成，可以在左侧栏看到文件目录。我们本次操作的目的是提取游戏内置的弓的声音去替换枪的声音，所以要选择sound目录。
然后依次进入sound-item-weapons，可以看到很多武器的目录。在右侧栏选中我们需要的bow和gun目录，点击提取（extract）。
然后指定提取文件存放的目录，最后点击ok即可。
在提取文件的目录中，可以看到gun的音效一共是6个文件，开火1/2/3和装弹1/2/3。
然后我们在弓/bow的目录下，找到6个类似动作的音效，比如bowpullback对应gunload，bowrelease对应gunfire。其中bowpullback有两款音效，可以根据自己喜好挑选。
在bow目录下挑选出自己喜欢的音效，按照gun音效文件的名称进行重命名，然后复制到gun目录下进行覆盖。比如bowpullback01.ogg重命名为gunload01.ogg，然后替换掉gun目录下的gunload01.ogg。
到这里就完成原始音频文件的提取惹。
第二步：替换音效
在魔兽世界的安装目录下，定位到_classic_目录，按照Sound/Item/Weapons/Gun的目录结构，依次新建文件夹。最后把自己提取并替换的ogg音频文件放到这个目录下。
好了，重启游戏，上去试试打枪吧，不出意外的话现在枪械发出的应该是弓的音效。🤣
不想要声音想直接静音 如果觉得弓的声音也吵，想直接静音，也可以。在游戏安装目录的/_classic_/Sound/Item/Weapons/Gun目录下新建6个空文本文件，然后按照原始音效的格式重命名，比如把新建文本文件.txt直接改名为gunfire01.ogg。
因为这不是正经的ogg音频文件，系统无法播放这个文件，表现出来的就是在打枪的时候没有任何声音，也就变相的实现消音了。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在Netplan和systemd-networkd的组合下配置静态IP</title>
      <link>https://ruohai.wang/202407/netplan-systemd-networkd-set-static-ip/</link>
      <pubDate>Sat, 06 Jul 2024 21:38:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202407/netplan-systemd-networkd-set-static-ip/</guid>
      <description>前言 最近又翻出私家云二代（也叫比特米盒）准备刷机当下载机用，一番折腾以后成功的刷上khadas vim1的固件armbian-24.5.3-minimal，进行初始配置的时候发现这版固件用的网络管理方案是netplan + systemd-networkd，这让我一下子不知道要怎么配置静态ip。
因为之前刷过的那么多盒子、那么多固件，网络管理方案都是单独的networkmanager，或者是netplan + networkmanager。而手上这个固件，它是networkd管理 + netplan配置的模式。
真的是有点儿一头雾水，而且netplan配置文件yaml格式是按照缩进空格数来识别的，😫
最后学习了一晚上网上的有关netplan + systemd-networkd的配置教程，加上自己的简单实践，还是成功配置了静态ip。写篇文章，做个简单记录。
配置 首先确认下我用的固件的默认网络设备的管理方案是systemd-networkd，网络的配置工具是netplan。
为了简化配置，我决定改成netplan只用来指定渲染器（renderer），把网络设备的管理和配置都用systemd-networkd搞定。绝对不是因为yaml这种依赖缩进格式的配置文件让我非常头大所以放弃了netplan。
第一步：指定renderer
首先进入目录/etc/netplan，目录下原来的yaml配置文件先备份，然后新建一个配置文件（注意netplan的配置文件的优先级是根据文件首字母顺序）。
在新建的yaml配置文件中录入以下内容，指定renderer是networkd即可，其它内容都不需要。
network: version: 2 renderer: networkd 最后保存退出。
第二步：配置systemd-networkd
networkd的配置目录是/etc/systemd/network，如果目录下有旧的配置文件话先备份，然后新建一个配置文件。
在新建的配置文件中，录入以下内容
[Match] Name=end0 # 网卡设备名称 [Network] Address=192.168.1.122/24 # 静态ip地址 Gateway=192.168.1.1 # 网关地址 DNS=192.168.1.1 # dns服务器地址 最后保存退出。
第三步：网络配置生效
完成以上的配置以后，最后一步当然就是应用了。
先重启networkd
sudo systemctl restart systemd-networkd.service 然后让netplan生效
# 测试配置 sudo netplan try # 应用配置 sudo netplan apply 好了，到这里就大功告成了。🎉
参考文章 如何在 Linux 上使用网络配置工具 Netplan systemd设置静态IP 如何在 Linux 上从网络管理器切换到 systemd-networkd 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>联合文件系统mergerfs的安装和配置</title>
      <link>https://ruohai.wang/202406/mergerfs-install-and-config-guide/</link>
      <pubDate>Wed, 26 Jun 2024 21:20:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/mergerfs-install-and-config-guide/</guid>
      <description>前言 最近看到chiphell论坛一个网友分享的【基于Debian搭建的HomeNAS玩法】，文中提到了软raid、联合文件系统、snapraid三个方案。
软raid我知道，就是mdadm，而且我已经用五盘位无raid硬盘柜搭配任意一个能刷armbian的小盒子当host来实现了raid5阵列。mergerfs我也知道，之前在玩客云上装casaos的时候用过这个功能，可以把多个存储空间合并成一个使用。但snapraid我完全不了解，看名称像是给raid阵列做快照用的。
那看到了新的知识点，正好学习研究一下，看能不能应用到自己的使用场景里。这篇文章只记录联合文件系统的内容。
使用场景 联合文件系统有很多个软件方案，在debian的apt仓库里搜unionfs就有三个方案。
因为我搜到的教程文档关于mergerfs比较多，而且casaos也用的mergrefs方案，所以我选择也是mergerfs。
mergerfs有点类似unraid的存储池方案，把多个硬盘组合到一起成为一个大容量的存储池，那它和raid的区别是什么？
最大的区别就是，raid阵列是一个整体，往raid中写入文件，是把文件碎成多个文件块分散存储到阵列中的每个硬盘上，单独抽出一块硬盘没法读取数据。mergerfs是把多个已有文件系统的硬盘（比如ext4/btrfs/ntfs）通过软件整合成一个虚拟盘，往这个虚拟盘保存文件，文件是完整的保存到其中一个硬盘上，单独抽取一块硬盘，这块硬盘也可以插到任何支持ext4的机器上继续使用和读取数据。 raid除了raid0，其它raid5/raid6/raid10一般都要求硬盘容量相同(如果硬盘容量不同的话会以最小容量的盘作为标准），但mergerfs没有这个限制，可以200GB硬盘和1TB的硬盘拼成一个1.2TB的存储池。 mergerfs和raid0的区别，raid0没有数据冗余，一损俱损。mergerfs也没有数据冗余，但一损只损一，存储池中的其它硬盘不受影响。 mergerfs的扩容非常方便，只需要把新硬盘添加到mergerfs存储池即可。如果raid要扩容，🤔，比如raid5/6，每加一块硬盘就要整个阵列重建，比如把一个2TB * 4的阵列扩容成4TB * 4的阵列，至少需要重建5次才能完成（换盘4次 + resize一次），这对硬盘寿命和数据安全是一个非常严峻的考验。 组raid，或者往raid中加新硬盘，硬盘都需要先格式化清空数据。mergerfs不需要，可以把已经有数据的硬盘添加到mergerfs存储池中，文件依然存在。 mergerfs存储池的硬盘i/o性能就是单盘的性能，而raid是可以多盘的i/o性能叠加。 那mergerfs可不可以实现像raid一样的数据冗余？可以的，搭配snapraid就可以实现，后续有空的我再写，😂。
安装 &amp;amp; 配置 第一步：安装
这步没啥好说的，apt一把梭。
apt install mergerfs 第二部：配置
假定有三块硬盘，sdb1、sdc1、sdd1，现在准备用这三块硬盘组件mergerfs存储池。
首先需要把三个硬盘挂载到系统，假定挂载信息如下
/dev/sdb1 /mnt/disk1 /dev/sdc1 /mnt/disk2 /dev/sdd1 /mnt/disk3 然后用mergerfs把三个硬盘添加到一个存储池，假定新存储池的挂载点是/mnt/vpool。
mergerfs -o defaults,minfreespace=100M,allow_other /mnt/disk1:/mnt/disk2:/mnt/disk3 /mnt/vpool 参数释疑：
defaults：挂载文件系统的默认参数 minfreespace=100M：存储池中剩余容量小于100MB的硬盘会跳过使用 allow_other：允许其它用户访问虚拟磁盘 /mnt/disk1:/mnt/disk2:/mnt/disk3：需要加入存储池的三块硬盘 /mnt/vpool：存储池的挂载点 网上的其它教程文章中，一般还会加上use_ino/gnorepponrename=true/moveonenospc=true，这些参数的具体意思可以参考mergerfs的github仓库中的手册，根据自己的需求添加。其中allow_other从2.35.0版本之后已经是默认启用了，如果你的mergerfs版本高于2.35.0，这个参数可以不用加。
执行以上命令以后，就可以看到文件系统中多出了一个集合了三个硬盘容量的新的虚拟硬盘/mnt/vpool。
也可以把挂载信息写到/etc/fstab中，这样开机就会自动挂载。
# mergerfs /mnt/disk1:/mnt/disk2:/mnt/disk3 /mnt/vpool mergerfs defaults,minfreespace=100M,allow_other 0 0 然后记得重载让配置生效
# 重载配置 systemctl daemon-reload # 自动挂载 systemctl mount -a 读写文件 往/mnt/vpool中写入一个文件，默认规则是按照存储池中几个硬盘的剩余可用空间大小，按照从大往小的规则进行使用，也就是优先使用可用存储空间最大的那个硬盘。</description>
    </item>
    
    <item>
      <title>在Armbian上安装miniDLNA</title>
      <link>https://ruohai.wang/202406/minidlna-install-on-armbian/</link>
      <pubDate>Wed, 26 Jun 2024 14:11:28 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/minidlna-install-on-armbian/</guid>
      <description>前言 之前已经写过一篇了，但也懒得在旧文上更新，所以重写一篇。
局域网内影视资源的共享与播放，其实samba已经能够胜任。但minidlna也有好处，就是对移动端的支持会更好一些，很多app基本上是打开媒体库就能看到局域网内的minidlna，点击就能直接播放。很多移动设备对samba协议的支持都比较垃圾，而且如果samba没开启匿名访问的话，移动端对登录samba输入身份信息的支持会更烂。
不过minidlna也不那么完美，比如对字幕的支持就不是很好。所以minidlna和samba可以作为互补。
安装 第一步：安装
armbian的apt仓库就有minidlna，所以直接apt一把梭就行了。不过要注意minidlna的安装大概需要占用100~200MB的存储空间，如果你的armbian小盒子存储空间比较紧张的话，请提前预留足够的存储空间。
apt install minidlna 第二步：配置
minidlna安装好以后默认是以minidlan:minidlna的用户&amp;amp;组运行，这会有一些权限问题，比如没有权限扫描媒体文件库之类。
所以首先要配置minidlna运行的用户&amp;amp;组。
nano /lib/systemd/system/minidlna.service 修改下图位置中的两个参数即可，比如我用的是ruohai这个普通账号。当然了你直接用root也行，能省去很多麻烦。
然后要配置媒体库、端口号之类
nano /etc/minidlna.conf 有以下几个参数需要调整：
media_dir，媒体库，需要指向自己存放视频、音频的文件夹 db_dir，数据库，这个是minidlna用来存放扫描媒体库以后的数据信息，默认是/var/cache/minidlna，可以改成自己喜欢的目录。因为有些系统（比如openwrt）的/var目录实际指向的是/tmp，是一个临时目录，重启以后这个临时目录下的数据都会清空，导致每次系统重启以后minidlna媒体库信息丢失。 log_dir，日志文件目录，这个根据自己喜好，用默认的就行 port，端口号，如果系统装了防火墙的话记得放心这个端口，默认是8200 friendly_name，服务名称，局域网内看到的minidlna的名称，默认是hostname:username，可以根据自己喜好修改 这里有一点要注意，因为minidlna安装好以后是直接启用的，所以默认的db_dir和log_dir路径下都已经创建好了文件夹，而且所属用户&amp;amp;组都是默认的minidlna。如果你和我一样把minidlna的服务运行用户修改成了非root普通账号，而且db_dir和log_dir用的还是默认路径，那需要自己手动修改这俩目录的所属用户&amp;amp;组，要不然会报权限错误。比如我用的是非root的普通账户ruohai来跑minidlna，那就要如下进行修改。
# 修改db_dir数据库目录的权限 chown -R ruohai:ruohai /var/cache/minidlna # 修改log_dir日志目录的权限 chown -R ruohai:ruohai /var/log/minidlna 完成以上几处修改以后，就可以重启服务让配置生效了。
# 重载配置 systemctl daemon-relolad # 重启minidlna systemctl restat minidlna.service 重启成功以后，可以在浏览器中方位http://host-ip:8200查看minidlna的状态。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>Cpolar在Armbian和OpenWrt上的安装步骤分解</title>
      <link>https://ruohai.wang/202406/cpolar-install-guide/</link>
      <pubDate>Mon, 24 Jun 2024 20:33:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/cpolar-install-guide/</guid>
      <description>前言 看别人折腾电子垃圾盒子的视频知道了cpolar这个服务，免费账户可以薅一个1Mbps小水管、随机字符&amp;amp;24小时有效的二级域名。
在自己的arm小盒子上安装体验了会，单说这免费的羊毛，可以作为一个应急备用的内网穿透方案，没法重用。不管是想固定二级域名，还是绑定自定义域名，订阅的费用都已经超过了自己买一个gia cn2网络的海外vps了。
cpolar官网提供了很多文档和手册，没啥阅读障碍的话跟着官网手册一步步操作就行了。
但我为啥要多此一举写这篇文章呢，🤔，因为官方的手册在有一些步骤比较模糊，而且官方推荐使用的是一键脚本。我因为手上既有openwrt的盒子，也有armbian的盒子，在部署的过程中经常有一些需要自定义的地方，所以做个简单记录，方便以后回溯。
安装 第一步：下载
第一步肯定是找到适配自己硬件平台的安装包了。
我手上的硬件已经是大家的老朋友，迅雷赚钱宝一代（ws1408），系统是3.10内核的openwrt。
另一个是硬件是迅雷赚钱宝二代（ws1508），系统是armbian。
这俩硬件的cpu都是arm32/armv7/armhf架构的amlogic s805，下载arm32版本的安装包即可。
使用wget或者curl下载到本地，然后用unzip解压。如果提示unzip没有安装，openwrt的软件仓库里就有，debian的apt仓库里也有。
# 下载 wget -O cpolar-stable-linux-arm.zip https://www.cpolar.com/static/downloads/releases/3.3.12/cpolar-stable-linux-arm.zip # 解压 unzip cpolar-stable-linux-arm.zip 解压以后得到一个已经有可执行权限的二进制包cpolar，如果没有权限可以chmod +x cpolar授权。
可以把cpolar添加到环境变量。这里以openwrt为例，编辑/etc/profile文件，在PATH一栏的最后，按照格式加上cpolar的文件路径即可。
添加完成后，用命令source /etc/profile让配置生效。
想要验证配置是否生效，直接敲命令cpolar version，查看终端是否正确输出cpolar的版本信息即可。
第二步：验证
这一步很简单，官网手册也写的很明白。在官网的控制台，复制自己的token，或者直接复制命令，然后在本地执行即可。如果你和我一样已经配置了cpolar的环境变量，这一步就不需要敲前面的./了。
cpolar authtoken [token] 验证成功以后，默认的配置文件路径会保存在$home/.cpolar路径下。我这里是直接用的root账户，所以是/root/.cpolar。
第三步：启动web ui
这一步，不知道官方是有意还是无意，在手册和文档中都跳过了。根据官网提供的一键安装脚本方案，如果是systemd，只需要systemctl start/enable就行了，但我想装在openwrt上，sysv init脚本得自己写，所以在这一步就得自己琢磨。
现在具体说说怎么启动cpolar的web ui。根据官网一键安装脚本中的代码，提取出systemd模式下启动cpolar daemon的命令如下
cpolar start-all -dashboard=on -daemon=on -config=/usr/local/etc/cpolar/cpolar.yml -log=/var/log/cpolar/access.log 那我们只需要照葫芦画瓢，简单改动一下适配sysv init就行了，注意config参数指向的的cpolar.yml配置文件路径要根据自己的情况进行修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/cpolar/cpolar start-all -dashboard=on -daemon=on -config=/root/.cpolar/cpolar.yml -log=/var/log/cpolar/access.log } stop() { kill $(pidof cpolar) } 把上面的代码保存到/etc/init.</description>
    </item>
    
    <item>
      <title>拉不动镜像？给Docker配置代理服务器</title>
      <link>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</link>
      <pubDate>Fri, 21 Jun 2024 19:57:04 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/docker-config-to-use-proxy-server/</guid>
      <description>已经写了两篇文章记录怎么在debian和openwrt上安装和使用v2raya，顺便再水一篇文章记录下怎么给docker配置代理服务器。
docker官网提供了简单直白的英文文档，如果英文阅读无障碍的话可以直接看原文：【Configure the daemon with systemd】
注意一下这个方法有个前提，就是docker的部署环境使用的是systemd，而不是sysv init或者openrc之类。
方法一：编辑daemon.json
注意使用这个方法需要自己的docker engine版本大于23.0，低于这个版本号只能用方法二。
可以用docker version命令查看自己机器上的docker版本号。
在/etc/docker目录下新建daemon.json文件，然后根据以下内容的格式录入自己的代理服务器信息。
{ &amp;#34;proxies&amp;#34;: { &amp;#34;http-proxy&amp;#34;: &amp;#34;http://proxy.example.com:3128&amp;#34;, &amp;#34;https-proxy&amp;#34;: &amp;#34;https://proxy.example.com:3129&amp;#34;, &amp;#34;no-proxy&amp;#34;: &amp;#34;*.test.example.com,.example.org,127.0.0.0/8&amp;#34; } } 方法二：编辑docker.service
如果docker engine版本低于23.0，或者上面的配置没有效果，可以用方法二。
先创建目录和文件
mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/http-proxy.conf 然后编辑http-proxy.conf文件，然后根据以下内容的格式录入自己的代理服务器信息。
[Service] Environment=&amp;#34;HTTP_PROXY=http://proxy.example.com:3128&amp;#34; Environment=&amp;#34;HTTPS_PROXY=https://proxy.example.com:3129&amp;#34; Environment=&amp;#34;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp&amp;#34; 最后一步
完成了方法一或者方法二的编辑以后，重启docker。
systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker.service 查看变更是否生效，可以用命令docker info
也可以用命令systemctl show --property=Environment docker
好了，到这里给docker配置代理服务器就完成了，再也不用担心docker pull拉不动镜像惹。
🎉
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装和运行V2RayA</title>
      <link>https://ruohai.wang/202406/v2raya-install-guide-on-openwrt/</link>
      <pubDate>Fri, 21 Jun 2024 15:30:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/v2raya-install-guide-on-openwrt/</guid>
      <description>前言 前两天在刷了armbian的迅雷赚钱宝二代（ws1508）上通过添加软件源的方式成功的运行了v2raya，这个15块钱的arm小盒子可以当作一个代理服务器用惹。
但我手上不是还有好几个迅雷赚钱宝一代（ws1408）么，只能刷3.10内核的魔改openwrt固件，我想着能不能在这个10块钱的电子垃圾上跑v2raya，因为v2ray core和v2raya都提供了各种硬件架构的二进制包，理论上只要把二进制包下载到本地就行了。
那废话不多多，开搞。
安装 第一步：v2ray-core
我用的是v2ray core，也可以用xray core替代。
项目地址：【v2fly/v2ray-core】
在release页面找到armv7的版本
用wget或者curl命令下载到本地以后解压，解压以后的文件结构大致如下
然后需要把v2ray-core添加到环境变量。赚钱宝一代这个openwrt添加环境变量需要编辑的文件是/etc/profile。
# 没有nano可以用vim nano /etc/profile 在path一栏按照格式添加在末尾即可。
编辑完成后保存推出，再用source /etc/profile让配置生效。
第二步：v2raya
项目地址：【v2rayA/v2rayA】。
在项目的release页面找到armv7版本的二进制包。
用wget或者curl下载到本地以后进行解压，记得用chmod +x命令授权。
然后就可以试运行v2rays惹，直接敲命令
./v2raya --config=/mnt/data/v2ray/config 在控制台可以看到日志信息，v2raya已经成功启动，web ui的访问地址也打印出来惹。
从日志看有一个TPOROXY无法载入的报错，有两个解决办法。方法一就是透明代理的模式使用redirect，这样就不需要用到tproxy模块了，方法二就是给openwrt安装tproxy模块，根据网上找到的内容，需要安装以下依赖
opkg install kmod-ipt-tproxy iptables-mod-tproxy bind-dig 那接下去就只需要把v2raya添加到系统服务并设置启动项就完成了。
第三步：配置sysvinit
v2raya自带了systemd的配置，官网的手册里也提供了openrc的脚本，理论上openrc应该兼容sysv，但我实测没法用，所以只能自己瞎写了。你如果要抄的话记得根据自己的情况修改文件路径。
先创建sysv配置文件
cd /etc/init.d touch v2raya chmod +x v2raya 然后编辑v2raya，粘贴以下代码：
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/v2ray/v2raya --config=/mnt/data/v2ray/config } stop() { kill $(pidof v2raya) } 然后启动服务 &amp;amp; 设置启动项</description>
    </item>
    
    <item>
      <title>在Debian上安装和使用V2Ray</title>
      <link>https://ruohai.wang/202406/v2ray-install-guide-on-armbian/</link>
      <pubDate>Thu, 20 Jun 2024 12:14:28 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/v2ray-install-guide-on-armbian/</guid>
      <description>最近因为国内彻底屏蔽了dockerhub以及各种国内镜像站，所以使用docker也成功加入了翻墙大礼包。我之前一直用过国内的一些镜像站，虽然也不太好用但我装的容器也就那么两三个，所以忍一下也能用，但至此只能另谋出路了。
我在pc上一直用的v2rayn的客户端，所以可以通过配置局域网代理让docker正可以正常的拉去镜像
# 首先新建目录和文件 mkdir -p /etc/systemd/system/docker.service.d vim /etc/systemd/system/docker.service.d/http-proxy.conf # 然后在文件中粘贴以下内容, 注意代理地址需要换成你自己服务器的内网 ip 和代理端口 [Service] Environment=&amp;#34;HTTP_PROXY=http://192.168.8.125:10819&amp;#34; Environment=&amp;#34;HTTPS_PROXY=http://192.168.8.125:10819&amp;#34; Environment=&amp;#34;NO_PROXY=your-registry.com,10.10.10.10,*.example.com&amp;#34; # 重启 docker systemctl daemon-reload systemctl restart docker # 检查环境变量是否生效 systemctl show --property=Environment docker 但我的pc并不是24小时开机，而且ip也不固定，所以想着把v2ray部署到arm小盒子上去。这个时候很多捡垃圾玩家可能就直接上openwrt了，但我不想折腾openwrt也不想增加局域网内的网络复杂度，只是想简单部署一个v2ray用作docker的代理，就像pc电脑上装一个v2rayn那样。
经过一番搜索，最后确定使用v2ray core + v2raya web ui的方案。
【v2rayA/v2rayA】项目的官方文档提供了很多种安装方法的指导，我选择了直接添加软件源。
# 添加公钥 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc # 添加软件源 echo &amp;#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&amp;#34; | sudo tee /etc/apt/sources.list.d/v2raya.list # 更新 &amp;amp; 安装 sudo apt update &amp;amp;&amp;amp; sudo apt install v2ray v2raya -y # 启动 &amp;amp; 添加启动项 sudo systemctl enable --now v2raya.</description>
    </item>
    
    <item>
      <title>使用acme.sh获取Let&#39;s Encrypt免费数字证书</title>
      <link>https://ruohai.wang/202406/lets-encrypt-get-ssl-cert-by-bash/</link>
      <pubDate>Wed, 19 Jun 2024 04:09:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/lets-encrypt-get-ssl-cert-by-bash/</guid>
      <description>前言 我之前用的ssl证书买阿里云域名送的免费证书，有效期一年，有效期还剩150天。
但去年底很多云服务厂家调整了规则，新申请的免费证书有效期只有三个月，续费的话不清楚是否也是免费三个月，所谓未雨绸缪，我也要考虑下其它免费证书的方案，比如let&amp;rsquo;s encrypt。
申请let&amp;rsquo;s encrypt证书，官方默认推荐certbot的进行证书的自动申请、安装，但使用certbot需要安装snapd，这个方法跳过。
最后我选择了acme.sh，因为网上可以参考的方案比较多，出问题比较容易debug。
参考文章 用acme.sh完成let&amp;rsquo;s encrypt数字证书的申请、验证、安装，网上已经有非常完善的教程，我参考的主要是这几篇：
【acmesh-official/acme.sh】 【How to install】 【如何使用acme.sh与阿里云DNS自动签发Let’s Encrypt的免费数字证书】 基本上按照以上三篇文章中记录的步骤操作，就可以成功搞定。
我碰到的一些坑 网上的教程文章虽然很完善，但我在实际部署的过程中还是碰到了一些bug，这是我写这篇博客的主要原因，做个记录，方便日后debug。
问题一：中国特色的网络问题
在第一步获取acme.sh脚本的时候就碰到了问题，中国特色的网络问题，无论是默认的https://get.acme.sh还是备用的https://raw.githubusercontent.com/acmesh-official/acme.sh/master/acme.sh都提示无法连接。
这只是个小问题，自行解决即可。
也可以在有代理的电脑上访问以上链接，下载脚本以后用scp上传到服务器，记得chmod +x acme.sh授权，然后用以下命令执行脚本
./acme.sh --install -m my@example.com 执行完成后记得敲source .bashrc命令让新建的alias生效。
问题二：验证方式
验证有两个方法，http或者dns。
http方式需要指定网站根目录，我因为是用了一个跳板机（nginx转发请求到另一个机器），网站和nginx并不是在同一个服务器，尝试了许久都没有用http方式验证成功。
后来换用dns验证，我的dns服务器上是aliyun，在获取到aliyun的access key并配置以后，执行以下命令
acme.sh --issue --dns dns_ali -d ruohai.wang -d *.ruohai.wang 这个时候我又碰到了报错：can not find dns api hook for dns_ali
这个报错要临时解决的话倒也简单，红字提醒部分已经给出了方案，就是自己手动增加两个dns解析记录就行了。
验证成功以后，申请证书的流程就可以跑完了，最后成功的提示内容如下：
问题三：证书配置
我用的web服务器是nginx，我们要用的证书文件是就是前两个，fullchain.cer和ruohai.wang.key。可以在nginx目录下新建目录放这俩证书。
直接贴出配置文件吧（只保留了ssl有关的部分）
server { listen 443 ssl; server_name ruohai.wang; ssl_certificate /path/to/fullchain.cer; ssl_certificate_key /path/to/ruohai.wang.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!</description>
    </item>
    
    <item>
      <title>Uptime Kuma异常报错getaddrinfo EAI_AGAIN的处理</title>
      <link>https://ruohai.wang/202406/uptime-kuma-error-solve/</link>
      <pubDate>Tue, 18 Jun 2024 20:11:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/uptime-kuma-error-solve/</guid>
      <description>好几次想在自己的小主机上用docke方式部署uptime kuma来检测自己部署的几个服务的可用状态，但几乎每次都碰到同一个问题：getaddrinfo EAI_AGAIN。
网上也搜了好久的错误原因和解决方案，有得说网络问题，有的说dns解析问题。我也在项目的github仓库查看了大量的类似issues，但都没有找到有用的解决方案。
我觉得可能是我检测的几个服务都是套了cloudflare tunnel的缘故，但实测检测baidu.com这个域名也会报同样的错误。
因为一直没有debug的思路，所以我就放弃了uptime kuma。
但是今天写这篇文章，就是因为我知道这个报错的原因了！
先说一下我的部署方式：x86_64平台的debian，防火墙ufw，docker-compose方式部署，network_mode方式是默认的bridge。
出现getaddrinfo EAI_AGAIN的原因就是docker默认部署的应用都是network_mode:bridge，改成host模式就没问题了。
不过有一点要注意，network_mode改成host模式以后就不支持端口映射了，默认是3001端口，如果装了防火墙的话记得放行端口号。</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上运行Cloudflared</title>
      <link>https://ruohai.wang/202406/cloudflared-install-on-openwrt/</link>
      <pubDate>Wed, 05 Jun 2024 13:25:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202406/cloudflared-install-on-openwrt/</guid>
      <description>上个月已经写过一篇博客记录怎么在刷了openwrt固件的迅雷赚钱宝一代上面运行cloudflared，但是写那篇文章的时候对sysvint的脚本完全不熟悉，只是照虎画猫（现在也没有什么进步😂），但经过这一段时间的debug，发现了（看上去）没什么问题的运行方式，所以更新一下。
首先还是找到cloudflared的github仓库主页【cloudflare/cloudflared】，在release页面找到预编译的适配各硬件平台的二进制包。迅雷赚钱宝一代可以用arm或者armhf，我选择用armhf。
ssh连上openwrt，下载到本地
# 下载 wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/download/2024.6.0/cloudflared-linux-armhf # 授权 chmod +x cloudflared 然后在/etc/init.d目录下新建cloudflared文件，录入以下内容，注意我的cloudflared文件路径是/mnt/data/cloudflared/cloudflared，还有token的值，都需要你根据自己的情况修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/cloudflared/cloudflared --pidfile /var/run/cloudflared.pid --autoupdate-freq 24h0m0s tunnel run --token [你的token] } stop() { kill $(pidof cloudflared) } 保存文件后退出，记得chmod +x cloudflared授权。
然后启动并添加开机启动项即可。
# 启动 service cloudflared start # 添加启动项 service cloudflared enable 注意我的sysvinit脚本中没有只适配了start和stop两个命令，其它的restart、status没有适配，有需求的话可以自行增加代码。
🎉</description>
    </item>
    
    <item>
      <title>在Debian下的简单网络配置与重启</title>
      <link>https://ruohai.wang/202405/network-interface-change-on-debian/</link>
      <pubDate>Thu, 30 May 2024 16:22:10 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/network-interface-change-on-debian/</guid>
      <description>debian系统配置静态ip之前已经写过一篇笔记，但时隔久远，重新记录一下。
配置文件路径/etc/network/interfaces
固定ip/静态ip
假定网卡名称是eth0，设置静态ip的配置如下，其中的具体参数根据自己的实际情况调整。
# 开机自动启用eth0 auto eth0 # 使用静态ip iface eth0 inet static # ip地址 address 192.168.1.4 # 子网掩码 netmask 255.255.255.0 # 网关地址 gateway 192.168.1.1 # dns服务器 dns-nameservers 192.168.1.1 其中的auto指在系统启动时获取网络信息，如果你的使用环境需要经常热插拔网线，可以改成allow-hotplug，意指网线热插拔以后可以重新获取网络。
切换网卡
如果机器上有两个网卡，比如一个有线一个无线，依然是编辑/etc/network/interfaces，把原来的primary network interface注释，改成自己需要的网卡。
重启网络
debian下重启网络
systemctl restart networking.service 参考文章 Debian 中 allow-hotplug 与 auto 的区别 </description>
    </item>
    
    <item>
      <title>记录一次照片文件的去重操作</title>
      <link>https://ruohai.wang/202405/deduplicate-media-files/</link>
      <pubDate>Fri, 24 May 2024 19:39:46 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/deduplicate-media-files/</guid>
      <description>最近因为频繁的刷机 &amp;amp; 部署photoprism，导致有一个盘上已经按照photoprism的入库规则统一重命名 &amp;amp; 归档的400张照片忘记全部备份到群晖，然后又二次误操作把这几百张照片导入了新部署的photoprism。
这时候就出现了一个重复文件的问题：
这400张照片，一部分已经备份到群晖，一部分没有。备份用的是rsync整个目录增量备份。 新部署的photoprism中，已经有100多张新照片，这次又二次导入了400张老照片，是新旧混杂的状态。 导入photoprism的照片，都会按照yyyyMMdd-hhmmss-xxxxxx这种年月日-时分秒-随机六位字符的格式作为唯一编号进行重命名，也就意味着这几百张二次导入的照片，文件名应该都发生了变化，变成了新文件，再用rsync增量备份的时候应该都会备当作新文件重复备份到群晖。 作为有轻微电子洁癖的我肯定受不了这种nas里出现几百张重复照片的事情，所以立刻想着怎么去重。
当时想到的有两个方案：
先全部备份到群晖，然后用群晖的重复文件检验功能筛选出重复文件的清单，最后手动清理群晖中的重复文件 使用第三方去重软件，比如alldup 这俩方法可行性都挺高的，虽然都略微繁琐，但最后肯定能实现去重的目的。
不过这俩方法我都没有用。因为前者需要把文件导入到群晖后，在群晖里操作。群晖里有我这十多年来的接近10万份个人文件，我担心在群晖里把文件弄乱，那就彻底gg。后者alldup支持smb网络文件夹，但是会把需要校验的文件都缓存到本地来计算hash。
因为我手上万幸还保留着那400张老照片，简单记录一下我的处理思路：
去重的核心是只修改文件名不会让文件的hash发生变化 先把400张老照片全量备份到群晖，解决这些老照片部分已备份 + 部分未备份的问题 接下去只需要比对photoprism图库中的全部照片 vs 400张老照片 在部署photoprism的armbian盒子上，用sha256sum获取到所有新文件和旧文件的hash值 + 文件名的清单 将上一步得到的清单粘贴到excel，用vlookup筛选出重复文件，以及这些重复文件的新文件名 写一个超级简单的bash脚本，直接将新重复的新文件从photoprism中删除 在photoprism中对资料库进行清理，将已经删除的文件清除索引 最后方便 &amp;amp; 快速的完成了文件去重而且0误伤。🎉
这个方案的好处是
不在群晖里操作，避免搞乱群晖的文件 在linux操作的命令也很简单，只需要进入照片目录，执行sha256sum * &amp;gt; hush.log就可以获取到全部的hash filename格式的文本清单。 比对和筛选重复文件时在excel中用vlookup来完成，非常简单易懂直观 获取到最终要删除的文件名清单以后，只需要写一个很简单的bash脚本就可以批量删除文件 bash脚本如下：
最后，本次操作还发现一个新知识点：photoprism在归档照片的时候，如果照片的exif完整，包含拍摄时间这个参数，那生成的新文件名是固定的。
之前我一直以为photoprism的文件名规则中最后六位字符是随机字符，实测不是的，是固定值。</description>
    </item>
    
    <item>
      <title>在Windows上编译Memos的前端项目</title>
      <link>https://ruohai.wang/202405/memos-frontend-compile-on-windows/</link>
      <pubDate>Thu, 23 May 2024 19:03:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/memos-frontend-compile-on-windows/</guid>
      <description>前言 memos很好用，是我高频使用的一个服务，自从我的twitter炸号以后我已经把memos当作自建twitter（或者自建微博）在使用。
memos官方一直只维护docker部署的方式，确实挺方便的，一键安装不用操心什么环境、依赖、硬件架构的问题。
但我还是渐渐的想脱离docker环境使用memos。前几天写了一篇文章写怎么编译memos前端，那篇是根据项目的github仓库的issues中很多人的回答总结出来的。但写完文章就发现其实正确的编译方法已经完整的写在源码的dockerfile文件里了。
所以这次再次自己动手，开始编译前端项目。
你可能要问为什么后端项目也自己编译，🤔，因为后端二进制包受宿主系统的硬件架构限制，amd64上编译出来的包没法在arm32平台上跑，甚至我在arm32平台上编译的包（libc）在musl的openwrt上都跑不起来。所以后端项目我直接用了github上现成编译好的，就不自己折腾了。
又因为我是windows用户，所以我用来编译的环境就是windows惹，其它系统其实也没区别，自行理解就行。
编译 先准备前端项目的编译环境，参考dockerfile中要求的版本号，实测更高版本也可以。
node，版本18 buf，版本1.26.1 先从memos的官方github项目主页下载源码、解压这些就不说了。因为从v0.15升级到v0.16涉及到数据库的表结构变更，我暂时不想步子迈这么大，所以这次以v0.15.2为例。
buf官方提供了二进制包，可以直接下载使用。指路：【bufbuild/buf】
下载后最好放到memos项目源码的proto目录（windows下应该叫做文件夹，但这里还是用linux的习惯叫目录）。
然后打开windows terminal（没有terminal就用cmd，下同），进入这个目录，执行buf-Windows-x86_64.exe generate。因为没有设置环境变量，所以这里buf命令需要用完整的文件名。
运行完以后没有报错的话就ok惹。
然后用管理员权限启动windows terminal（因为非管理员账户执行pnpm可能会提示权限不足）。
进入到memos项目源码的web目录，执行以下命令：
corepack enable &amp;amp;&amp;amp; pnpm i --frozen-lockfile 等命令跑完以后，提示内容大致如下：
然后继续执行命令pnpm build
跑完以后提示如下：
到这里整个前端项目的编译工作就结束惹，接下去只需要把web目录下的dist目录整个复制出来放到项目的server目录下即可。
项目结构示意：
--memos --server | --dist 不过这个目录结构仅限于v0.15，后续版本我看到是调整过目录结构，具体请根据dockerfile里的部署方式来调整。
好了，恭喜你编译成功，接下去就可以脱离docker环境直接跑memos惹。
🎉</description>
    </item>
    
    <item>
      <title>在OpenWrt上安装ttyd</title>
      <link>https://ruohai.wang/202405/ttyd-install-one-openwrt/</link>
      <pubDate>Tue, 21 May 2024 20:47:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/ttyd-install-one-openwrt/</guid>
      <description>前言 简单交代一下我想要跑ttyd的硬件和系统。
我的硬件是迅雷赚钱宝一代，硬件型号ws1408，228MB的内存，amlogic s805芯片。
我给这硬件刷的系统是openwrt21，内核3.10。
其实openwrt的软件仓库就带了luci-ttyd，但我觉得用起来不方便，要登录openwrt——服务——ttyd，然后二次登录。除此之外，luci-ttyd的窗口大小也受限制，没法做到浏览器全屏。
所以最后还是用二进制包的方式在openwrt上安装一遍ttyd。
安装 第一步：下载
ttyd的github项目主页指路：【tsl0922/ttyd】，在release页面找到对应版本的二进制包。ws1408是arm32/armhf/armv7l，三种叫法都对。我这里选择ttyd.armhf。
wget -O ttyd https://github.com/tsl0922/ttyd/releases/download/1.7.7/ttyd.armhf 注意看下下载的文件是不是有可执行权限，没有的话chmod +x ttyd赋权。
第二步：sysv脚本
在/etc/init.d目录下新建文件ttyd，然后粘贴以下代码，端口号和文件路径请自行调整：
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/ttyd/ttyd -p 12345 -W login } stop() { kill $(pidof ttyd) } 保存后退出，然后给文件添加可执行权限，chmod +x ttyd。
这里有两个个注意点，第一是ttyd从某个版本以后默认是只读权限了，启动命令需要添加-W参数才会有写入权限。第二是我这个脚本只适配了start和stop命令，其它的restart没做适配，有需求的可以自己参考sysvinit的语法补足。
第三步：ttyd启动
看了这么多篇在openwrt上装软件的博客，启动和添加启动项大家应该都很熟练了。
# 启动 service ttyd start # 添加启动项 service ttyd enable 好了，到这里在openwrt上运行ttyd二进制包的操作就完成惹。
🎉</description>
    </item>
    
    <item>
      <title>非Docker方式在Openwrt上运行Memos</title>
      <link>https://ruohai.wang/202405/memos-run-on-openwrt-without-docker/</link>
      <pubDate>Mon, 20 May 2024 00:32:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/memos-run-on-openwrt-without-docker/</guid>
      <description>前言 长话短说了。
Memos的开发者只提供了docker镜像这一种部署方式，而且从v0.15.0以后已经停止维护针对arm32/armhf/armv7l的版本。
我的系统是3.10内核的openwrt 21，因为内核太老所以不支持安装docker。
我的硬件是迅雷赚钱宝一代，硬件型号ws1408，芯片amlogic s805，内存228MB。
我用的memos后端是v0.15.2，是从github下载的，指路：【memospot/memos-builds】。
你可能会问为什么不用更高的版本，😂，有苦衷的。其一是因为前端部分需要自己编译，我只成功编译出了v0.15.0版本，更新的版本我本地编译都会报错，暂时没有精力去debug。其二是因为之前受arm32平台的限制，我一直用的是v0.15.0的docker镜像，而从v0.16开始的更新就涉及到数据库表结构的变更，没法平滑的升级，所以本次还是停留在v0.15这个大版本。
至于后端v0.15.2 + 前端v0.15.0这种奇怪的版本组合，😂，我用了一个周末，还没有发现什么bug，可以正常使用。
我自己编译的v0.15.0的前端项目的下载放在文章最后。
这种方式也适用于在其它linux版本上直接用编译好的二进制包运行memos，自行调整配置文件即可。
配置 先把v0.15.2的后端 + v0.15.0的前端上传到服务器，然后按照项目结构进行组织。后端文件memos不要忘记添加可执行权限，chmod +x memos。
--memos --server | --dist 我的项目结构如下图，其中data用来存放memos的数据。
接下去就是配置启动脚本以及一些bug处理。
第一步：sysv脚本
在/etc/init.d目录下新建文件memos，记得添加可执行权限chmod +x memos，然后粘贴以下代码。其中的文件路径、端口号、数据存放目录请自行修改。
#!/bin/sh /etc/rc.common START=99 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/data/memos/memos --mode=prod --port=5203 --data=/mnt/data/memos/data } stop() { kill $(pidof memos) } 保存后退出，然后启动服务并设置开机启动。
# 启动服务 service memos start # 添加启动项 service memos enable 注意这个脚本只设置了start和stop两个命令，其它的restart之类都没有适配，有需求的话请自行添加代码。
第二步：设置缩略图目录
memos应该是硬编码了到/var/opt/memos/assets这个附件目录下索引图片来生成缩略图，但我们用二进制包运行memos的话，数据存放路径都会自定义设置，其次是openwrt系统下，/var目录是个临时目录，一重启就会清空数据，所以肯定要修正这个bug。
比如我的memos数据都存放在/mnt/data/memos/data目录下。
解决的方法是建立一个软连接，把附件目录指向我们自定义的附件目录。
# 新建目录 mkdir -p /var/opt/memos/ # 把硬编码的目录通过软链接指向我们自己的数据目录 ln -s /mnt/data/memos/data/assets/ /var/opt/memos/assets 但机器可能偶尔会重启，一重启整个/var目录会被清空，不可能每次重启都手动创建一遍目录 + 软连接，所以需要把这个操作添加到启动项。</description>
    </item>
    
    <item>
      <title>在刷了Armbian的玩客云（WS1608）上编译Memos教程</title>
      <link>https://ruohai.wang/202405/memos-compile-one-onecloud/</link>
      <pubDate>Fri, 17 May 2024 12:52:28 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/memos-compile-one-onecloud/</guid>
      <description>前言 memos是一个很不错的开源笔记服务，我在刷了armbian的迅雷赚钱宝二代（下称小飞碟）上用docker方式部署了一个自己的memos，已经高强度使用至今。
但玩过迅雷赚钱宝系列的垃圾佬肯定知道这系列机器从一代到三代，用的芯片都是amlogic s805，架构是arm32/armv7l/armhf，而memos官方从v0.15.0开始就不再发布针对该硬件架构的docker镜像。因为如此，所以我使用的memos一直停留在0.15.0，坏处当然是用不上最新版、体验不到新特性，不过也有好处，至少稳定、不折腾了用了半年。
在docker hub上也能搜到第三方发布的针对各个硬件架构的memos的镜像，比如这个：【lincolnthalles/memos】，几乎覆盖了全部可能的硬件。
但我还想更geek一点，我想不再囿于docker，而是直接用源码编译出memos的二进制包，然后把编译出来的memos丢到刷了openwrt的机器上跑。
先说一下结果：
成功的编译出了arm32/armv7l/armhf版本的memos，可以在刷了armbian的玩客云/小飞碟上正常跑 编译出来的memos在openwrt上跑不起来，目测应该是openwrt是musl而编译出来memos用的libc 尝试直接在openwrt上编译，没成功 虽然最终的目的没有达成，但至少也成功了一半。所以写篇博客，记录一下过程，也许能帮到你。
环境准备 编译memos项目，分成前端和后端两个部分。
编译后端，需要golang，我用的debian仓库里的golang，直接apt install golang即可，版本1.19。
编译前端需要nodejs，最好再装个yarn。
因为玩客云的内存太小，我尝试在玩客云上直接编译前端项目时会因为oom而中断。考虑到前端项目的代码不区分硬件平台，所以我是在windows电脑上编译的前端项目然后再copy到玩客云上。
nodejs设置镜像源、go设定GOPATH、解决网络问题这些属于基操了，不再赘述。
编译环境准备好了以后，接下去就开始吧！
开始编译 从github下载源码，解压，进入项目根目录这些操作略过。
前端
进入web目录用yarn编译，执行以下命令
# 进目录 cd web # 安装依赖 yarn # 打包 yarn build 编译完成后，把web目录下生成的dist/目录整个复制到/server/dist/下，也就是
mv web/dist server/dist 如果你跟我一样在其它机器上编译的前端项目，同样只需要把web目录下的dist/复制到最终机器上的server目录下就可以了。
到这里，前端项目编译完成。
后端
在项目根目录执行命令
go build -o memos ./main.go 命令跑完以后在项目根目录下会出现一个memos的文件，就是编译好的后端了。
关于后端编译有一个坑需要注意，就是，比如我在/mnt/data/memos.v0.15.0目录下编译出了一个memos后端，那这个memos后端只会去/mnt/data/memos.v0.15.0/server/dist目录下找前端，aka后端文件中的前端项目路径在编译的时候就写死了。如果把编译好的memos后端放到其它目录下，就会找不到前端项目。
运行
前端和后端都编译完成后，最终我们需要的项目结构如下：
----memos_project |--memos |--server |--dist |--assets |--index.html |--logo.webp |--manifest.json |--sw.js |--... 最后在项目根目录下执行命令即可，记得根据自己喜好调整端口号和数据保存路径。
./memos --mode=prod --port=5230 --data=/path/to/save/data 看到这个界面就算是成功惹，打开浏览器，访问http://host-ip:5230就可以使用自己编译的memos。
systemd配置文件</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS408）上安装Navidrome教程</title>
      <link>https://ruohai.wang/202405/navidrome-install-on-ws1408/</link>
      <pubDate>Wed, 15 May 2024 18:36:51 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/navidrome-install-on-ws1408/</guid>
      <description>前言 迅雷赚钱宝一代（下称小方块）这机器折腾到现在，相信你也摸出规律了，但凡是支持armbian32/armhf/armv7l的软件，只要有已经编译好的二进制包，在openwrt上都能跑，无非就是需要自己动手写一个sysvinit版本的启动脚本。
这么看来，小方块上还能继续安装navidrome、hugo、alist、ttyd等等我之前装在armbian小盒子上的服务。既然都有alist了，那挂个小雅合集也不是难事。
说远了，这篇文章就简单说一下怎么装navidrome
安装 第一步：下载
首先就是去navidrome项目的github仓库找安装包，项目地址【navidrome/navidrome】。
在release页面找到armv7版本的包，复制链接
然后用wget命令下载到本地并解压
# 下载 wget -O navidrome.tar.gz https://github.com/navidrome/navidrome/releases/download/v0.52.5/navidrome_0.52.5_linux_armv7.tar.gz # 解压 tar -zxvf navidrome.tar.gz 解压以后看到navirome二进制包已经有可执行权限了，如果没有的话，执行一下chmod +x navidrome即可。
第二步：编辑配置文件
在二进制包的目录下，新建配置文件
# 新建 touch navidrome.toml # 编辑(没有nano就用vim) nano navidrome.toml 在配置文件中，有以下几个参数需要指定：
MusicFolder：歌曲文件所在目录 DataFolder：软件运行数据的存放目录，默认是./data，也就是当前目录下新建一个/data目录 Port：端口号，默认是4533 除了以上三个我觉得比较重要，其它更多参数可以看官方的手册，指路：【Navidrome/Available Options】
比如我的配置如下：
编辑完成后保存即可。
第三步：编辑启动脚本
现在到最后一步了，需要编辑一份适合sysvinit的启动脚本。
# 进目录 cd /etc/init.d # 新建 touch navidrome # 编辑 nano navidrome 我提供一个最简单可用的版本(里面的文件路径记得自行调整)：
#!/bin/sh /etc/rc.common START=96 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/sdcard/navidrome/navidrome --configfile &amp;#34;/mnt/sdcard/navidrome/navidrome.toml&amp;#34; } stop() { kill $(pidof navidrome) } 粘贴以后保存退出。</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上开启Swap交换分区</title>
      <link>https://ruohai.wang/202405/swapon-on-ws1408/</link>
      <pubDate>Wed, 15 May 2024 17:44:08 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/swapon-on-ws1408/</guid>
      <description>前言 不知直觉已经在我的迅雷赚钱宝一代ws1408（下称小方块）上部署了不少服务，比只有70MB可用的存储空间更金贵的，是只有228MB可用的运行内存。
这点内存，稍微跑几个服务就容易oom，比如qbittorrent-nox，很容易闪退。虽然之后我在qbit的设置中调小了内存占用的数值，但依然会出现10GB的大文件下载完成后校验时闪退。
我刷的openwrt21固件默认不启用swap分区。在经历了好几次oom以后，痛定思痛，我准备开启swap分区来缓解小方块内存太小的问题。
配置 小方块有两个扩展接口，一个tf卡槽，一个usb2.0接口。
我在机器上插了一张tf卡挂载到/mnt/sdcard作为存储空间用，留下usb2.0来外接硬盘作为数据盘。所以这次的思路是，在sd卡上创建一个200MB的swap文件作为系统的swap分区使用。关于swap分区的大小应该设置成多少，很多古董文章里都说要设置成内存的2倍大小，不用机械的按照这个奇怪的规则去设定，设定成和内存同样大小、1/2大小、5倍大小都可以，根据自己的实际情况来定就可以。
tf卡的i/o性能肯定没法和内存相提并论，实测开启swap以后，系统的响应速度都会被拖慢，但好处也很明显，可以部署大量的服务而不用担心oom惹。
第一步：创建swap文件
先新建一个200MB大小的文件。
可以用dd命令
dd if=/dev/zero of=/mnt/sdcard/swap bs=1M count=200 也可以用fallocate命令
fallocate -l 200M /mnt/sdcard/swap 第二步：格式化
将创建的指定大小的swap文件格式化为swap文件系统
mkswap /mnt/sdcard/swap 第三步：启动swap设备
执行命令
swapon /mnt/sdcard/swap 到这一步以后，可以用free -m或者htop工具来查看swap是否已经启用。
htop
free -m
第四步：设定开机自动挂载swap
网上很多文章到这一步都会让设置/etc/fstab然后把swap挂载信息写上去，这个方法需要block-mount工具的支持，小方块的openwrt默认并没有安装这个工具。
所以这里用的添加启动脚本的方法来解决。在自动挂载sdcard的命令后面，加上一条启动swap的命令即可。
swapon /mnt/sdcard/swap 最后点击保存。
到这里，在openwrt上开启swap的操作就全部完成惹。
🎉</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装Tailscale教程</title>
      <link>https://ruohai.wang/202405/tailscale-install-on-ws1408/</link>
      <pubDate>Tue, 14 May 2024 18:42:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202405/tailscale-install-on-ws1408/</guid>
      <description>前言 先说明一下我的迅雷赚钱宝一代ws1408（下文称做小方块）刷的系统是openwrt 21.02.7（文章末尾有下载链接），内核3.10.33。
之前没有想到这个小方块的可玩性还挺强，因为内核太老、内存太小导致没有什么可用的固件，只能基于现有的openwrt固件来屎上雕花，让它继续发光发热了。
tailscale官方只提供了一键安装的脚本，那我们只能找第三方编译好的安装包了，项目地址：【Azathothas/Static-Binaries】。
有了已经编译好的安装包，那我们就开始吧！
安装 【Azathothas/Static-Binaries】项目的release页面提供的二进制包，不仔细看还以为同样的包提供了两份，仔细看一个是tailscale，另一个是tailscaled。
根据我浅薄的linux使用经验，名称中带d的那个肯定就是守护进程的版本惹。
项目的手册中提供了安装教程，地址【Install TailScale】，英文阅读无障碍的话直接看项目手册就行。
根据我实际安装的经验，tailscale不带d的这个安装包，是用来进行初始化配置的（比如设置子网路由、关联tailscale账号），tailscaled带d的安装包，是实际运行的服务程序。所以，想要跑tailscale，需要两个安装包都下载到本地。
不过项目的release页面还提供了merged版本，看名字我觉得是二合一版本，但实际测试发现还是俩包分开的比较容易上手，所以这篇文章不聊这个merged版本。
第一步：下载
小方块用的芯片是我们的老朋友amlogic s805，硬件架构是arm32/armv7l/armhf，固件openwrt用的init系统是sysv，根据这些信息找到正确的安装包：
注意有两个安装包，一个是初始化配置用的、不带d的tailscale，一个是带d的tailscaled。
# 下载tailscaled wget -O tailscaled https://github.com/Azathothas/Static-Binaries/releases/download/tailscale_v1.66.1/tailscaled_arm_abi_Linux # 下载tailscale wget -O tailscale https://github.com/Azathothas/Static-Binaries/releases/download/tailscale_v1.66.1/tailscale_arm_abi_Linux # 给俩文件添加可执行权限 chmod +x tailscale tailscaled 到这里，下载的步骤就完成了。
第二步：将tailscaled添加为sysv服务
网上搜了一圈没找到tailscale的sysv配置文件，所以根据以往经验，再参考systemd版本的配置文件，可用的sysv配置文件如下。我的tailscale文件保存在/mnt/sdcard目录下，请根据自己的实际情况调整这个路径。
# 进入目录 cd /etc/init.d/ # 创建配置文件 touch tailscaled # 编辑配置文件(没有nano可以用vim) nano tailscaled 然后把这段代码粘贴进去，保存退出。
#!/bin/sh /etc/rc.common START=96 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /mnt/sdcard/tailscale/tailscaled --state=/mnt/sdcard/tailscale/tailscaled.state --socket=/mnt/sdcard/tailscale/tailscaled.sock --port=123456 } stop() { service_stop /mnt/sdcard/tailscale/tailscaled --cleanup } 最后给文件添加可执行权限并启动</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装File Browser</title>
      <link>https://ruohai.wang/202404/filebrowser-install-on-ws1408/</link>
      <pubDate>Tue, 30 Apr 2024 21:21:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/filebrowser-install-on-ws1408/</guid>
      <description>前言 迅雷赚钱宝一代，硬件型号ws1408，芯片是大家的老朋友amlogic s805，配了256MB内存，刷机可以后可用存储空间只有72MB左右。
我刷的固件是openwrt 21.02.7，内核3.10.33。
这个硬件配置，这个内核版本，docker肯定是不用想了，所以看看还能装点儿啥软件吧。
安装 这里先吐槽一下filebrowser官方吧，现在官方文档里的安装方式只给了一键脚本和docker两种方式，而且也没有提供比较明白的编写配置的文档，不明白在怎么想的。
第一步：下载
首先找到filebroser项目的github页面【filebrowser/filebrowser】，在releases页面找到正确的安装包。
我们的老朋友s805芯片是armv7/armhf架构，不要选错。
ssh连上openwrt，使用wget下载。我在机器上插了一个sd卡挂载到/mnt/sdcard作为软件安装目录。
# 进目录 cd /mnt/sdcard/filebrowser # 下载 wget -O filebrowser.tar.gz https://github.com/filebrowser/filebrowser/releases/download/v2.29.0/linux-armv7-filebrowser.tar.gz # 解压 tar -zxvf filebrowser.tar.gz 解压以后可以看到filebrowser这个二进制包已经有可执行权限，但是文件的归属权限比较乱，默认是1001:127。
所以先改一下归属用户和组。
# 调整文件的用户和组为root chown -R root:root * 第二步：编辑配置文件
依然是在软件的目录下，开始编辑配置文件
# 新建配置文件 touch config.json # 编辑，没有nano的话可以用vim nano config.json 把下面的代码粘贴进去
{ &amp;#34;port&amp;#34;: 8080, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/mnt/sdcard/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/mnt/sdcard/filebrowser/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 配置释义：
port：指定服务使用的端口号 address：指定服务的访问地址，默认0.0.0.0就是监听所有来源的网络请求 root：指filebrowser可以访问的根目录，比如我只想让filebrowser访问/mnt目录下的文件，那就改成&amp;quot;root&amp;quot;:&amp;quot;/mnt&amp;quot; database：指filebrowser的数据库文件存放路径 log：指filebrowser的日志文件的存放路径 username：指初始用户名 以上根据自己的喜好调整即可。
到这一步，可以直接./filebrowser -c config.</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上部署Cloudflare Tunnel</title>
      <link>https://ruohai.wang/202404/cloudflared-install-on-openwrt/</link>
      <pubDate>Tue, 30 Apr 2024 13:14:36 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/cloudflared-install-on-openwrt/</guid>
      <description>前言 手上的迅雷赚钱宝一代（ws1408）刷了openwrt，然后装了samba4、qbit、wol、filebrowser、ttyd、minidlna，除了这些以总想着还能在这个电子垃圾上挖掘出什么功能，最后想到它作为一个24小时开机的下载机，再弄个cloudflared给我的cloudflare tunnle做冗余connector是个不错的主意。
之前的博客里提到过，cloudflare tunnel的官方文档里就写了，想要提高一个tunnel的稳定性，有花钱的方案也有免费的方案，免费的方案就是自己多弄几个机器装cloudflared来作为tunnel的connector，这样哪怕其中一个connector崩了，还有其它几个connector备份可用。
我实测一个tunnel配置两个connector（cloudflared）就再没见过degrade或者down的标识了。但这玩意多多益善，3个总是比2个稳定，那就开始吧~
安装 第一步：下载
openwrt说到底还是魔改的linux，所以找到合适版本的cloudflared就行了。
实测clouflare官方提供的二进制包就可以直接使用，项目地址：【cloudflare/cloudflared】
ws1408用的芯片是大家的老朋友amlogic s805，我们都很熟悉它是armv7l/armhf的架构。
可以选择复制下载链接，然后ssh连上openwrt，再用wget下载。也可以直接下载到本地，然后通过winscp或者其它方法上传到机器。
我在机器上插了一张sd卡挂载到/mnt/sdcard作为软件安装目录，因为ws1408自带存储只有72MB太金贵啦。
# 进入目录 cd /mnt/sdcard/cloudflared # 下载 wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/download/2024.4.1/cloudflared-linux-armhf # 添加可执行权限 chmod +x cloudflared 第二部：安装
软件下载完以后，首先需要登录cloudflare官网，进入tunnel配置页面，找到自己的tunnel，在configure页面的overview标签页，找到自己的这个tunnel的token。
打码的就是token了，复制以后先放一边备用。
然后依然是ssh连上openwrt，开始安装
# 进目录 cd /mnt/sdcard/cloudflared # 安装服务 ./cloudflared service install [token] 执行install命令以后，终端会有一些信息输出，提示在环境变量$PATH中找不到可执行文件。
这里可以先不管它，我们手动启动。
# 进入init.d目录 cd /etc/init.d 确定目录下有cloudflared的服务配置文件。
然后启动cloudflared
service cloudflared start 然后用htop确认cloudflared是否启动
到这里就完成在openwrt上安装cloudflare tunnel的connector惹。
🎉
一些已知问题 我的ws1408装的opwnwrt版本是21.02.7，内核是3.10.33。
按照上文的方法安装好cloudflared以后，可以启动，但是没法把它添加到开机自启。执行service cloudflared enable会提示不支持enable命令。
在openwrt的后台——启动项中显示cloudflared的启动项是禁用，点击启用，会提示启用失败。
如果你熟悉init.d的启动脚本语法，可以试试调整/etc/init.d/cloudflared能否解决这个bug。
我用了另外的办法解决，那就是在本地启动脚本里手动添加一条命令。
service cloudflared start 😂</description>
    </item>
    
    <item>
      <title>DDNS-GO通过命令获取有效的IPv6地址</title>
      <link>https://ruohai.wang/202404/ddns-go-use-shell-command-to-get-valid-ipv6-addr/</link>
      <pubDate>Mon, 29 Apr 2024 23:55:45 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/ddns-go-use-shell-command-to-get-valid-ipv6-addr/</guid>
      <description>前言 使用ipv6 + ddns来实现公网访问部署在自己机器上的网络服务是现在很多nas玩家必备的技能，非常的方便、好用而且免费。
但是在实际使用过程中，我的armbian小盒子经常出现多个ipv6公网地址，有时候是2个，有时候是3个，更有的时候当我在刷机玩openwrt时会短暂出现5个ipv6公网地址。
我用ddns-go来实现ddns，这个软件非常好用，基本能在90%的场景下正常运作。但当我的设备出现3个甚至3个以上的ipv6公网地址时，我不得不一次次的手动去调整，这实在是非常的智障。
我也在网上找了一些获取有效ipv6公网地址的命令，比如【Linux中获取本机的最新IPv6地址_更新ddns的脚本_获取openwrt的IP地址】文章中提供的命令，是根据多个ipv6地址的valid_lft来排序，获取最长有效生命时长的ipv6地址。但我实测并不好用，因为当设备出现两个valid_lft相差不到1秒钟的ipv6地址时（是的，这么稀有的情况我都会碰到而且碰到了好几次），会导致命令筛选后的结果在两个ipv6地址之间反复横跳，引起频繁的dns更新请求，反而让网络服务的访问变得更不稳定。
在网上反复搜索都没有合适的解决方案，那只能自己动手了。
命令 根据我自己使用armbian小盒子近一年的观察，使用ip -6 addr show ifce获取到的ipv6地址，排在最后面的那个就是最新的那个，也就是valid_lft最长的那一个。
所以这个命令的原理就是：用ip -6 addr获取ipv6地址，然后选择排在最后面那一个。
先直接给出结果：
ip -6 addr show eth0 | grep -v deprecated | grep &amp;#39;inet6 [^f:]&amp;#39; | awk -F&amp;#39; &amp;#39; &amp;#39;{print $2}&amp;#39; | awk -F&amp;#39;/&amp;#39; &amp;#39;{print $1}&amp;#39; | tail -1 然后是步骤拆解：
ip -6 addr show eth0，显示网卡（eth0）的全部ipv6地址 grep -v deprecated，去除已经失效（deprecated）的地址 grep &#39;inet6 [^f:]&#39;，显示有ipv6地址的那一行（不包含f开头的内网ipv6地址） awk -F&#39; &#39; &#39;{print $2}&#39;，根据空格符号分列，打印第二列 awk -F&#39;/&#39; &#39;{print $1}&#39;，根据斜杠符号/分列，打印第一列 tail -1，显示最后一行 实测不管有多少个ipv6地址，都可以正确获取到最后一个有效的ipv6公网地址。因为这个命令的获取方式并不是根据valid_lft排序，所以也不会出现因为两个ipv6地址因为valid_lft间隔少于1秒钟导致获取到的地址反复横跳的bug。
这个命令已经是我能想到的、能写出来的最精简、最有效的命令了（也许两个awk可以合并成一个）。</description>
    </item>
    
    <item>
      <title>在刷了OpenWrt的迅雷赚钱宝一代（WS1408）上安装qBittorrent教程</title>
      <link>https://ruohai.wang/202404/qbittorrent-install-on-ws1408-and-openwrt/</link>
      <pubDate>Sat, 27 Apr 2024 07:46:15 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/qbittorrent-install-on-ws1408-and-openwrt/</guid>
      <description>前言 手上有两个迅雷赚钱宝一代，硬件型号ws1408，当时捡垃圾的时候卖家作为添头10块钱一个打包入手的。它长这个样子
正面
背面的接口
这机器性能孱弱，赚钱宝系列连用三代的amlogic s805芯片方案，256MB内存，usb2.0接口 + tf槽，先进的百兆网口，所以吸引不了大佬给它适配固件，装个3.10老旧内核的openwrt再装个bt下载软件当下载机是个不错的选择。但openwrt软件源仓库里只有aria2和trasmission，这俩在bt下载能力上远远不如qbit，所以我一直想在这机器上装qbit。
最近找了一些教程，最后成功跑起来了。这里做个简单记录。
固件 目前这机器可用的固件都是从官方固件中提取的3.10内核魔改的openwrt，我用下来觉得比较好用的是这俩版本：
openwrt-19.07.7 openwrt-21.02.7 这俩版本都可以用amlogic usb burnning tools软件直接线刷。俩固件都是干净整洁无异味的openwrt官版，没有安装任何插件，甚至连语言包都没装，适合喜欢纯净版的你，内置的软件源直接可用。
我推荐使用openwrt-21.02.7版本，版本比较新，软件仓库的里提供的软件版本也更新。而且openwrt-19.07.7这个版本有点小问题，作者在弄镜像的时候弄乱了用户，根目录下看到很多目录的所属用户和组都是1000:1000，还需要自己chown -R还原回来。
两版固件在文章末尾都提供了下载连接。
安装qbit openwrt的软件源仓库里没有提供qbit，装qbit需要找别人编译好的二进制包。我用的是这个项目【userdocs/qbittorrent-nox-static】的包。
第一步：下载软件
这机器的硬件架构是 armv7l，在项目的release页面找到对应的版本。
ssh进入openwrt，选择目录开始下载。我在mnt目录下挂载了一个硬盘，路径为/mnt/data，下文中就以此举例。
# 创建软件目录并进入目录 mkdir /mnt/data/qbittorrent ; cd $_ # 下载软件 wget -O qbittorrent-nox https://github.com/userdocs/qbittorrent-nox-static/releases/download/release-4.6.4_v2.0.10/armv7-qbittorrent-nox # 赋予可执行权限 chmod 700 qbittorrent-nox 到这里，软件的下载和赋权就完成了。
第二步：运行软件
有一点linux基础使用能力的人肯定知道一个可执行的二进制包，只需要敲命令./qbittorrent-nox就可以直接跑起来了。这样确实可以，但我还是想精细一点。
首先就是指定qbittorrent-nox软件的配置文件目录。这机器内置存储是nand，不知道啥时候就挂了，所以我想把配置文件都保存在比较安全的地方，方便下次刷机以后直接恢复。
# 依然是在qbit的安装目录 cd /mnt/data/qbittorrent # 首次运行qbit，用--profile参数指定配置文件目录 ./qbittorrent-nox --profile=/mnt/data/qbittorrent/config 这时候qbit开始启动，终端会出现提示说bt分享的免责声明，询问是否继续运行，敲y。然后qbit成功启动，终端会输出访问web ui的网址，以及初始的账户（admin）和随机密码。
用账户和随机密码登录网页的qbit，调整中文语言
修改账户和密码，然后保存。
到这里就完成了qbit的初始化，已经可以正常使用了。
但这个时候qbit是以前台任务的形式在终端里运行，如果ctrl +c或者关掉终端，qbit也会停止运行。
所以接下去要写一个init.d开机启动的脚本。
第三步：启动脚本
openwrt的启动脚本放在/etc/init.d目录。
先看一下启动脚本的简单模板：
#!/bin/sh /etc/rc.common START=95 STOP=10 SERVICE_WRITE_PID=1 SERVICE_USE_PID=1 SERVICE_DAEMONIZE=1 start() { service_start /usr/bin/caddy run -config /etc/caddy/Caddyfile } stop() { service_stop /usr/bin/caddy } 看不懂也没关系，我也看不懂，只需要照葫芦画瓢，知道改哪里、怎么改就行了。</description>
    </item>
    
    <item>
      <title>浙西天路&#43;皖浙天路自驾攻略与记录</title>
      <link>https://ruohai.wang/202404/roadtip-in-zhejiang-and-anhui/</link>
      <pubDate>Fri, 26 Apr 2024 13:56:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/roadtip-in-zhejiang-and-anhui/</guid>
      <description>前言 4月24号、25号两天出去自驾玩了一圈，路线选的是浙西天路 + 皖浙天路 + 黄山，两天一夜，有点儿辛苦但路上风光秀丽、景观奇特，觉得还是值得跑这一趟。
在安排这趟自驾游之前，我在网上也找了很多的攻略，尤其是第一天的路线，出发之前做了很多的准备。但实际跑下来，还是发现网上的攻略有不少的细节没有提到，所以写篇博客做个补足。
路线总览 这是一条非常成熟的自驾路线，大致路线见图。因为高德地图添加途径点的数量限制，所以在图片里没有把所有打卡点都做标注。
首先提一下这条路线的几个要点：
路线全程大概120km，打卡景点在12个左右 可以一天跑完，但要求早出（早上8点从剑门出发）晚到（晚上6点到家朋乡） 一路上都是小村落，吃饭只能找农家乐，个人建议自带干粮 整条自驾路线山高路陡弯大，开车安全第一 也可以反向跑，从家朋出发到临安剑门，但个人建议还是临安出发比较合适 做好防晒 在临安境内（从剑门到地藏大峡谷）沿途有很多小溪，河道内有巨石急流，可以停车拍照，到了安徽境内就没有这样的景了 电车也可以跑，但需要提前做好续航规划。除了在家朋乡看到了国家电网的充电桩（只有两个充电枪），其它地方都没有再看到。而且一路上有大量的爬坡路，电耗可能会比较大。 从起点到终点，完整的途径点如下，没有备注的话，途径点就是导航点：
临安石长城剑门景区客服中心 大回弯观景台（导航到太子尖驿站会路过） 太子尖驿站 华光潭大桥 株川悬索桥（导航到株川村公交站） 石门潭水电站（导航到地藏大峡谷会路过） 地藏大峡谷 中国名山小九华 荆州乡（导航到荆州中心小学） 荆州乡观景平台（导航到云山岭观景平台会路过） 云山岭观景平台 情人瀑 尚村 梅干岭观景平台 家朋乡旅游集散中心 分景点细节 临安石长城剑门景区客服中心（停留时间：10分钟）
这是个收费景区，成人票128rmb。剑门，有称天下第一石门，在公路边就可以看到，自驾的话，就不必花钱进景区了，在公路边可以白嫖合影。
大回弯观景台（停留时间：10分钟）
这个打卡点临近太子尖驿站，在所有的攻略上都没有提到，也没有一个正式的名称。因为是一个接近180°的大回弯所以我给它取这么一个名字。弯道两边是陡峭山谷，视野极佳，适合用广角镜头拍打卡照。
太子尖驿站（停留时间：不爬山10分钟，爬山90分钟）
太子尖，杭州第三高点，海拔1558米。如果选择不爬山，在太子尖驿站拍照打卡即可。如果选择爬山，上山路线在太子尖驿站对面的台阶。
太子尖是一个没有开发的野山，除了刚开始的50米有台阶，后面整个登顶路上没有石板路也没有台阶，都是雨水冲刷的乱石野坡，而且坡度非常的陡，没有护栏之类等安全措施，请务必慎重考虑是否爬山登顶。整个登顶过程大概需要30~50分钟，下山大约20分钟。
如果你登顶了，恭喜你🎉。山顶有之前的游客们堆的一个碎石堆，可以添砖加瓦，让太子尖再增高几公分。
华光潭大桥（停留时间：10分钟）
华光潭大桥是位于华光潭水库上的白色拱桥。单独作为一个景的话可看度不高，需要结合它的历史背景才会更有意义。
大桥的历史背景：
位于华源线上的华光潭特大桥是华光潭水库库区公路改造工程中的关键控制性工程， 跨越约78米之深涧，蓄水后水深可达62米，桥两岸悬崖峭壁，地形狭窄险峻。 桥北边为18省道，是浙江省西部通往安徽的必经公路。 华光潭特大桥全长194.08米，宽11米（其中行车道7米），主跨为165米，跨径中承式钢管砼拱桥， 拱肋为等截面悬连线，矢高33米，是我市有史以来第一座单跨式拱管混凝土特大桥，列全省第四。 株川悬索桥（停留时间：10分钟）
网上的很多攻略，从华光潭大桥之后就直接去到地藏大峡谷了。但实际路上还有俩个景点值得一看，其一就是株川悬索桥。
株川悬索桥是个人形悬索桥，宽度1.8米，一个电动三轮车刚好通过。
如果株川悬索桥上人比较多的话，继续往前不远处还有另一个悬索桥，名字我忘记了。
石门潭水电站（停留时间：10分钟）
这个水库在路边就可以看到，但奇怪的是不管是在网上还是高德地图上都搜不到任何信息。如果是丰水期，水库里的水会从顶部的泄水口流出形成瀑布。
很可惜我去这这两天只有底部的一个泄水口在喷水，有一个小小的彩虹。
地藏大峡谷（停留时间：10分钟）
地藏大峡谷，就在浙江杭州临安和安徽绩溪的交界处，省界处有个门楼。自此开始进入安徽境内的皖浙天路。
这景点叫做大峡谷，所以一开始我的期望还挺高的，但实景让我觉得落差有点大。门楼旁边有个潺潺小溪，我甚至都错过了没有拍照。
中国名山小九华（停留时间：10分钟）
这也是个挺大的景区，但我们自驾主要看的是路边的一块奇石，因为形若关刀，所以叫做关刀石。
荆州乡（停留时间：10分钟，可以作为补给点）
从中国名山小九华出发之后，网上的攻略都会直接导航去下一个景点云山岭观景台，中途会路过荆州乡。如果早上从临安剑门出发的话，到荆州乡差不多是中午了，可以在这里稍微休息，吃个中饭或者作为补给点补充一下食物和水。
荆州乡其实也有一些老街老房可以看，只是不在临街位置，需要往里走。路边的小溪上有一座古石拱桥可以拍照打卡。
荆州乡观景平台（停留时间：10分钟）
从荆州乡出发以后，又要开始爬坡了。爬坡到半山腰位置，会经过荆州乡观景平台，这个平台有一辆石头砌成的车子，所以算是一个必打卡的景点了。
云山岭观景平台（停留时间：10分钟）
云山岭观景平台，是皖浙天路的制高点了。在观景平台这里可以看到奇山险峰，可以当作黄山平替吧。</description>
    </item>
    
    <item>
      <title>Linux使用badblocks扫描&amp;屏蔽硬盘坏道</title>
      <link>https://ruohai.wang/202404/badblocks-check-guide/</link>
      <pubDate>Sat, 20 Apr 2024 18:02:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/badblocks-check-guide/</guid>
      <description>前言 最近从pdd上入手了10多片拆机硬盘，都是250gb的hdd，到手以后用crystal diskinfo看了下参数，fujitsu(富士通）硬盘，sata150速率，生产日期2009。
这些硬盘应该都是从联想笔记本电脑上拆下来的，pdd商家没有做格式化只直接卖给了我这样的捡垃圾爱好者，所以在这十多片硬盘里我看到了好多原用户的各种资料，很多cad图纸、cmmb项目计划、家人旅游照片、小孩满月照片、结婚照等等，最离谱的是竟然还有gv/av。
翻阅别人的隐私内容肯定是不正确的，在正式开始扫描硬盘坏道之前，对这些硬盘做了简单格式化。
下面开始简单记录下处理硬盘坏道吧。
扫描坏道 首先用badblocks扫描硬盘，常用参数
-b, 指定磁盘区块大小，单位byte，理解为最小扫描单位 -o，指定扫描结果的输出路径 -s，检查时显示进度 -v，检查时显示详细的信息 -w，检查时执行有破坏性的写入测试，注意这个操作会破坏硬盘上的数据，请提前做好数据备份 -n，检查时执行没有破坏性的写入测试 一般情况下只需要以下命令即可，默认检查区块大小是4096bytes。注意，无论是-w还是-n，写入测试都会非常非常非常的耗时，建议只用默认的读测试扫出坏块以后再针对坏块做写测试。
badblocks -sv -o badblocks.log /dev/sda 如果想要指定检查区块大小，做到每一个sector应检尽检，可以用-b指定区块大小
badblocks -sv -b 512 -o badblocks.log /dev/sda 想要知道自己的硬盘的区块大小，可以用fdisk查看
fdisk -l /dev/sda 在输出结果中可以看到硬盘的区块大小是多少
屏蔽坏道 扫描结束以后，再用e2fsck把坏道屏蔽。
e2fsck -l badblocks.log /dev/sda 这个方案比较软，就是把扫描出来的坏道数据添加到文件系统的黑名单里，适合硬盘上已经有数据的情况。
还有个方案比较硬，用badblocks往指定范围的区块上写入数据，写入失败时硬盘会自动重新映射，这个方案适合硬盘上没有数据的情况。
badblocks -wsv /dev/sda [END] [START] 注意[END]是结束区块编号，[START]是开始区块编号。
一键扫描+屏蔽 工具e2fsck也支持硬盘坏道的扫描 + 屏蔽，命令如下
e2fsck -vc /dev/sda 参数释义：
v，显示结果 c，扫描坏道&amp;amp;屏蔽坏道 命令中可以有两个c，是因为archwiki的文章中提到，一个c是只有读测试，两个c是非破坏性的读&amp;amp;写测试(咦怎么让我想到了氧气姐，氧原子它是一个O&amp;hellip;)
所以上面这条命令就等于
badblocks -sv /dev/sda &amp;amp; e2fsck -l $ /dev/sda 参考文章 ArchWiki:badblocks Linux badblocks命令 badblocks命令 – 检查磁盘装置中损坏的区块 linux修复磁盘坏道(本教程完全来自实例、实测，具体参数请根据个人情况修改) </description>
    </item>
    
    <item>
      <title>贝壳云P1刷机Armbian小白教程</title>
      <link>https://ruohai.wang/202404/beikeyun-install-armbian/</link>
      <pubDate>Thu, 18 Apr 2024 15:17:01 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/beikeyun-install-armbian/</guid>
      <description>前言 最近又双叒叕从海鲜市场入手了一个，嗷，不是一个，是入手了两个矿渣，型号是贝壳云p1，价格是两个打包120rmb。😂
它长这个样子。
正面
背面
在网上搜刷机资料的时候，发现这机器在2020年左右已经是非常热门的矿渣，因为它给了四个usb3.0 + 千兆网口，这配置在一众捡垃圾设备里完全是鹤立鸡群的存在，所以早早的就有大佬给他适配了各种固件。
设备到手依然是先刷机，这里做个简单记录。
准备工作 贝壳云p1刷机比我之前玩过的矿渣都更复杂一些，它除了需要拆机短接，还需要从主板上的usb焊盘上引出一个usb接口，要不然没法刷机。所以完整的刷机工具如下：
硬件
家用电烙铁（没有的话可以用胶布临时应急） 一根剪线的usb线缆 镊子或者回形针（用来短接） 软件
贝壳云p1的bootloader rockchip驱动程序DriverAssistant rockchip开发工具AndroidTools armbian固件，ophub/amlogic-s9xxx-armbian项目已经适配了贝壳云，可以到项目主页根据型号下载，【项目地址】 软件工具打包在文章末尾有下载连接
刷机 第一步：拆机
先抠掉背面的三个橡胶脚垫
然后卸掉三颗螺丝
然后用撬片或者手指甲解开上盖的卡扣，这里注意上盖扣的比较紧，注意巧劲
上盖可以拿起以后不要太用力，led灯的排线要解开
主板上还有一颗螺丝卸掉
到这里整个主板就可以取下来惹。
第二步：接usb线
贝壳云刷机首先要接出主板焊盘上的usb线，所以最好准备一个家用电烙铁，可以减少很多麻烦。但如果你和我一样没有家用电烙铁，但又着急想立刻刷机，那可以试试用，emmm，胶布和手。
首先要准备一根剪线的usb，里面四根线芯，黑白红绿。其中红线是usb的5v供电线。我因为是没有电烙铁而是用胶布粘的，怕供电不稳影响刷机，所以这里剪掉了红线，改用充电头dc供电。
然后根据黑-绿-白-红的线序用电烙铁焊到四个焊点上（没有电烙铁可以用胶布贴住）
第三步：安装软件
安装驱动
启动AndroidTool软件，在boot一栏中，选择rk3328_loader_v1.14.249.bin文件，在system一栏中，选择自己下载的armbian镜像文件。
第四步：开始刷机
如果usb红色线芯焊上了，操作步骤：短接——usb插电脑
如果usb红色线芯没焊，操作步骤：usb插电脑——短接——插电
短接点见图
如果你和我一样用胶布应急方案，那需要注意：
从此时开始全程需要用手按住这几根线芯，因为胶布固定不够稳定，很容易接触不良导致电脑无法识别 如果电脑提示无法正确识别usb设备或者不支持的usb设备，那说明usb线芯接触不良（尤其是白色线芯） 此时软件上会显示发现一个maskrom设备
点击【高级功能】，点击【进入maskrom】。
之后软件会显示设备重启然后红字连接失败之类，不用在意，回到【下载镜像】，点击【执行】，右侧会显示开始刷机进度。
等最后显示【下载完成】，整个刷机过程就结束惹，重新通电开机，就进入armbian系统。
软件下载 百度网盘下载连接：https://pan.baidu.com/s/1DGoQPH7VZK4YMlWw6uFQbA
提取码：gzyh</description>
    </item>
    
    <item>
      <title>私家云二代/比特米盒/CumeBox2刷机Armbian教程</title>
      <link>https://ruohai.wang/202404/cumebox2-install-armbian/</link>
      <pubDate>Mon, 15 Apr 2024 19:42:52 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/cumebox2-install-armbian/</guid>
      <description>前言 又从海鲜市场花了48rmb入手了一个矿渣盒子，或者叫轻nas盒子，名称很多，私家云二代、比特米盒、cumebox2，其实就是同一个产品，就像玩客云也被叫做赚钱宝三代。
这盒子扩展接口非常丰富，有两个a口usb2.0，一个typec，一个sd卡槽，一个hdmi，一个百兆网口，然后盒子里面还有两个2.5寸sata硬盘仓。
千万不要奢望这盒子的usb口/typec口/sata口能有高速率，都是usb2.0啦。而且网口也是百兆，就算是给usb3和sata3也是只就跑满百兆带宽10MB/s左右而已。
这个盒子都说是照抄的国外一个叫做khadas-vim1的硬件，所以khadas-vim1的armbian固件可以直接拿来用，不过khadas的固件没有适配液晶屏和散热风扇，wifi、蓝牙什么的我还没测，不清楚有没有适配。
就不多吐槽了，简单记录下这玩意怎么刷机吧。
准备工作 这个机器大概是因为可玩性太差，没有大佬给它适配一键线刷固件，所以整个刷机过程比较曲折，需要准备的软件工具比较多。
软件
amlogic usb burning bools 切换卡载系统V1.0.apk atv6.img Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img 最新的khadas-vim1-armbian镜像，下载地址：【Khadas VIM1】 我用的是当下最新的版本，Armbian_24.2.1_Khadas-vim1_bookworm_current_6.6.16_minimal.img。
打包好的软件工具在文章末尾有下载连接。
硬件
镊子（用来短接） typc数据线一根（用来线刷） 两个u盘（sd卡也可以） 开始刷机 update@2024/07/06 简单来讲，这个盒子的刷机的步骤拆解是： 1-先给盒子线刷一个android tv固件 2-通电开机进入android tv，用文件管理器安装一个apk用来支持U盘引导 3-重启开机后进入U盘上的armbian系统 4-用dd命令把khadas-vim1的固件img写入emmc 另外，固件除了armbian官方的khadas-vim1，也可以用ophub-armbian项目的s905x的固件 ophub-armbian项目的s905x固件，默认是优先u盘引导 khadas-vim1固件不支持u盘引导，想要重新刷机必须从头开始刷android tv固件
这机器因的刷机过程分成三个阶段：
第一阶段：制作引导u盘
准备【第一个u盘】，用rufus之类软件刷入Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img这个镜像。 u盘镜像写好以后，用disk genuis或者其它支持的软件访问u盘上的文件，修改boot目录下的uEnv.ini文件，修改其中内容，将dtb/meson-gxl-s905x-khadas-vim.dtb改成dtb/meson-gxl-s905x-p212.dtb，保存退出 好了，引导u盘道这里制作完成，下文称之为【第一个u盘】。
第二阶段：准备卡刷apk和系统镜像
准备【第二个u盘】，文件系统最好是fat32，我不清楚atv6这个安卓电视系统能不能识别ntfs/exfat这俩格式。 把切换卡载系统V1.0.apk和armbian官方下载的Armbian_24.2.1_Khadas-vim1_bookworm_current_6.6.16_minimal.img镜像文件复制到u盘里。 好了，第二个u盘制作完成，下文称之为【第二个u盘】。
第三阶段：开始刷机
用镊子短接触点后，用amlogic usb burning tools线刷atv6安卓电视系统。注意事项：进入电视系统以后需要遥控器进行操作，如果没有遥控器，可以插鼠标。 短接点所在位置
短接点
盒子通电开机，进入atv安卓电视系统。 把第二个u盘插到机器上，然后在电视系统的文件浏览器中找到切换卡载系统V1.0.apk文件，点击安装。 如果你和我一样是插鼠标操作，记得安装完apk以后不要点done，因为鼠标没法返回上一级，请点击open，会出现弹窗让选择老司机还是新司机，到这个界面后暂停操作。 拔掉第二个u盘，插上第一个u盘，然后点击上一步的弹窗，选择新司机 出现弹窗申请root权限，选择永久授权。盒子会自动重启，进入u盘上的ubuntu系统 在路由器管理后台中找到盒子的ip，名称应该是aml，然后ssh连上去，账户root，密码1234，连上以后进行简单的初始化配置 再插上第二个u盘，把u盘挂载到系统 用dd命令把armbian的镜像文件写入到emmc。 dd if=/mnt/Armbian_24.2.1_Khadas-vim1_bookworm_current_6.6.16_minimal.img of=/dev/mmcblk1 dd命令执行完成后，拔掉全部u盘，拔电重启，就进入armbian系统惹。 刷机软件下载 百度网盘：https://pan.baidu.com/s/1mOk0h1zT2oJSoGlFcfYmZA 提取码：5mk0</description>
    </item>
    
    <item>
      <title>Cloudflare Tunnels服务增强可用性和容错率</title>
      <link>https://ruohai.wang/202404/cloudflared-enhance-availability-and-failover/</link>
      <pubDate>Fri, 05 Apr 2024 22:30:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202404/cloudflared-enhance-availability-and-failover/</guid>
      <description>前言 cloudflare公司提供了tunnels服务可以实现内网穿透，而且非常良心的免费版本就已经足够用来对外弄个小网站。
但是免费的服务总是有代价，比如不保证稳定性。我就经常看到自己的tunnels服务显示DEGRADE甚至DOWN，但半分钟左右又会很快恢复到HEALTHY，我只能理解为cloudflare官方需要不定期重置链接来保证服务可用吧（😅
因为我有三个服务挂在tunnel上，所以有了花钱保稳定的想法。到官网查了下价格，emm，🤔
英文版的对比不太看得出来付费版本的优势，所以我找了官网中文的付费套餐对比。
可以看到7刀/月的订阅计划中包含了100%正常运行时间SLA。
$7/mo，换算成人民币的话50rmb/mo，一年就是600rmb，啧，我不禁倒吸一口冷气。这个费用，我还不如直接买国外的vps，或者买阿里云的99rmb/y的ecs然后用frp做内网穿透。
被价格吓退以后，顺便看了官网的tunnels服务的手册，想不到有专门一节提到【Tunnel availability and failover】，讲如何提到tunnels服务的可用性和容错率。
英文阅读无障碍的话，可以直接看官网。我这里只做简单的转译和操作记录。
方案 手册里提到的提高可用性的方案有两种，方案一免费，就是堆cloudflared实例，方案二收费，用官方提供的负载平衡（load balanecer)服务。
方案一：创建多个cloudflared副本
一个tunnle可以对应多个cloudflared实例，所以只需要多装几个cloudflared就行了。
那想要多装几个cloudflared，有俩方案，如果只有一个主机（host），可以用docker部署多个容器，如果有多个主机，那每个主机上都安装一遍cloudflared即可。
多个cloudflared实例之间调用的优先级，官方的策略是：优先选择地理位置最近的实例，如果无法获取地理位置或者请求失败，再尝试另一个实例。
这个方案的好处是：免费。我用的是这个方案，一个tunnel跑了三个cloudflared实例来保证可用性。😂
方案二：负载均衡
这个方案付费，最少2个源服务器，保底$5/mo，前50w次查询免费，超过这个数量额外收费。
具体的配置方法直接看官网手册吧，我没用这方案，所以无法给出步骤。</description>
    </item>
    
    <item>
      <title>在Debian上安装&amp;配置MiniDLNA</title>
      <link>https://ruohai.wang/202403/minidlna-config-on-onecloud/</link>
      <pubDate>Sat, 30 Mar 2024 06:02:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202403/minidlna-config-on-onecloud/</guid>
      <description>前言 在看海纳思官方页面的一些功能介绍的时候发现了minidlna。之前我都是直接用的samba，对dlna协议还真没试过，这次正好了解下。
实际在配置的过程中碰到了一些问题，比如扫描不到媒体目录下的文件，花了一些时间debug，这里做一些记录。
安装 &amp;amp; 配置 我用来装minidlna的机器是玩客云，刷的是armbian系统。所以下文中的内容都以debian/apt为例。
第一步：安装
安装的话很简单，apt一把梭
apt install minidlna 需要注意minidlna服务需要安装的包会比较多，大概占用100~300MB的存储空间。玩客云的内置存储空间不多，请合理规划。
第二步：配置
先列一下minidlna的三个配置文件：
/etc/minidlna.conf 这个配置文件针对systemd /etc/defalut/minidlna 这个配置文件针对sysv init /lib/systemd/system/minidlna.service 这个是针对systemd的服务配置文件 玩客云armbian用的是systemd，所以第二个配置文件可以忽略。
再说一下要改的配置，以下各配置项修改后需要重启minidlna后生效。
首先编辑/etc/minidlna.conf文件，其中以下配置项请根据自己的需求进行调整
media_dir=/var/lib/minidlna，这个指向用来存放媒体文件的目录。 db_dir=/var/cache/minidlna，这个目录用来保存minidlna扫描文件后的数据，根据自己需求调整。 port=8200，默认端口号，根据自己需求调整。如果有安装ufw或者firewalld，记得放行端口。 friendly_name=hostname: username，minidlna服务在其它设备上看到的名字，可以自行调整 然后编辑/lib/systemd/system/minidlna.service文件
User=minidlna，这个指定运行minidlna的用户 Group=minidlna，这个指定运行minidlna的组 如果你的系统都用的root账户，那改成root即可，可以减少很多权限的问题。如果你用的是非root用户，可以在这里修改。
最后，如果用的非root账户、非minidlna账户运行minidlna、用的默认的db目录，那还需要注意修改minidlna db目录的所属用户。
minidlna默认保存数据的目录是/var/cache/minidlna，归属用户&amp;amp;组的信息是minidlna:minidlna。如果我们指定了其它的非root账户，就需要重新指定这个目录的归属，假定是jack。
chown -R jack:jack /var/cache/minidlna 完成以上的全部配置以后，后记得重载systemd配置 &amp;amp; 重启minidlna服务
systemctl daemon-reload systemctl restart minidlna.service 可选配置项：增加minidlna的文件监控数量
如果你关注minidlna服务的运行日志，应该会看到log中一直出现的一个警告信息
monitor.c:222: warn: WARNING: Inotify max_user_watches [8638] is low or close to the number of used watches [2] and I do not have permission to increase this limit.</description>
    </item>
    
    <item>
      <title>PhotoPrism社区版解析照片地理位置（Geocoding）接口请求超时</title>
      <link>https://ruohai.wang/202403/photoprism-geocoding-api-limit/</link>
      <pubDate>Thu, 28 Mar 2024 22:56:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202403/photoprism-geocoding-api-limit/</guid>
      <description>在自建相册应用的选择上我一直用的photoprism，社区版免费而且功能已经能满足我的需求，更重要的是官方还在维护基于arm32/v7版本的镜像，这就意味着我可以把它安装在玩客云上（前提是关掉所有需要tensorflow图像识别算法的功能）。
之前我使用photoprism的时候，偶尔用docker-compose logs -f，或者在web端的资料库-日志中查看日志时，会看到获取照片地理位置的接口报错，提示请求超时，最后导致照片无法获取详细的地理位置信息。
我一直以为是网络原因（被gfw干扰之类）所以接口不稳定，也试过给photoprism挂全局代理，但似乎并没有什么卵用。
直到今天，我偶尔从web端的版本比较入口跳转到官网
仔细查看了社区版与订阅版的区别，发现了其中一条
社区版的geocoding接口是有请求频率限制的！！！
这个接口的用途就是根据照片中保存的gps经纬度信息，转译成自然语言的地理信息。
它被限制请求频率，意味着在导入照片数量比较大的时候，照片的地理位置无法转译。具体的免费请求次数、频率在官网没有查到。
对这个功能有强烈需求的话，可以考虑花钱订阅photoprism，最便宜的€2/mo就解除限制惹。
😂</description>
    </item>
    
    <item>
      <title>海南五天四夜环岛自驾游记录</title>
      <link>https://ruohai.wang/202403/road-trip-in-hainan/</link>
      <pubDate>Sat, 23 Mar 2024 14:05:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202403/road-trip-in-hainan/</guid>
      <description>前言 和苏小胖认识快满俩月了，他是研究生在读临近毕业已经忙完了毕业论文而且不着急找工作，我是无业赋闲（躺平摆烂）每天无所事事，所以俩人一合计，出门玩一趟吧。
小胖最开始选的地点是婺源篁岭，这不是马上开油菜花了嘛。我对于去哪儿没啥要求，只要能出门就行。但规划婺源行程的时候，发现那地方到油菜花季节的时候，酒店价格贵的要死。小胖是个追求性价比的省钱小能手，我的经济情况也不允许我住太贵的酒店。所以婺源篁岭，pass！❌
最后经过小胖一番筛选，确定了去海南。现在是海南旅游的淡季，去海南的机票很便宜（出海南就有点贵啦），而且酒店也很便宜。小胖说他之前去过两次海南，依然觉得海南值得再去一趟。
一开始是计划跟团游的，网上找一些散客团，报价普遍在800~1200rmb左右，加上往返机票，总开支大概2500rmb。但因为是淡季，散客团拼团一直不顺利，所以我们改成了租车环岛自驾，查了岛上的租车费用，5天的费用大概900rmb，再加上充电/加油，总开销的预算大概在4000rmb。
确定了自驾游的方案以后，我们就开始做行程计划然后出发惹。
行程 这是出发前我们大致排的行程（图中加了删除线的景点后来都没去）
可以看到餐饮、住宿、门票的预算都给的很低，最后总体开销控制在4100rmb。当然，实际开销肯定会有出入，具体就丰俭由人，大家可以根据自己的钱包来定。
关于租车 关于租车有挺多可以说道的，😄
海南租车，相信大品牌就选神州、一嗨，想要性价比可以从携程、飞猪上找。但无论在哪个平台租车，切记一定一定要买车行的保险，可以免去99%的车损纠纷，而且免去了发生轻微剐蹭的赔偿。 如果车行的保险不包含三者险，请根据自己的钱包和车技水平，选择是不是要购买三者险，我的建议是请一定买三者险。 海南环岛高速都是双车道，东线上路况一般而且车很多，经常会碰到占道维护的情况。景区停车往往非常拥挤，很容易出现剐蹭，有三者险能减少很多麻烦事。 租车首选电车，电车用电成本很低，充电桩的电价大概0.9~1.4rmb/kwh，我们实际跑完全程以后，每公里成本大概0.21rmb。岛上充电桩的覆盖率也不错，虽然我们在几次充电过程中碰到了几个小问题，但总体的体验还是挺棒的。 租油车也可以，但用车成本会比电车高不少。海南高速免费，但高速费都折算进油价里了，油价比大陆贵1rmb左右。而且相同租车价格下，可选的油车在加速性能、静谧性、车内空间、倒车影响、辅助驾驶功能上，完全没法和电车相比。 还有一点很有意思，海南很多停车场对电车也有优惠，比如南海文化旅游景区，电车4块钱，油车8块钱。这实在是让人难以理解，同样是停车，为什么电车能半价。 我们租车选的最便宜的电车，红旗e-qm5，同样租车价格下的油车可选的是日产轩逸。红旗这车网上都喷它是垃圾，但我们用它跑完全程以后，感受就是：日产轩逸给红旗e-qm5提鞋都不配。 租车行的红旗e-qm5都是吉林牌照，这车定位是b级车，厂家推出这车型就是准备卖给网约车公司和租车公司的，上市价19w，吉林那边补贴、优惠以后落地9w块，所以很多租车公司在吉林提车再拉到海南作租赁。 我们租的红旗e-qm5是一年新车，但后备箱液压杆已经出现了支撑杆球头脱出的问题，品控不太行。😂 建议 &amp;amp; 注意事项 石梅湾、日月湾、万美湾、清水湾等其它湾，选择一个即可，都是沙滩 + 水上项目，各个湾之间同质化严重，没必要都去。 神州半岛去灯塔的路上也有很多沙滩，也又水上项目，如果时间紧，上面那些湾都不用去，在神州半岛逛沙滩就行了。 自驾环岛，海口去三亚建议走东线，如果最后要返回海口，建议走中线，中线路况更好而且车很少。 沙滩服一般成交价35rmb，比这贵没必要买。而且本地人不穿沙滩服，穿这个走在景点很容易被当作待宰的羔羊，注意避坑。不过沙滩服穿着是挺凉快的。 清补凉价格10~15rmb，就是椰汁打底，加一堆果切，还有红枣干、葡萄干、补丁之类。 抱罗粉就是海南米粉，只是拌的料不一样。 椰子价格，金椰10块3个，青椰12块3个。本地人都说青椰更好喝。金椰的味道有点像加水稀释过的青皮甘蔗汁。 青果槟榔不要轻易尝试。 呀诺达热带雨林，和槟榔谷、蜈支洲岛一样的高消费景区，门票进去以后所有项目都要另外花钱。 关于景点 在安排行程的时候，我们排了很多景点上去，但实际很多景点我们都跳过了，这中间一部分原因是时间确实来不及，更多的原因是很多景点实在是槽点太多。根据时间顺序最后简单记录。
巴厘村
门票45rmb，停车5rmb/h。点评：⭐
就一个山寨巴厘岛的小村子，早些年是归侨的聚居地。
这村子最大的景就是那个和巴厘岛“天堂之门”一模一样的门。村子不大也不小，大概半小时就逛完了，一些南洋风格的建筑，很多购物点。门票包含了一次免费照相（有套路）一次免费试喝。
免费照相的套路，就是在进门以后给你拍个照，然后打印出来一个6寸免费照片和一个8寸收费照片。其中6寸免费的那个，照片只占了相纸1/4的面积，其它地方都印着宣传语。8寸那个是打印好的，但想拿走的话，不好意思，25rmb。
免费试喝，因为景区里有椰子粉和咖啡粉的购物点，可以进店免费蹭吃蹭喝，店家会给一个非常mini的小杯子给你一份椰汁一份咖啡，还有一小份薄饼。
停车场有4~5个充电车位，是快充枪，费用1.4rmb/kwh。
石梅湾
免费，停车5rmb/h。点评：⭐⭐⭐
是个沙滩，沙子很软，海水很漂亮，但没有什么可以拍照的点。
要玩的开心就是花钱玩水上项目，摩托艇、香蕉船、海上拖伞、直升机、潜水，收费从几百到几千不等，淡季的时候可以试试砍价，比如摩托艇，一开始报价260rmb，小胖子最后砍到180rmb，俩人在海上兜了一个来回，还是挺刺激的。
神州半岛灯塔
免费，停车有俩地方，一个是小区停车场，2rmb/次，一个是景区停车场，20rmb/次。点评：⭐⭐
神州半岛的景就是一个灯塔，从停车场到灯塔还有3公里的路，要么租电瓶车，两轮电瓶车20rmb/2h，三轮电瓶车50rmb/2h。景区也有观光车，10rmb，但不清楚是单程还是往返。
去灯塔的路上都是沙滩，免费开放，也都标配大量的水上项目，还弄了很多漂亮的拍照打卡点。
至于那个网红灯塔，就一个拍照打卡的地方，对拍照没兴趣的话可以吹吹海风。
后海村
免费，停车4rmb/天。点评：⭐⭐⭐
后海村，紧挨着蜈支洲岛的景区大门，而且有免费开放的后海湾可以玩水。可以选择在后海住一晚。
后海街是一条步行街，所有来到蜈支洲岛和后海湾玩水的游客都会逛这条街，所以人流密集度可想而知，淡季的时候都是摩肩接踵，旺季的话完全无法想象。
整条街上就是标配的各种各样的烧烤摊摊、小商品摊、小吃摊，烟雾缭绕、酒吧，还有当地特色的冲浪店，乌央乌央，属于那种每一个旅游城市都标配的网红步行街。
后海真正值得玩的，还是在后海湾冲浪。在后海街上多问一些冲浪店，打听一下价格，也可以上一些团购网站看看点评和口碑。别当冤大头选什么1v1、1v2，就选1v4或者1v多的，因为冲浪教练的任务很简单，就两个，第一是在岸上简单的教你如何使用冲浪板，第二是下水以后帮你推板子起一个加速的作用。除非你天赋异禀立刻就能学会然后去劈大海浪🌊，要不然99%的游客就是上板、落水、继续上板、继续落水，教练推几次以后就可以和另外几个游客一起互相推板玩。
玩冲浪最好自备泳衣泳裤，虽然冲浪店都会提供，但自备的话干净卫生而且款式也好看。
如果你玩冲浪的重点是拍照，🤔，emmm，拍照可能是另外收费的项目，记得提前和教练谈好价钱。
蜈支洲岛
门票 + 往返船票144rmb，环岛观光车138rmb，这俩是必选项目，建议买套票。停车4rmb/天。点评：⭐⭐
蜈支洲岛是个雷，大雷还是小雷取决于你愿意花多少钱玩水上项目。从开始登岛那一刻开始，你的钱包就开始流血啦。观光车必选，因为岛上的前半段就不允许徒步环岛，所以登岛 + 观光车就是260rmb。
然后上岛为了干啥，当然是为了玩啊，岛上能玩的都是水上项目，就是标配的那些潜水、冲浪、海上拖伞、摩托艇等等各种你能想得到的水上项目，收费从几百到几千不等，请根据自己的经济情况选择。
如果对水上项目没啥兴趣（比如已经在其它地方玩过了），或者不想花钱，那就坐上观光车环岛随便逛逛吧，有5个停靠点，可以下车溜达一下然后拍照打卡。😄
第一市场</description>
    </item>
    
    <item>
      <title>黑豹X2（Panther X2）刷入Armbian系统</title>
      <link>https://ruohai.wang/202403/panther-x2-flash-armbian/</link>
      <pubDate>Tue, 12 Mar 2024 18:20:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202403/panther-x2-flash-armbian/</guid>
      <description>前言 前段时间逛海鲜市场的时候留意到一个矿渣盒子，黑豹x2，又是一个类似迅雷赚钱宝这样的挖矿项目已经gg的定制硬件盒子，目前海鲜市场的价格大概在135rmb左右。去年的时候好像价格只要70rmb，现在价格差不多已经翻一倍了。😂
硬件配置是rockchip 3566 + 4gb内存 + 32gb 内置emmc闪存 + tf卡扩展 + 千兆网口 + usb2.0接口，没有视频输出接口，原封包装的话自带一张64GB闪迪tf卡，12v/2a的dc供电。
这个硬件配置，cpu性能在一众盒子里算比较顶，内存和闪存给的都比较充裕，而且支持tf卡扩展，aarch64/arm64架构，在很长一段时间里都不用担心性能瓶颈，更不用担心像玩客云的arm32/armv7l架构缺少第三方应用支持。不过鸡肋的地方也很多，比如usb接口只是2.0而且只给了一个，没有hdmi/dp没法当电视盒子用，只有单个网口不能当软路由。
ophub的项目amlogic-s9xxx-armbian中已经有这个盒子的armbian固件，本文中提到的armbian固件都从这个项目中下载。
卡刷 黑豹x2刷机有两种方法，第一种是卡刷，这种方法比较简单而且不需要特殊工具。
第一步：u盘/tf卡引导
用rufus把armbian固件写入tf卡或者u盘，然后插到机器上后通电，等待半分钟后可以在路由器后台看到新增armbian设备的ip，然后ssh连上设备。
如果不需要把系统写入emmc，到这一步就可以直接使用了，也就是把u盘/tf卡作为存储介质。
第二步：固件写入内置emmc
这个操作和amlogic芯片的电视盒子有区别，无法直接用armbian-install来完成了。
在上一步tf/u盘中的系统成功启动以后，需要用dd命令直接将armbian固件（eg：Armbian_24.5.0_xxx.img）写入到内置的emmc上。写入完成后，关机拔掉tf卡/u盘，再通电开机，就进入emmc上的armbian系统惹。
dd if=Armbian_24.5.0_xxx.img of=/dev/mmcblk1 bs=1M status=progress 线刷 线刷需要准备：
双公头usb线 rockchip驱动程序DriverAssitant rockchip开发工具RKDevTool rk356x的bootloader文件 刷机工具包下载地址在文章最后。
第一步：电脑安装驱动
第二步：选择固件
启动RKDevTool软件，在boot一栏中，选择rk356x-MiniLoaderAll.bin文件，在system一栏中，选择自己下载的armbian镜像文件。
第三步：开始刷机
设备不要通电。用卡针长按盒子的reset，然后连接双公头usb线，电脑会有叮咚提示音，在瑞芯微开发工具中会显示发现一个LOADER设备。 点击【高级功能——进入maskrom】让设备重启。 点击【下载镜像——执行】开始刷机。 提示下载完成即为刷机完成，可以拔掉双公头usb线缆，然后通电开机。 参考文章 PantherX2(黑豹X2)刷机。注：本文中有5张图片都引用自这篇博客，因为我刷机的时候没有截图，事后也懒得重刷补图。这里感谢 rupu.net 的辛苦制图。 百元矿渣Panther X2（黑豹 X2）：小白折腾日记1 资源包 百度网盘：【Panther-X2-刷机工具.7z】 提取码: 7e4a</description>
    </item>
    
    <item>
      <title>ttyd使用Nginx实现HTTP基本认证（HTTP Basic Authentication）</title>
      <link>https://ruohai.wang/202402/ttyd-config-auth-proxy-with-nginx/</link>
      <pubDate>Wed, 28 Feb 2024 20:47:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/ttyd-config-auth-proxy-with-nginx/</guid>
      <description>前言 之前写过一篇在玩客云上安装ttyd的博客，文章指路：【在玩客云上安装ttyd】。
ttyd默认的认证方法是在启动命令中使用-c参数来设置用户名和密码，举例如下
ttyd -c jacky:123456 bash 这样确实很方便啊，但是有一个问题，就是使用htop查看进程时，会发现ttyd的进程是明文的，也就是进程会显示
ttyd -c jacky:123456 bash 🤔，不管这个系统是独自使用还是多人共用，这种完全暴露用户名和密码的方式实在是让人身心不安。
那有没有其它认证的方法，比如把用户和密码信息保存在文件中，ttyd启动命令从文件中读取用户信息。
查了项目github主页的issues，很多年前就有开发者提交了这个功能的代码，但都被作者关闭、驳回了。
既然ttyd的开发者如此固执的拒绝合并这个功能的代码，那就看下怎么通过他所说的Auth Proxy来实现。
配置 首先贴上ttyd项目wiki中提供的配置手册：【Auth Proxy】
第一步：ttyd启动命令调整
ttyd的启动命令，从之前的
ttyd -c jacky:123456 bash 调整为
ttyd -i /tmp/ttyd.sock -H X-WEBAUTH-USER bash 调整后完整版的ttyd.service配置如下
[Unit] Description=TTYD After=syslog.target After=network.target [Service] User=[user] ExecStart=/opt/ttyd/ttyd.armhf -p 12345 -i /tmp/ttyd.sock -H X-WEBAUTH-USER -W bash Type=simple Restart=always [Install] WantedBy=multi-user.target 第二步：nginx配置
先安装nginx这个不多说了。根据wiki中给出的nginx配置，完整版本如下，注意调整监听的端口号。
server { listen 12345; server_name ttyd; location / { auth_basic &amp;#34;ttyd&amp;#34;; auth_basic_user_file &amp;#34;/etc/nginx/htpasswd/ttyd&amp;#34;; proxy_set_header X-WEBAUTH-USER $remote_user; proxy_set_header Authorization &amp;#34;&amp;#34;; proxy_http_version 1.</description>
    </item>
    
    <item>
      <title>世钧我们回不去了</title>
      <link>https://ruohai.wang/202402/restaurant-fuwan/</link>
      <pubDate>Mon, 26 Feb 2024 22:08:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/restaurant-fuwan/</guid>
      <description>今天8点多从外面回来，有点肚子饿，查了下很喜欢的一家卤肉饭馆营业到晚上9点半，正好驱车过去，点了一份这家店的招牌卤肉饭，另外点了一份炸猪排，大快朵颐。
店里很安静，不是饭点，也不是夜宵店，所以人不多，门头、装修风格、桌椅布置，还有这份炸猪排，不由得想起了日剧孤独美食家，想起一切往事。
想去看看🐱方枪枪和🐱马小军了。
吃完以后开车到了熟悉的地方，很巧，灯亮着，说明有人。上楼敲门，见到了熟悉的人。
我说自己来看猫的，没其它事。
🐱马小军还是很活泼，依然是个掉毛怪。
🐱方枪枪也是老样子，抱起来它就会生气，身上又是脏脏的臭臭的，一点不愿意配合，所以没照片。
临走，
他问你不是来看我的吗，我说不是。
他问你现在住哪里，我说没必要讲。
他问你是不是有新对象了，我说没有。
他问你不说住哪里那怎么去找你，我说你要是真的想找我，不会等到今天才问。
这一刻觉得自己的心又冷又硬。</description>
    </item>
    
    <item>
      <title>电影《热辣滚烫》的一些观后感</title>
      <link>https://ruohai.wang/202402/movie-yolo-comment/</link>
      <pubDate>Mon, 26 Feb 2024 14:14:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/movie-yolo-comment/</guid>
      <description>这个春节档电影四强，截至目前我就看了俩，先看的张艺谋的《第二十条》，昨天又看了贾玲的《热辣滚烫》。
贾玲这电影，10分制，我给6.5~7分。
是个完成度还不错的电影，但相比李焕英，这部明显在叙事节奏的把握上要差一点，前面“丧”的部分太长了，完全可以加快节奏，后面开始练习打拳的部分用几分钟快速镜头就交代完了，应该可以加几个中间节点来阶段性的呈现一些成果。
整部片子最别扭的地方就是作为主角的贾玲，为了塑造女主的委曲求全、讨好型人格、丧的形象，在整部电影里都压这嗓子细声细气的说话，这种说话方式很别扭，真的很别扭，她说着难受，我听着更难受。
人物的反转太生硬。雷佳音的渣男，杨紫的利用，前期完全没有铺垫。可以理解这俩人物的大反转设定是为了让女主跳楼那场戏的情绪爆发更激烈，更能让观众共情，但呈现出来的结果就是这俩人物的反转显得非常生硬。
张小斐的形象演不了尖酸刻薄的人，而且上一部电影李焕英的光环太强了，演一个婚内出轨、自私自利、尖酸刻薄的人有点儿出戏。
人物动机和经济来源。作为翻拍电影，能看出来做了大量本土化，但这电影的核心，为什么要去健身馆（因为喜欢打拳的教练）、为什么要练习打拳（因为被众叛亲离所以想赢一次）、经济来源是啥（前期当服务员预支工资 + 后期回家里的超市帮忙 + 健身馆老板好心让她拖欠课时费），这些点都有点儿牵强。但是，作为一部电影，艺术表达肯定不是完全符合现实细节的，可以理解。
电影中雷佳音去工地当工人以后，到超市买的冰红茶，这点非常符合现实。康师傅冰红茶（大瓶装的那种），非常便宜，糖含量超高，冰镇以后口感也很棒，在工地上非常受欢迎，就是工地农民工版本的维他柠檬茶。这点非常还原现实非常细节。</description>
    </item>
    
    <item>
      <title>从0自建Memos服务教程</title>
      <link>https://ruohai.wang/202402/memos-self-hosting-guide/</link>
      <pubDate>Fri, 23 Feb 2024 14:28:43 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/memos-self-hosting-guide/</guid>
      <description>前言 之前已经写过一篇博客，【在玩客云上用Docker部署memos】。
但几个月过去，memos进行了大量的更新，托管的docker镜像也从ghcr.io转移到了docker hub，而且经过这段时间的安利，有好几个朋友有兴趣玩memos，想自己部署一个。
所以重新记录一下部署memos的过程，这次不针对玩客云，所有硬件通用。
当然，如果你有基础的英文阅读能力，也有基础的linux操作经验，可以直接看【memos官网的操作手册】
准备 一个装了linux的vps，或者是电脑、电视盒子甚至其它电子垃圾 linux发行版最好选debian，因为我喜欢用debian，😄 因为要拖docker镜像，国内的网络环境你懂的，注意配置好docker镜像加速 部署 第一步：安装docker环境
ssh连上debian安装docker。个人建议使用docker-compose方式部署，因为这种方式会有一个配置文件，方便编辑和管理。
sudo apt install docker.io docker-compose 第二步：配置docker镜像加速器（没需求可以跳过）
国内特殊的网络环境，如果不配置docker镜像加速，在拉取镜像的时候那叫一个折磨人。目前的docker国内镜像源，我测过很多，不管是网易云、百度云、上海交大，在拉取memos镜像时都没有效果，最后还是得用阿里云的镜像加速服务。
阿里云的docker镜像加速没有公共的地址，而是针对不同的用户有唯一的地址，所以需要登录自己的阿里云查看。
获取到自己的阿里云镜像加速其地址以后，进入/etc/docker/目录看下是不是有daemon.json文件，没有的话新建一个
sudo touch /etc/docker/daemon.json 然后用nano或者vim编辑daemon.json
sudo nano daemon.json 往文档中添加如下内容
{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://&amp;lt;你的加速器地址&amp;gt;.mirror.aliyuncs.com&amp;#34;] } 最后重启docker即可
sudo systemctl restart docker.service 重启以后，可以执行以下命令确认变更是否生效
sudo docker info 显示结果如图
第三步：编辑memos配置文件
通过docker-compose方式部署memos，需要提前准备一个docker-compose.yml的配置文件，里面设定安装目录、重启方式、端口号、运行用户等几个细节。
首先在debian系统中找一个自己喜欢的目录，新建文件
touch docker-compose.yml 然后用nano或者vim编辑
nano docker-compose.yml 最后往文件中粘贴以下内容
version: &amp;#34;3.0&amp;#34; services: memos: image: neosmemo/memos:stable container_name: memos user: 1000:1000 restart: always volumes: - ~/.memos/:/var/opt/memos ports: - 5230:5230 配置文件的简单释疑：</description>
    </item>
    
    <item>
      <title>电影《第二十条》的一些观后感</title>
      <link>https://ruohai.wang/202402/movie-article-20-comment/</link>
      <pubDate>Thu, 22 Feb 2024 12:27:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/movie-article-20-comment/</guid>
      <description>10分制，我给7~7.5。
现在国内已经几乎没有这种现实题材的影视作品了，上一部可能还是《我不是药神》，这点上，《第二十条》就值得一看。
电影中有好几场马丽和雷佳音这对夫妻的吵架戏，太多了，影响观感。可以理解作为一个春节档电影，如果只是严肃的讨论正当防卫的法律条文，太严肃了，不适合春节氛围，所以需要加入这么一对欢喜冤家来增加笑点，而且吵架也塑造了马丽的角色冲动、嘴快的性格以推进剧情，但确实是吵架戏太多了，看的头疼。如果是已婚中年男人看到这么逼真的吵架戏可能这种糟糕的感受会比我更强烈。
因为国内的影视作品隐形之中都有一个宣传正能量的责任，所以这部主题是宪法、主角是检察官、配角是公安和学校的电影，它就注定了会出现大量教条式、口号式的空洞台词，比如强调宪法的权威性、要相信政府、要相信公平正义、要相信法制。
电影最后雷佳音的大段慷慨激昂的发言，我在看的时候觉得就是审查之下的必然，影视作品需要让观众宣泄情绪，需要让正义战胜邪恶，需要让观众认识到政府维护了公平和正义。这就像曹保平导演的犯罪类电影，无论中间如何暗黑、血腥，但最后必须是天降神兵来惩治罪恶维护正义。
在国内，政府部门和宪法的权威性、正当性是不容置喙的，但这部电影，虽然表面上看着是在维护公平正义，替正当防卫的人洗刷冤屈，但实际上是把宪法第二十条关于正当防卫判定的争议性摆到台面来让观众们思考和讨论，这已经说明了现实中存在大量的已经被判定为故意伤人的见义勇为案例，已经说明了现有的法律让好人出手的代价更大。从某种角度来说，这已经在挑衅我国政府、我国宪法、我国检察院的权威性。这点上，国师张艺谋值得一个👍。
最后谈谈这电影里的演员。大家都说这电影就是2023年热门电视剧演员的一次团建，《漫长的季节》和《狂飙》里的大量熟悉面孔。不过最亮眼的还是赵丽颖，她饰演的聋哑人真的一点儿不出戏，表现出来的就是一个真的聋哑人。她的上一部让我有印象的电影还是韩寒的《乘风破浪》。
期待国师张艺谋能再接再厉，把南京彭宇案搬上银幕。
不过有一点电影里还是拍的保守了，张译演的是一个高中的教务处（或者教导处，记不清了）主任，只是一个学校的职位而已，而他的对手是谁，当地检察院的检察官，检察官的老婆的哥是公安局局长，放在现实里，这教导处主任敢惹对方吗？</description>
    </item>
    
    <item>
      <title>创维电视盒子E900V22D刷入Armbian系统</title>
      <link>https://ruohai.wang/202402/e900v22d-install-armbian-to-emmc/</link>
      <pubDate>Tue, 20 Feb 2024 13:00:45 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/e900v22d-install-armbian-to-emmc/</guid>
      <description>前言 我手上现有的垃圾盒子都是arm32/v7l的cpu架构（迅雷赚钱宝一代/二代/三代），虽然debian12甚至下一个debian13依然会继续支持arm32，但很多我使用的软件和docker镜像已经不再支持arm32/v7的硬件了。
所以从闲鱼入手了一个电视盒子，型号是创维E900V22D，拆机确认芯片型号的S905L-3，aarch64架构，2GB内存 + 8GB emmc存储，百兆网口，2个usb2.0接口。
这机器入手价格是40rmb（加上邮费），一开始觉得性价比高，因为E900V22D按理是s905l-3a/3b的芯片，但我拆机以后发现是s905l-3，编号少了一个a和b，性能也差一大截。实际这个芯片的盒子价格应该在25rmb（不含邮费）左右，对应的热门盒子型号是cm211-1。所以我一不小心被割了韭菜，怒亏10rmb。
在海鲜市场淘电视盒子的时候，除了挑机器型号之外，一定要问清楚cpu芯片。因为电视盒子全国不同地区、不同厂家，可能同一个型号的机器会出现硬件配置不同的情况。高价买到低配还不是最麻烦的，最麻烦的是，因为相同型号但不同硬件的电视盒子，很可能设备树dtb就不一样，那对应的刷机固件、刷机方法也会不一样，比如我淘的这个E900V22D。
因为我的盒子型号和cpu芯片与ophub的amlogic-s9xxx-armbian项目中现有的支持设备也对应不上，所以刷机过程中也碰到了一点儿小问题，不过最后还是完美刷入了armbian。
这里做个刷机步骤的简单记录，方便以后回溯。
拆机 拆机这一步主要是为了确认芯片型号，避免同型不同芯。
首先卸掉背壳的三颗螺丝，然后用撬片插入撬孔就可以掀开真个背壳。
确认了芯片型号是s905l-3。
固件 在amlogic-s9xxx-armbian项目主页，根据自己的芯片型号，确定使用amlogic_s905l3.img这版固件。
然后在release页面，根据自己的喜好下载对应版本的armbian。我一直用的debian bookworm版。
在固件列表里选择自己喜欢的内核版本，注意选择s905l3的固件。
下载固件以后，使用软件（比如rufus）把固件烧录到u盘即可。
刷机 需要的设备
使用s905l-3芯片的创维E900V22D，刷机不需要短接，只需要用到遥控器，如果手头没有原装的遥控器，可以使用支持红外的手机（比如小米）的万能遥控app来控制。如果确实没有遥控器，不要紧张，还有方法的，可以通过短接线刷安卓tv底包 + adb工具来刷机，这个等下文【踩坑】部分有记录。
刷机的方法
刷好固件的u盘插在离电源近的usb接口，先按住遥控器的右方向键（网上的教程都说是一秒钟按三次右键）然后通电，盒子就会自动从u盘引导，此时如果hdmi接口连接了显示器，显示的是如下图的花屏。
无需紧张。耐心等待一段时间之后，就可以在路由器的控制台看到多了一个名字是armbian的设备，此时就可以根据ip地址通过ssh连上盒子了。
假定ip地址是192.168.1.5，连接方式：打开ssh终端（Windows上可以直接用系统自带的cmd），输入ssh root@192.168.1.5然后回车即可。默认账户root，默认密码1234。
将armbian刷入内置的emmc存储
从u盘引导系统成功以后，此时的armbian系统是跑在u盘上的，需要将系统写入到电视盒子内置的emmc存储。
输入命令
armbian-install 接下去比较重要的选项是选择设备列表
选择设备列表，重点其实是选择对应的设备树dtb文件来驱动硬件。根据ophub在【这个issuse】下的回复，选择120、122、123都可以，因为这仨编号对应的dtb文件都是一样的。
到此整个给电视盒子刷armbian的流程就结束了，你已经拥有了一个超低功耗、arm64机构、2GB内存、8GB存储、2个usb2.0接口、1一个百兆网口的超级小巧的linux服务器惹，赶紧用它来搞一些有意思的自建服务吧。
踩坑 在第一次给这个设备刷机的时候，整个过程和上面的流程记录的一样，完成的非常顺利，按遥控器右键 —— 进入u盘系统 —— 写入emmc。但在写这篇博客的时候，我想重刷一遍armbian，结果碰到了大量的坑，耗费了大量的时间去排查。在这里做简单记录。
踩坑1：已经刷入了armbian，二刷时无法从u盘引导
因为刷入armbian以后，已经不支持通过按遥控器右方向键来选择u盘引导，这个时候就要想其它办法。
看下ophub给出的【手册的12.4.2条】。
如果以上两种办法都走不通的情况下，比如不会优先从usb引导、无法登录当前armbian系统、忘记了root账号密码、获取不到root权限，要怎么处理。
这种情况其实已经说这台设备变砖了，必须要通过短接来救活，在【这个issue】下有人给出了解决方法。
但是，但是啊，不要高兴的太早了，这里接下去还有坑，因为我就碰到了刷入这个安卓tv的底包以后，能开机也能进入安卓电视系统，但是无论我怎么按遥控器右键都无法实现u盘引导，这就是第二个大坑。
踩坑2：已经通过短接刷入了安卓tv底包，但按遥控器右方向键无法实现u盘引导
这种情况下就需要通过adb工具来实现u盘引导。
查看ophub提供的【手册的12.4.1条】。
电视盒子通电，进入安卓tv系统以后，在路由器控制台获取ip地址，假定192.168.1.5，输入以下命令：
adb connect 192.168.1.5 adb shell reboot update 此时盒子会重启并从u盘引导，就可以成功的刷入armbian惹。
但是！不要开心的太早了！接下去依然有坑，这就是第三个大坑。
踩坑3：用户权限异常/sudo命令提示文件归属权异常/su切换root用户提示密码错误
踩过了上述的所有坑、耗费了大量时间和精力以后，我终于看上去成功的给这个盒子刷入了armbian，似乎已经大功告成了，但很快又一盆冷水泼面而来。
具体问题如下：
从普通用户用su命令切换到root用户时，虽然输入了正确的root密码，但一直提示认证失败。同样的密码，可以正常以root用户连接ssh，说明密码是正确的。
在普通用户身份下，使用sudo命令，提示sudo: /etc/sudo.conf is owned by uid 1023, should be 0，大致如下图</description>
    </item>
    
    <item>
      <title> ERROR: unable to bind listening socket for address &#39;/run/php/php8.2-fpm.sock&#39;: No such file or directory (2)问题处理</title>
      <link>https://ruohai.wang/202402/easyimage-down-solution/</link>
      <pubDate>Tue, 06 Feb 2024 12:25:17 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/easyimage-down-solution/</guid>
      <description>昨天重启了一下我的linux小盒子，今天发现我的php网站easyimage服务gg了，无法访问。
排错过程 第一步：查看nginx错误日志
首先访问网站地址，显示502 bad gateway。那就先看下nginx的错误日志。
[crit] 8919#8919: *20 connect() to unix:/run/php/php8.2-fpm.sock failed (2: No such file or directory) while connecting to upstream, client: 192.168.1.*, server: easyimage, request: &amp;#34;GET /index.php HTTP/1.1&amp;#34;, upstream: &amp;#34;fastcgi://unix:/run/php/php8.2-fpm.sock:&amp;#34;, host: &amp;#34;192.168.1.*:*&amp;#34; 从这个错误日志可以判断错误原因是No such file or directory，找不到文件或路径。
但是我的linux小盒子，弄好php、php-fpm以后一直运行正常，没有增删过任何文件，只是重启了一下而已，为什么会报错呢。
第二步：查看php-fpm服务状态
根据nginx的日志，大致可以判定错误原因和php-fpm服务有关，那就看下这个服务的状态
systemctl status php8.2-fpm.service 结果如图
现在可以判定是php-fpm服务出问题了无法启动，导致无法转发php的请求。
第三步：php-fpm启动报错原因排查
既然是php-fpm服务出问题了，先重启试试，看是否有报错信息。
提示了查看详细错误信息的命令。
journalctl -xeu php8.2-fpm.service 错误日志很长啊，但核心的就箭头所指的一条。
虽然知道原因了，但不知道怎么解决，只能上网搜了。
最后在stackoverflow找到了解决方案：Unable to bind listening socket for address php-fpm
解决方案 在/run目录下新建一个php目录。
没错，就是在/run目录下新建一个php目录，也就是/run/php。
php-fpm启动以后需要这个/run/php/目录来存放运行文件。
至于为什么之前php跑的好好的没问题，也不需要自己来新建这个文件，而且没有变更过任何的配置、用户、权限，今天怎么就不行了？
🤔</description>
    </item>
    
    <item>
      <title>Tailscale出口节点（Exit Nodes）功能部署</title>
      <link>https://ruohai.wang/202402/tailscale-exit-nodes/</link>
      <pubDate>Tue, 06 Feb 2024 10:04:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202402/tailscale-exit-nodes/</guid>
      <description>前言 这段时间忙着照顾家人，因为老母亲又双叒叕因为主动脉夹层的原因做了第二次心脏手术，需要24小时陪护，所以我大部分时间呆在乡下，就有了乡下 &amp;amp; 杭州异地组网和通讯的需求。
上一篇文章记录了tailscale的子网路由（subnet routers）功能，我拿它作为跳板机，这样我只需要在一台设备上安装tailscale，就可以直接通过原来的 192.168.1.* 的内网ip地址直接访问局域网里的nas、玩客云、openwrt，甚至可以直接访问光猫的后台地址，不需要再每台机器装tailscale然后使用100开头的vpn网络IP地址来访问。
tailscale还有另一个功能：出口节点（exit nodes）。看了官方文档，作为中国人，我第一时间想到的应用场景，就是翻墙。😄
正好我好友jrr在澳洲，和他一起玩了一下这个exit nodes功能，自此我有了一个悉尼的网络出口，😄。
功能释疑 exit nodes的官方文档：Exit Nodes (route all traffic)
通俗来讲，就是在一个设备上安装tailscale，启用exit nodes功能。然后其它装了tailscale的机器，比如机器A，可以指定这台设备为出口（exit node）。之后机器A的所有网络流量都会由指定的出口节点进行路由转发。
官网的示意图。
部署 第一步：下载&amp;amp;安装tailscale
官方地址：Download
第二步：开启ip转发功能
这里以linux为例，因为我把tailscale装在linux小盒子上。
官方文档：Exit Nodes install
如果你的linux系统存在/etc/sysctl.d路径，执行以下命令
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf sudo sysctl -p /etc/sysctl.d/99-tailscale.conf 否则执行以下命令
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.</description>
    </item>
    
    <item>
      <title>ssh: connect to host github.com port 22: Connection timed out问题处理</title>
      <link>https://ruohai.wang/202401/github-connect-error/</link>
      <pubDate>Sun, 28 Jan 2024 22:52:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/github-connect-error/</guid>
      <description>今天准备push博客到github的时候发现push失败，错误提示内容如下
ssh: connect to host github.com port 22: Connection timed out 在中国上网，碰到国外网络服务无法连接的直觉就是网站被屏蔽了。😔
根据错误信息上网搜了搜，有个差不多情况的案例：
坑：ssh: connect to host github.com port 22: Connection refused
那就根据文章中的办法试试吧
在~\.ssh\config中指定github的端口号
Host github.com Hostname ssh.github.com Port 443 实测有效。</description>
    </item>
    
    <item>
      <title>Tailscale子网路由（Subnet routers）功能部署</title>
      <link>https://ruohai.wang/202401/tailscale-subnet-router/</link>
      <pubDate>Sun, 28 Jan 2024 21:03:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/tailscale-subnet-router/</guid>
      <description>前言 自己折腾nas或者linux小机器，都会碰到内网穿透的需求，tailscale就是其中一个非常方便、好用又免费的方案。
但我之前只是用它的最简单、基础的vpn组网功能，这两天偶尔看到别人分享它的子网路由（subnet routers）功能，发现非常契合我的使用场景，所以抓紧时间折腾了一遍，顺便做个记录。
子网路由 简单文字描述这个功能，约等于就是个跳板机：
局域网内有很多个服务器 这些机器在内网都用192.168.*.*ip进行访问 并不是每台机器都能装tailscale 在一台机器上部署tailscale，开启subnet routers，通过这台机器，在已经用tailscale组网的机器上，可以直接用192.168.*.*ip访问内网的机器 看上去还是比较拗口，那就直接看官网的图片解释吧
部署 先贴上官网的subnet routers的指导手册：Subnet routers and traffic relay nodes
然后我自己部署过程的步骤拆解：
第一步：安装tailscale
官网下载页面指路：https://tailscale.com/download
注意：到安装完成那一步即可，不需要启动。
第二步：开启ip转发
使用子网路由功能必须开启本机的ip转发。
这里以linux为例，这里直接照搬官网内容：
如果你的linux系统存在/etc/sysctl.d目录，使用如下命令：
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.d/99-tailscale.conf sudo sysctl -p /etc/sysctl.d/99-tailscale.conf 否则使用如下命令：
echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; | sudo tee -a /etc/sysctl.conf echo &amp;#39;net.ipv6.conf.all.forwarding = 1&amp;#39; | sudo tee -a /etc/sysctl.conf sudo sysctl -p /etc/sysctl.</description>
    </item>
    
    <item>
      <title>为什么我开始选择自建服务</title>
      <link>https://ruohai.wang/202401/why-i-choose-selfhosted-apps/</link>
      <pubDate>Wed, 10 Jan 2024 23:47:21 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/why-i-choose-selfhosted-apps/</guid>
      <description>twitter和memos 距离我的twitter账号被炸号，已经3个月了。时间过得好快啊。😄
我没有选择在twitter新建小号复活，也没有选择转向thread、mastodon、telegram channel、bluesky、微博等等其它平台。我转向了自建服务：memos。
memos是一个开源、轻量、方便、好用的笔记服务，github地址，官网地址。
我的memos服务跑在一个armbian小设备上，机器是海鲜市场上只要10块钱一个的矿渣，迅雷赚钱宝二代（ws1508）。硬件性能羸弱，cpu架构老旧，经过一番刷机以后，用一根u盘作为存储介质刷入armbian，功耗2w。😄
之前一直用【ipv6 + ddns + 域名】这套组合拳的模式来支持外网使用，最近弄了cloudflare tunnels，可以支持一些低频的网络访问。😄
不能指望memos能和twitter、thread、mastodon之类比，我只是把它当作一个单机版的twitter/微博在用。
它非常契合我的需求，但不一定满足你的需求：
安卓 app、ios app都有人开发了，网页也支持pwa。 我的更新动机是记录生活，虽然twitter被炸号了，但生活还是得继续。在自建小平台更新以后，完全没有了个人形象的包袱，可以更随心所欲的发内容。 频繁的sns账号被炸以后，对互联网大厂提供的网络服务没啥好感了。之前在twitter认识这么多朋友，是我的幸事。 贴一下我的memos使用频率，😄
不过，memos也不是那么完美，我在这不短不长的使用过程中就碰到好几个非常明显的bug，还好我自己码力尚存还能自己动手修bug，最后都搞定了。😄
自建服务 想起之个月之前，因为停止订阅google one，导致我的gmail因为15GB免费空间耗尽而无法使用，至此开始放弃google photos服务转移到自建nas。
我似乎已经慢慢开始从使用互联网大厂提供的网络服务，慢慢转向了自建服务。
回想一下这些年我的炸号经历：
instagram。第一个账号账号提示密码错误，选择重置密码但一直收不到邮件；第二个instagram账号突然被冻结，申请解冻需要拍摄一张自己手持签名的白纸的照片证明自己是真人账号，恍然间以为用的是草榴社区，所以放弃了解冻。 google photo。这个倒不是炸号，而是Google的photos、driver、gmail三者共享免费的15GB存储空间。当photos使用容量超限以后，会导致gmail无法收发邮件。我需要保证gmail可用，所以，虽然用了10多年的photos，上传了几万张照片，市面上也没有比photos更好用的相册服务，但不得不停用了photos，开始搞nas自建相册。 twitter，或者应该按照新名字叫X。用了15年、马上16年的账号突然被冻结，多次申诉无效，可以确定这张账号gg了。 </description>
    </item>
    
    <item>
      <title>用systemd实现存储设备的开机自动挂载</title>
      <link>https://ruohai.wang/202401/systemd-auto-mount-sdcard/</link>
      <pubDate>Tue, 09 Jan 2024 16:12:05 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/systemd-auto-mount-sdcard/</guid>
      <description>前言 想要在linux系统上实现开机自动挂载磁盘，有好几种实现方案。我之前用过自动的udevil，也用过直接编辑/etc/fstab。
但是这俩办法各自有点儿小缺陷：
udevil，首先这包很久没更新了，然后好像是挂载exfat有点儿bug，需要自动再配置文件中调整下exfat相关的参数，其次玩客云上的sd卡槽插入sd卡，开机后首次无法自动挂载，需要手动重新插拔一下sd卡才能正常工作。 fstab，这个方法简单方便有效，但换盘以后如果忘记改fstab的配置，很容易让系统启动以后因为文件系统错误导致gg，需要进入修复模式修改fstab才能正常启动。 最近在网上找了一些其它解决方案，最后决定用systemd来实现开机以后自动挂载存储设备。
实现 假定我要实现sd卡的开机自动挂载，sd卡上的存储分区是/dev/mmcblk0p1。
首先要确定sd卡的硬件挂载点，比如我准备把sd卡设备挂载到/mnt/sdcard目录下。
第一步：创建systemd的mount配置文件
systemd配置文件存放目录/etc/systemd/system，在次目录下新建配置文件。
sudo touch mnt-sdcard.mount 注意点：
文件名规则设定，mnt-sdcard由挂载路径/mnt/sdcard转化而来，斜杠‘/’要转换成短杠‘-’ 文件后缀名是.mount而不是.service 第二步：编辑配置信息
编辑mnt-sdcard.mount，录入以下内容：
[Unit] Description=sdcard auto mount After=network.target [Mount] What=/dev/mmcblk0p1 Where=/mnt/sdcard Type=ext4 Options=defaults [Install] WantedBy=multi-user.target 参数释疑：
What: 被挂载设备文件全路径 Where: 挂载点全路径 Type: 文件系统类型 Options: 挂载选项 第三步：启用
完成以上配置后，重新加载systemd配置然后启动即可。
systemctl daemon-reload systemctl start mnt-sdcard.mount systemctl enable mnt-sdcard.mount 注意事项 用systemd实现存储设备自动挂载的实现非常的简单好用，而且也不会轻易导致系统gg。
但是这个方案依然有它自己的小问题：如果外挂了多个存储设备，比如/dev/sda1、/dev/sdb1、/dev/sdc1，那系统重启的时候可能出现盘符名称不固定的问题，也就是A设备本次是/dev/sda1，下次重启以后可能会变成/dev/sdc1。这时候systemd的挂载脚本没法这么智能的去分辨哪个设备对应哪个配置，只会机械的按照配置去挂载，最后导致错误挂载然后文件错乱。
参考文章 systemd 之 开机自动挂载 Systemd 开机自动挂载硬盘 </description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署Cloudflare Tunnels实现内网穿透（一）</title>
      <link>https://ruohai.wang/202401/cloudflared-deploy-on-onecloud-1/</link>
      <pubDate>Sun, 07 Jan 2024 21:31:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202401/cloudflared-deploy-on-onecloud-1/</guid>
      <description>前言 朋友们，2024年新年快乐~ 🎉
之前我在迅雷赚钱宝、玩客云这些armv7l系统架构、即将被放弃支持的电子垃圾上部署网络服务，公网访问的解决方案是【廉价域名 + ddns + ipv6】，因为我当前使用的中国移动宽带支持ipv6 + 提供了公网ipv6地址。这个方案很好用也很方便，公网访问服务也能达到宽带的上行带宽上限，但这方案也不是没有遗憾的地方：
国内很多老旧路由器，甚至新出厂的路由器，都默认关闭了ipv6功能，导致无妨访问我的自建网络服务 国外很多运营商不支持ipv6，导致我的自建服务内容项分享给国外好友的时候无法访问 国内宽带运营商屏蔽80/443端口，导致想要访问我的自建网络服务必须在域名后面加端口号 动态ipv6公网地址在dns解析生效上有滞后，导致服务有时候中断 我的赚钱宝系列和玩客云系列，经常会出现多个未过期、未注销的ipv6公网地址，但只有最新分配的那个才是有效的，这种情况ddns-go默认无法处理，需要自己写脚本选择真实有效的那个ipv6地址。 后来接触到了tailscales、frp、ngrok、zerotier，意识到如果自己拥有一台vps，就可以实现不需要端口号直接访问内网的自建网络服务（当然国内特情下需要完成备案）。当时我的twitter账号还没有被炸，推友告诉我，有免费的cloudflare tunnels方案实现同样的功能。但我这人又懒又拖延症，直到这周，才打起精神开始学习部署。
自己成功部署了cloudflare tunnels以后，发现整个过程非常简单，官方的安装引导已经非常直白易懂。但实际操作过程中，对于一些不熟的步骤，我还是卡了好久，也趟了几个坑。所以做个简单记录。
准备 想要实现cloudflare tunnels（以下简称tunnels）做内网穿透，需要提前准备：
一个域名 一个cloudflare账号 一张信用卡 步骤 整个部署过程，大致分成几个步骤：
注册一个cf账号 新建tunnels服务 信用卡验证 选择免费方案 在自己的机器上安装cf客户端 将域名的dns解析托管给cf 在tunnels中配置公网域名转发 耐心等待配置生效 部署 这两天又中流感了，咳嗽流鼻涕发热，先写到这里。下次来补充细节。
等不及的可以看最后参考文章中的链接。
参考文章 少数派：CloudFlare Tunnel 免费内网穿透的简明教程 </description>
    </item>
    
    <item>
      <title>DDNS-GO使用命令获取最新IPv6公网地址</title>
      <link>https://ruohai.wang/202312/ddns-go-choose-the-last-ipv6/</link>
      <pubDate>Tue, 26 Dec 2023 20:20:10 +0800</pubDate>
      
      <guid>https://ruohai.wang/202312/ddns-go-choose-the-last-ipv6/</guid>
      <description>前言 我使用的linux小盒子是迅雷的赚钱宝系列，第一代（ws1408）、第二代（ws1508）、第三代（ws1608）都入手了好几个。
用的公网访问方案是ipv6 + ddns-go。
这个方案免费、好用、方便，而且非常稳定，只是有那么一点点小问题，每次碰到这个bug都需要人工介入处理。
因为这个小问题出现的概率很低，所以之前也一直没当回事，大不了这小概率事件真的发生的时候，手动调整一下，也花不了几分钟。
但是今天，我还是想找找解决方案。
问题 在ddns-go的issue搜到一个帖子，和我碰到的情况一模一样，指路：#872 希望ipv6地址获取可以根据valid_lft或preferred_lft排序选择
具体表现就是：
出现了2~3个公网ipv6地址 只有最新的那个ipv6地址才是有效的 旧的ipv6地址会一直保留直到它的valid_lft有效生命周期结束 参考图例：
原因分析 移动宽带定期（maybe不定期）pppoe重播，导致不断分配新的公网ipv6地址，但旧的公网ipv6地址并没有被主动弃用/注销，所以出现了多个公网ipv6地址共存、但只有最新的那个公网ipv6地址有效的情况。
解决方案 知道原因以后，找解决方案就很简单，只需要动态获取最新的那个公网ipv6地址即可。
ddns-go获取ipv6地址有三种方式：
根据接口 根据网卡 根据命令 第一个方式在出现多个公网ipv6地址的时候会gg，表现就是访问不到接口，导致无法获取ipv6地址。第二个方式只支持最简单的用@1@2@3来指定使用第1、2、3个ipv6地址，如果最多只出现2个ipv6地址的话可以用@2，但如果出现3个ipv6地址，就搞不定了。
所以只有第三个方式了，用命令在动态选择最新的那个ip6v地址。
查看了多个issue以后，还是刚刚提到的这个帖子：#872 希望ipv6地址获取可以根据valid_lft或preferred_lft排序选择，有人提供了自己写的命令。
ip addr show|grep -v deprecated|grep -A1 &amp;#39;inet6 [^f:]&amp;#39;|grep -v ^--|sed -nr &amp;#39;:a;N;s#^ +inet6 ([a-f0-9:]+)/.+? scope global .*? valid_lft ([0-9]+sec) .*#\2 \1#p;Ta&amp;#39;|sort -nr|head -n1|cut -d&amp;#39; &amp;#39; -f2 感谢这位网友提供的命令，实测有效。
参考文章 希望ipv6地址获取可以根据valid_lft或preferred_lft排序选择 #872 通过命令获取IP参考 #531 通过网卡获得ipv6怎么编写正则表达式获得不是第一个的ipv6 #341 通过命令获取IP参考 </description>
    </item>
    
    <item>
      <title>土法解决Memos的SQLite3 WAL模式下丢失数据问题</title>
      <link>https://ruohai.wang/202312/memos-turn-off-wal-log/</link>
      <pubDate>Mon, 25 Dec 2023 00:31:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202312/memos-turn-off-wal-log/</guid>
      <description>前言 自从我的twitter账号被冻结以后，就自建了memos用来发一些日常琐碎的记录。
不得不说memos还挺好用的，轻量级，docker一键部署，全终端覆盖，多平台适配，自己一个人发发牢骚很好用。
但在使用的过程中也碰到过一两次bug，小bug自己解决一下就算了，没当回事。
但这次碰到一个大bug，直接导致丢失了半天的数据。
痛定思痛，找了一个土法解决方案，这里做简单记录。
问题 memos默认使用sqlite3数据库，默认开启wal模式。wal模式，write-ahead logging，可以简单理解为缓存数据库，就是写入、编辑的数据并不是实时写入db，而是缓存在db-wal文件中。当db-wal中缓存的数据记录条数达到指定数量时，触发check-point，再写入db。
我碰到的问题：
存储介质（一根2gb的u盘）出现了disk i/o error db-wal中有一部分数据还没有写入db memos出现报错无法使用，直接重启memos服务后db-wal缓存的记录全部丢失 因为过了几个小时才到家开始处理这个bug，设定的每小时rsync备份的那版db-wal数据也没了 解决方案 最佳的解决方案，那肯定是换掉那根出现disk i/o error的u盘，把memos部署到一个安全的存储介质上。
或者禁用wal
PRAGMA journal_mode = OFF; 或者调小wal_checkpoint的记录数
PRAGMA wal_autocheckpoint = 100; 以上两个方法我都试过，但实测重启memos以后，sqlite配置会被重置。
最后直接上粗暴土法：
重启memos会把db-wal数据写入db，设定一个crontab定时任务，每隔4小时重启memos，实现每隔4小时把缓存数据写入db的auto-check-point。 0 */4 * * * docker restart memos </description>
    </item>
    
    <item>
      <title>升腾C92破解(刷写)BIOS</title>
      <link>https://ruohai.wang/202312/centerm-c92-update-bios/</link>
      <pubDate>Tue, 19 Dec 2023 16:24:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202312/centerm-c92-update-bios/</guid>
      <description>前言 最近又从海鲜市场入手了一个小盒子，升腾c92，cpu是j1900，2+8的内存/硬盘，不带电源130rmb。
现在闲鱼上130这个价格一般是j1800的版本，j1900的价格已经上探到180左右。没办法，j1900太热门了，虽然早已经有接班的j4125、n100，但目前还是溢价严重。
我收到的这个c92还是原版bios，默认不支持u盘启动，所以要改造一下。
注意：本文图片只支持ipv6，如果你的网络不支持ipv6的话图片会无法显示。
简单列一下升腾c92的硬件配置：
供电是dc口，5521规格，12v/3a 只有一个msata硬盘接口 只有一个内存插槽，支持笔记本ddr3内存条 usb2.0接口5个 usb3.0接口1个 千兆rj45网口1个 dp口1个，dvi口1个 音频输入口1个，音频输出口1个 cpu有两个版本，2c2t的j1800，还有4c4t的j1900，注意区分，这俩cpu性能差了50% 吐槽 首先不得不吐槽国内玩电子垃圾的氛围，都喜欢搞论坛、qq群把资源私有化，动辄就是邀请制、收费下载、加密提取码。这种模式下，资源很容易失效，非常不利于资源的累积和分享，对新人小白也非常的不友好。一个电子垃圾一旦过了热度期，想再折腾想找资源就变得很难。
刷BIOS c92的bios刷机主要参考这个视频：刷BIOS，装第三方系统，升腾C92瘦客户机折腾记。
但视频这种形式我不喜欢，需要反复拖动进度条来查看有用的那点儿信息，所以做了简单整理。
第一步：下载bios升级文件
up提供了c92的bios升级文件，指路：升腾C92Bios升级文件
他把文件托管在迅雷云盘，需要装迅雷以后才能下载，或者用油猴脚本提取下载链接，自己想办法吧。
下载以后解压，里面3个压缩包
解压c92和fpt这俩压缩包，得到3个文件，这仨文件就是最终需要用到的。
第二步：准备u盘
需要一个u盘，格式化成fat32格式。将上一步解压得到的三个文件，复制到u盘根目录。
目录结构如下：
----- |-- c92_txe1.1_lastucodevbios.bin |-- fparts.txt |-- fpt.efi 第三步：刷新bios
u盘插上c92，开机，按f2进入bios界面。
选择save &amp;amp; exit标签，选择launch efi shell from filesystem device。然后会进入shell界面。
在shell界面敲map，会列出所有存储设备，查看u盘的设备号，一般是fs0。
敲fs0:后回车，进入u盘目录。
进入u盘目录后，可以敲ls查看文件列表，确认当前是在正确的目录。
先备份原始bios，敲命令fpt -d backup.bin，等进度条跑完就完成了原始bios备份。
刷新bios，敲命令fpt -f c92然后按tab自动补全文件名，回车，等进度条跑完即完成bios刷新。
输入命令exit退出shell
到这里就完成了bios刷新。此时可以看下是否回到bios界面，如果不是，可以直接断电重启，或者按开机键重启。
第四步：格式化硬盘
这一步需要一个刷了pe系统的u盘，pe系统u盘的制作这里不赘述，pe用wepe即可，指路：微PE工具箱。
c92开机，按f2进入bios，在boot标签页，在boot option priorities中调整开机启动项，把option #1改成pe系统u盘，然后按f10保存退出。
开机进入wepe，启动disk genius，选择c92的硬盘，右键选择删除所有分区，然后保存更改。
好了，这一步完成后，原硬盘格式化完成，选择关机即可。
到此，c92已经变成一个支持u盘引导的普通x86_64小盒子，可以随意刷入第三方系统。插入引导u盘以后，记得在bios的boot标签中调整启动项。
勘误 刷新bios参考的这个视频：刷BIOS，装第三方系统，升腾C92瘦客户机折腾记，其中提到在更新bios以后，需要调整advanced —— csm configuration中的一些参数。实测不需要，而且改了以后容易出bug，比如legacy引导但用了uefi固件之类导致系统无法引导之类。所以个人建议不要动这里的参数。</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）可用OpenWrt固件分享</title>
      <link>https://ruohai.wang/202312/ws1408-find-a-new-openwrt-firmware/</link>
      <pubDate>Mon, 18 Dec 2023 23:08:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202312/ws1408-find-a-new-openwrt-firmware/</guid>
      <description>今天在bing搜索里随便敲了俩关键字，本意是看下有啥linux小盒子上还能装的好用、可用的服务。当然，我知道有个热门的github仓库叫做Awesome-Selfhosted都是优秀的自建服务，但它里面我几乎都用不上啊，还是要根据自己的实际情况要选择需要的服务。
谁知bing搜索还真有了一个小惊喜，搜到了迅雷赚钱宝一代（ws1408）可用的纯净版本的openwrt18/19两版固件，还是来自恩山论坛，帖子指路：
2021年了, 大家还记得迅雷赚钱宝吗? 记一次OpenWrt软件安装 赚钱宝1代2代3代openwrt官网固件线刷包 一共两个可用的版本，分别是openwrt18和openwrt19，俩都是openwrt官网版本，原滋原味，没有装任何插件，没有装任何主题，又openwrt官方源可以直接更新 &amp;amp; 安装软件。
之前在论坛里已经有一版openwrt，版本比较新，帖子指路：【更新直刷包2023.03.27 赚钱宝1代WS1408 旁路由openwrt 22.03.3 内存卡或者U盘启动】。我最初用的也是这版，因为那会只搜到了这版。这般的好处是版本比较新，内核也新，缺点是70MB的存储空间可用只有10MB多一点，而且软件源需要自己改，当时我折腾了一阵以后就没再弄，只当作samba服务器用。</description>
    </item>
    
    <item>
      <title>在玩客云上安装简单图床（EasyImage）</title>
      <link>https://ruohai.wang/202311/easyimage-install-guide/</link>
      <pubDate>Mon, 27 Nov 2023 23:34:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/easyimage-install-guide/</guid>
      <description>前言 前几天在玩客云上用docker方式部署了兰空图床（lsky pro），挺好用的，虽然也折腾了很久。
这没隔几天又折腾easyimage，并不是我闲的蛋疼，有几个原因：
玩客云硬件孱弱，能跑lsky pro，但跑起来以后web端响应有点慢吞吞的 lsky pro太重了，我只需要最基础的图床服务 安全，图床服务会暴露域名，虽然已经做了简单的安防，但服务分离还是更保险一些 正好前两天看到有人分享一个简单的图床服务，easyimage，看了下项目页面和demo，我觉得🉑，研究了2天，这里做个简单记录。
准备 部署easyimage有两种方式，【官方github仓库】提供了php源码，第三方提供了【docker镜像】。
想方便简单可以用docker部署，一条命令/一个配置文件就搞定，快速上手。
原本我也是用docker把easyimage部署在玩客云上，但后来想把图床服务分离出来，部署到赚钱宝二代（ws1508）上，用tf卡当存储。但实际部署过程中碰到了bug，赚钱宝二代这个设备，安装docker以后docker一直会报错，所以不得不更换策略，研究怎么跑php项目。
部署成功以后，回头看过程，其实非常非常简单。但我php零经验，过程中踩坑无数，心累。
这次需要提前准备的内容如下：
一个debian/armbian设备 一些基础的debian的操作知识 部署 这次教程内容从简，不再事无巨细的什么都写了，只写核心内容。
第一步：安装软件
跑php项目的环境准备
apt install nginx php php-fpm php-gd 第二步：下载代码
创建网站目录、下载代码、解压，都是基本操作，此处略过不表。
两点有关权限的要注意，官方也指明了：
网站根目录755权限 网站根目录分配用户，官方要求www:www，完全胡扯！debian下nginx的用户是www-data:www-data 第三步：配置nginx
话不多说，直接编辑nginx配置文件
nano /etc/nginx/sites-available/default 录入以下内容
server { listen 80; listen [::]:80; server_name easyimage; root /mnt/data/easyimage; location ~ \.php$ { fastcgi_pass unix:/run/php/php8.2-fpm.sock; include fastcgi.conf; } location / { index index.php; } } 有几个注意事项：
server_name，随便填，有域名填域名，没域名填ip，随便填都行 root，指定网站根目录，很明显我的网站目录是/mnt/data/easyimage，请根据自己实际情况调整 fastcgi_pass，这里要注意，网上很多乱七八糟的教程都填的127.0.0.1:9000也不讲清楚为什么，都他妈傻x。fastcgi_pass有四种配置，详细配置项可以查看配置文件/etc/php/8.2/fpm/pool.d/www.conf中的listen一项。要注意nginx配置文件中和这里保持同步，不同步的话fastcgi无法监听到nginx转发的请求。 fastcgi的/etc/php/8.2/fpm/pool.d/www.conf的说明如下：
; The address on which to accept FastCGI requests.</description>
    </item>
    
    <item>
      <title>在玩客云上安装File Browser</title>
      <link>https://ruohai.wang/202311/filebrowser-install-guide/</link>
      <pubDate>Sun, 26 Nov 2023 11:41:26 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/filebrowser-install-guide/</guid>
      <description>前言 file browser是一个非常轻量的web端文件管理服务，适合只需要简单文件访问和管理需求的用户。
在玩客云（或者说debian linux）上安装file browser，几个月之前【已经写过一篇]】。但最近重新开始折腾玩客云的时候，发现filebrowser官方不断的更新版本，文档中的安装指导也更新了，只保留一键脚本安装、docker安装，但就是没保留手动编辑配置文件的安装指导。
虽然一键脚本安装或者docker安装确实方便了很多，但我还是喜欢之前的手动编辑配置文件的安装方式，这里做简单记录。旧的【那篇文章】依然可用，但修修补补的也麻烦，索性重新写一篇。
安装 第一步：下载软件包
先在本地创建目录
sudo mkdir -p /opt/filebrowser ; cd $_ 然后根据自己的硬件架构到【github release页面】下载对应的软件包，这里还是以玩客云为例，下载armv7版本
sudo wget https://github.com/filebrowser/filebrowser/releases/download/v2.26.0/linux-armv7-filebrowser.tar.gz 解压
sudo tar -zxvf linux-armv7-filebrowser.tar.gz 第二步：创建配置文件
在file browser的目录下，开始创建软件需要的配置文件，一共有4个文件。
首先是filebrowser.db，这个文件是file browser的数据库，保存运行过程中配置信息。
sudo touch filebrowser.db 其次是filebrowser.log，这个文件是file browser的日志文件。
sudo touch filebrowser.log 然后是config.json，file browser的基础配置文件，用来指定运行的端口、访问目录、数据库文件、log文件。
sudo nano config.json 录入以下内容
{ &amp;#34;port&amp;#34;: 8600, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/opt/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/opt/filebrowser/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 最后是filebrowser.service，是systemd的配置文件，用来把filebrowser添加到系统服务。注意User=[User]一栏，如果file browser是以root账户运行，这一栏可以删除。如果以non-root用户运行，需要同步调整filebrowser.db和filebrowser.log的用户权限。
sudo touch filebrowser.service 录入以下内容
[Unit] Description=The filebrowser Process Manager After=network.</description>
    </item>
    
    <item>
      <title>使用PicGo配合兰空图床（Lsky Pro）进行图片上传</title>
      <link>https://ruohai.wang/202311/lsky-pro-use-picgo-to-upload/</link>
      <pubDate>Tue, 21 Nov 2023 14:41:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/lsky-pro-use-picgo-to-upload/</guid>
      <description>前言 在玩客云上部署lsky pro，虽然能用，但网页响应有点慢，而且上传图片都需要打开web页面更是有点麻烦，所以需要一个工具来配合lsky pro使用。
它就是picgo。
picgo的配置已经做到了尽量傻瓜化，lsky pro的api设置也非常的简单，但两件简单的事情组合到一起，就是出了不少的状况。
所以简单记录下配置过程。
注意事项：
本文的图片链接都是ipv6 only，如果你的网络只支持ipv4的话会看不到图片 配置 第一步：安装picgo
【picgo下载页面】，根据自己的网络情况和硬件平台，到对应的下载源下载安装即可。
第二部：安装lsky插件
picgo安装完成后，启动！
默认不支持lsky图床，需要安装插件，安装插件需要node.js。🤔
所以先装node.js，可以自己去官网下，也可以直接点安装插件，它会带你跳转到nojde.js下载页面。
装好node.js以后，再次启动picgo！在插件页面搜索lsky
我装的是第二个插件lsky-uploader 1.1.0，你可以根据自己喜好选择。
不着急配置插件，要先第三步。
第三步：安装浏览器插件
在lsky后台的接口页面，查看获取token的方法。如果没有接口，需要先在设置中开启。
根据文档，就是要自己发起一个http post请求来获取token，行吧。
有俩方法，第一自己手写一个简单的html表单来提交post请求，第二通过第三方工具。
这里选择用浏览器插件，打开chrome或者edge的应用商店，搜postman。个人建议安装data~more，界面简洁，方便好用。
安装插件以后，终于可以开始获取token惹。😭
第四步：获取token
在浏览器中打开插件，根据lsky文档，配置参数。
首先在复制一下lsky的api
然后插件中把api复制进去，请求方式选择post，在headers页面，填写Accept:application/json
在params页面，填写自己lsky的账户和密码（email和password）
以上内容都填写完以后，在顶部可以看到拼接出来的完整url
最后点击右侧的submit，顺利的话就可以看到返回token惹，把双引号里的内容都复制，下一步要用。前面的数字正常应该是1，截图里是5因为我测试了好几次。😭
第五步：配置插件
终于来到最后一步了，第一次写这么多配图的文章。
需要先处理上一步获取的token，它还不是完全体，需要加一个前缀Bearer，完整格式示意如下
Bearer 1|uc4xxxxT9Okxxxxxxxwp6ykixxxxxxx6V8k 然后打开picgo，在图床设置中选择lsky，填写内容。
域名就是lsky的域名，不需要带api后缀。token就是处理后的Bearer开头的那串字符。点击确定即可。
到这里，picgo和lsky插件终于配置完了，可以正常使用了。
🤦‍
后记 不得不说，这个获取token和需要加Bearer前缀的方式让我掉进坑里好多次。
心累。
不过配置好以后再贴图就很方便了，要不然我也不会写这篇这么多配图的文章。
🎉</description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署兰空图床（Lsky Pro）</title>
      <link>https://ruohai.wang/202311/lsky-pro-install-on-onecloud/</link>
      <pubDate>Tue, 21 Nov 2023 12:19:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/lsky-pro-install-on-onecloud/</guid>
      <description>前言 硬件性能：
能跑，但反应会稍微有点慢 存储空间：
用docker-compose部署，docker.io + docker-compose大概需要300MB空间 lsksy-pro需要434MB存储，mysql需要230MB存储 合计大概需要1GB的存储空间。玩客云内置emmc可用存储大概6GB，请提前规划存储占用 注意事项：
文章里的图片都ipv6 only，如果你的网络只支持ipv4，会看不到图片 部署 第一步：安装docker环境
这一步没啥好说的，两条命令。
apt install docker.io apt install dockere-compose 我倾向于使用debian软件仓库里的docker，所以apt一把梭。
因为docker hub被封，记得配置docker国内镜像
nano /etc/docker/daemon.json 录入以下内容：
{ &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://registry.hub.docker.com&amp;#34;, &amp;#34;http://hub-mirror.c.163.com&amp;#34;, &amp;#34;https://mirror.baidubce.com&amp;#34;, &amp;#34;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;#34;, &amp;#34;https://docker.nju.edu.cn&amp;#34; ], &amp;#34;iptables&amp;#34;: false } 保存后退出，然后重启docker。
systemctl restart docker.service 其中的&amp;quot;iptables&amp;quot;: false是禁止docker调整iptables，因为我用的ufw管理防火墙。请根据自己的情况保留或者删除这条。
第二步：编辑docker配置文件 &amp;amp; 部署
注意：lsky pro官方没有发布docker镜像，所以docker安装只能找第三方。因为玩客云过时的硬件（armv7），这里选用【tyroyal/lsky-pro-x】发布的版本。
首先新建目录，创建配置文件。玩客云内置emmc存储空间非常金贵，所以请把lsky pro的目录指向外部存储空间。
# 创建目录 mkdir lsky-pro # 进目录 cd lsky-pro # 编辑配置文件 # nano docker-compose.yml 在配置文件中录入以下内容。
version: &amp;#39;3&amp;#39; services: lsky-pro: image: tyroyal/lsky-pro-x:latest restart: unless-stopped hostname: lsky-pro container_name: lsky-pro volumes: - /path/to/lsky:/var/www/html/ ports: - &amp;#34;8008:80&amp;#34; networks: - lsky-net mysql-lsky: # arm 架构请自行更换 mysql 镜像使用 image: mysql:5.</description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署PhotoPrism</title>
      <link>https://ruohai.wang/202311/photoprism-install-on-onecloud/</link>
      <pubDate>Tue, 21 Nov 2023 08:49:04 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/photoprism-install-on-onecloud/</guid>
      <description>前言 硬件性能：
photoprism官方明确要求部署pp服务的最低硬件要求是4核 + 4GB内存，玩客云的cpu性能孱弱而且内存也仅仅只有1GB 能跑起来的前提是禁用全部的图像算法识别功能 如果你需要的是一个全功能的photoprism，那这个方案不适合你，更不适合玩客云 实测部署成功以后，photoprism能跑，网页端访问流畅，导入100+张图片未出现oom。适合轻负载使用 实测转码一张mi10s拍摄的2400万像素的heif/heic格式的照片到jpg需要7秒钟，纯cpu编解码 转码视频，mi10s拍摄的1080p@60fps h265视频30秒，转码成720p avc视频，大概需要2分半，纯cpu编解码 存储空间：
docker.io + docker-compose大概占用300MB存储 photoprism + mariadb镜像大概占用1.6GB存储 合计大概占用2GB空间，玩客云内置emmc可用空间大概是6GB，能装下，但需要提前考虑存储空间的占用 部署 &amp;amp; 优化 第一步：安装docker环境
直接用debian仓库里的docker.io
apt install docker.io 使用docker-compose方式部署
apt install dockere-compose 因为docker hub国内被屏蔽，记得配置docker国内镜像
第二步：配置文件调整
先创建目录吧。玩客云内置存储空间比较珍贵，pp的运行目录记得放在外置存储。
# 创建目录，记得把pp运行目录指向外置硬盘 mkdir photoprism ; cd $_ # 下载官方的配置文件 wget https://dl.photoprism.app/docker/armv7/docker-compose.yml 官方提供的配置文件，除了常规的密码、运行目录之类，还有以下几个项目要修改
PHOTOPRISM_DEFAULT_TLS: &amp;quot;false&amp;quot;，这个选项是pp程序初次部署时生成一个自签名的https/tls证书，没卵用，而且在玩客云上部署时会耗费大量时间以生成证书，建议禁用 PHOTOPRISM_DISABLE_CHOWN: &amp;quot;true&amp;quot;，这个选项是pp每次启动的时候调整storage目录的权限，如果图库文件数量很大，会导致每次pp启动都非常非常耗时，建议禁用 PHOTOPRISM_DISABLE_WEBDAV: &amp;quot;true&amp;quot;，禁用webdav服务。webdav服务用来分享照片的，用不上，禁用。也可以在webui里禁用。 PHOTOPRISM_DISABLE_TENSORFLOW: &amp;quot;true&amp;quot;，禁用tensorflow。图像算法识别功能，吃硬件性能，玩客云上跑pp必须禁用掉。务必在配置文件中直接禁用，要不然启动pp都很难。 user: &amp;quot;1000:1000&amp;quot;，有权限洁癖的用户需要这个，自己加一行参数，指定photoprism以non-root用户运行。如果加了这条，对应的originals、import、storage三个目录需要提前手动创建并分配用户权限。如果以root用户运行，这条可以无视。 image: linuxserver/mariadb:10.6.13，这是mariadb的配置项，目前支持armv7的mariadb的最新（后）一个版本就是10.6.13，需要指定版本。 改完配置文件以后，就可以开始部署了
docker-compose up -d 不出意外等命令跑完就OK了。
不过pp启动还是会稍微有点耗时，大概需要半分钟到一分钟的样子就可以访问web端了。
第三步：web端功能精简
有些功能可以在webui中进行优化（禁用），可以酌情调整。
一般：人物：建议关闭，需要tensorflow进行人脸识别 一般：标签：建议关闭，需要tensorflow进行照片主题识别添加标签，禁用tensorflow以后没有标签了，没必要保留入口 一般：瞬间：建议关闭，根据地点、标签、人脸之类标签来汇总整理的相册功能，禁用掉地点和tensorfow以后这功能就是个残废，没必要保留入口 资料库：估算：建议关闭，地理坐标的功能 高级：禁用webdav：建议关闭 高级：禁用地点：建议关闭，除了吃硬件性能之外，这服务还会需要去网上下载地图数据，碰到网络差或者网站被屏蔽时会导致照片索引服务卡在网络请求这一步很久 高级：禁用exiftool：建议关闭，每个照片都会创建一个exif json文件，非常吃i/o存储性能 高级：禁用tensorflow：务必关闭，玩客云上开这个功能的话pp根本没法用 高级：禁用备份：建议关闭，pp默认会统一修改原文件名，所以需要备份原始元数据到yaml文件，大量小文件吃i/o性能，对原文件名没有要求的话可以关闭 高级：动态预览：建议关闭，它自述不适合低性能nas，所以关闭 高级：禁用imagemagick：建议关闭，raw文件生成缩略图用的，没有raw文件就关闭 大致就这些了，禁用掉这些功能以后，photoprism在玩客云上就能流畅运行了。</description>
    </item>
    
    <item>
      <title>有关我的twitter账号被封以后的常见问题</title>
      <link>https://ruohai.wang/202311/twitter-faqs-about-got-banned/</link>
      <pubDate>Mon, 20 Nov 2023 20:15:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/twitter-faqs-about-got-banned/</guid>
      <description>FAQs Q：你的twitter账号怎么了？
A：被冻结了，大概是因为使用第三方插件下载twitter视频被判定为滥用twitter api的违规行为。
Q：能解封吗？
A：发过五六封申诉信了，然并卵，凉了，勿念。
Q：会注册小号回归吗？
A：目前没有这个打算。
Q：会去长毛象吗？
A：目前没有这个打算。
Q：那你用什么平台？
A：目前在自己的玩客云小机器上部署了一个memos，套了cloudflare tunnels提供公网访问，可以【点击这里】访问。小水管，访问速度会比较慢，而且服务不一定稳定，可能因为电力、网络、dns解析滞后，或者自己在刷机等各种原因导致无法访问。但我会尽量保证服务可用。
Q：很久没看到叶光荣了，他还好吗？
A：抱歉让你失望了，6月份的时候我们因为沟通矛盾已经断联至今，默认已经分手。他的近况我无法得知。
Q：两只猫还好吗？
A：挺好的，能吃能喝，膘肥体壮。想看🐱🐱近照依然可以访问我的memos【点击这里】，我偶尔会发一些🐱片。
感谢 感谢你对我的关注，感谢过去这么多年我们在twitter上的互动，感谢你愿意找到这里来了解我的近况。
也替两只猫🐱感谢你的关心。
希望接下去的每一天越来越好，大家越来越开心。
🎉</description>
    </item>
    
    <item>
      <title>twitter账号被冻结的原因分析</title>
      <link>https://ruohai.wang/202311/twitter-why-got-suspended/</link>
      <pubDate>Thu, 16 Nov 2023 01:21:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/twitter-why-got-suspended/</guid>
      <description>这几天复盘了一下我的账号为什么会被冻结，我违反了twitter的哪条rule。思来想去，夜不能寐。
突然灵光一闪，我大概猜到原因了：滥用api。
马斯克接手twitter以后，调整了twitter api的使用限制，那会还闹出了不少搞笑的限制策略，比如一天刷推数量限定200条。这些新策略，有一些撤回了，还有一些落实执行了。
之前朋友给我分享过一个chrome应用商店里的插件，可以用来下载twitter上的视频文件，我觉得很好用，就一直装着这个插件。前阵子这个插件被twitter官方投诉下架了，投诉理由是滥用api。但已经装在浏览器上的插件并不会自己消失，我依然在用这个插件。大概率是这个插件的原因，导致我的账号被认定存在滥用api的行为而被冻结了。
想明白了原因，又用gpt写了一份申诉信。
回信内容一如预料：这个账号被冻结（this account is suspended）。
没戏，凉凉。
😄</description>
    </item>
    
    <item>
      <title>在玩客云上用Docker部署memos</title>
      <link>https://ruohai.wang/202311/memos-install-on-onecloud/</link>
      <pubDate>Tue, 14 Nov 2023 13:03:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/memos-install-on-onecloud/</guid>
      <description>前言 开篇先来个提醒：目前memos这个项目正处于快速更新迭代中，重要数据记得做好备份。
memos，轻量、方便好用、开源的自建笔记服务，可以拿来记笔记，也可以拿到当做一个自建小微博（或者自建小twitter）来用。
memos的部署，目前官方只推荐docker或者docker-compose两种方式。
那其实要部署就非常简单，准备好docker环境，然后一条命令/一个配置文件就搞定了。
但在玩客云上安装稍微有点麻烦，因为玩客云的硬件是armv7，memos的的新版已经不支持这个架构。
所以本次安装的核心就是找到支持armv7的docker镜像。
部署 第一步：准备docker环境
直接用debian仓库里的docker
sudo apt install docker.io 我更喜欢用docker-compose，配置文件方便管理
sudo apt install docker-compose docker环境到此安装完毕
第二步：准备memos的docker镜像
memos最新发布的docker镜像已经不支持armv7架构，有两个解决方案：
如果你动手能力比较强，那就下载源码自己编译一个支持armv7的版本 如果和我一样比较懒，那就找一下支持armv7的版本 在docker hub找到【neosmemo/memos】，点开tags标签，一直往前翻，可以看到2023年9月发布的0.15.0版本支持armv7。这就好办了，docker pull的时候指定版本即可。
在memos的github releases页面看一下0.15之后发布版本增加的新功能，最大的区别就是增加了用户之间评论 + 回复 + 留言的功能吧，memos从单机版变成了在线多人互动版。无奈玩客云硬件太老没有新版本可用，就安心玩单机版吧。😄
第三步：部署memos
我用的docker-compose方式部署，新建一个配置文件
# 新建目录 mkdir ~/.memos ; cd $_ # 新建配置文件 touch docker-compose.yml 然后用编辑docker-compose.yml文件，录入以下内容。
version: &amp;#34;3.0&amp;#34; services: memos: image: ghcr.io/usememos/memos:0.15.0 container_name: memos user: 1000:1000 restart: always volumes: - ~/.memos/:/var/opt/memos ports: - 5230:5230 注意，针对官方提供的配置文件，我调整了几个参数：
版本号，从latest指定为0.15.0 用户，默认是root用户运行memos，调整为UID:GID=1000:1000的non-root用户 重启方式，默认没有restart配置参数，调整为总是重启（always） 编辑好配置文件以后，开始部署即可</description>
    </item>
    
    <item>
      <title>往mdadm创建的raid5阵列中添加新硬盘以扩容</title>
      <link>https://ruohai.wang/202311/mdadm-add-new-hdd-to-raid5-arrary/</link>
      <pubDate>Tue, 14 Nov 2023 12:44:00 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/mdadm-add-new-hdd-to-raid5-arrary/</guid>
      <description>前言 之前手上只有4块hdd，虽然硬盘柜有5个盘位，但只是用4盘组了raid5。
raid5用了一阵以后，觉得还行，就想着把剩下的一个空盘位利用起来，所以又从pdd入手了好几片500GB的拆机硬盘。
硬盘到手了，照例又是查smart信息、全盘扫坏道。几块西数的是清零盘，但没有扫出坏道；几块希捷的通电时间惊人，一块3万小时，一块6万小时，但没有扫出坏道。
也就20rmb一片，既然没坏道，那就凑合着用吧。
raid5扩容 先描述下本次我想要实现的需求：有一个正在运行的四盘位raid5阵列，添加一个块同容量的硬盘，从四盘位扩展为五盘位。
有需求了就找解决方案，搜关键字mdadm、raid5、添加硬盘，但没有搜到什么靠谱可用的方案，那就自己摸索吧。
已有raid5阵列要添加硬盘，有两个方案：
方案一： 新建raid5
这个方案很傻瓜，但是非常的安全而且非常的效率，可行度100%。前提是你手上有很多备用硬盘，或者有一个大容量硬盘做数据中转。
如果手上硬盘数量足够多，那就保持旧四盘位raid不动，新组装一个五盘位raid5，然后直接从旧raid拷数据到新raid。整个任务所耗费的时间由两个raid的硬盘读写速度和局域网带宽决定。
如果手上硬盘不够用来组新raid，那先从旧raid把数据导出一份备份，然后停用四盘位旧raid + 加硬盘 + 创建五盘位新raid，最后把备份的数据再导入回去。
方案二：旧raid5扩容
这个方案有一定的风险性，操作前最好把数据备份一下。
旧四盘位的raid5，添加一块硬盘。假定新添加的硬盘是/dev/sdf。
第一步：清除分区数据。
因为我的旧raid是清除了分区直接裸盘组raid，所以新硬盘也先清除分区信息。如果你的raid是先分区然后以分区为单位组装的raid，那新硬盘也记得同样先分区。
# 查看分区信息 wipefs /dev/sdf # 清除分区信息 wipefs -a -f /dev/sdf 第二步：添加硬盘
新盘添加进阵列。假定阵列名为/dev/md0。
mdadm --manage /dev/md0 --add /dev/sdf 添加完成后，查看一下阵列信息。
mdadm -D /dev/md0 此时可以看到阵列的硬盘数量从4变成了5。但是新加入的硬盘并没有真正的融入进去，它的角色是hot spare热备盘，也就是当四盘raid中出现一块坏盘时，这块新盘会自动替上去重建raid修复数据。
第三步：重塑（reshape）
我的目的并不是给四盘位raid5添加一块热备盘（hot spare），我是想把新盘加进存储池扩充容量。
指定raid5的硬盘数量为5
mdadm --grow /dev/md0 --raid-devices=5 命令执行完成后，查看一下阵列信息
mdadm -D /dev/md0 此时就可以看到，存储池的硬盘从4块变成了5块，新的raid开始重塑（reshaping）。
整个重塑过程会非常非常非常的漫长，这个时间单位以小时甚至以天计算，请耐心等待mdadm完成任务。
第四步：调整阵列容量
在经历了漫长的重塑（reshape）以后，进度条终于到了100%，可以进行下一步操作了。
把raid容量调整为最大！
mdadm --grow /dev/md0 --size=max 查看阵列当前状态，会看到当前是resyncing(同步)。
mdadm --detail /dev/md0 然后耐心等待mdadm对阵列进行同步（resyncing），这个过程比重塑（reshape）快很多。</description>
    </item>
    
    <item>
      <title>我的推特账号被冻结了</title>
      <link>https://ruohai.wang/202311/twitter-account-was-suspended/</link>
      <pubDate>Tue, 14 Nov 2023 12:40:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/twitter-account-was-suspended/</guid>
      <description>是的，我的twitter账号被冻结了。
冻结的时间点大概是2023年11月12日凌晨2点，首页提示账户被冻结如有疑问请发申诉信。
发了三次申诉信，前两份自己写的，英语磕磕绊绊，但表述清楚了这可能是一个错判请review这次操作。很快就收到邮件，简短一句话：这个账号被冻结（this account is suspended）。
12号白天的时候用gpt4生成了一份完美的申诉信，很快又收到了邮件，依然是简短的一句话：这个账号被冻结（this account is suspended）。
行吧，不纠结了。
如果要说这个账号对我是否重要，我能写出千字它对我的重要性。从2008年8月注册，到2013年11月被冻结，使用了近16年的账号，记录了我从上学到工作、从年轻人变中年人、从单身到处对象最后又恢复单身，这一切的点点滴滴。
账号就此被冻结，连导出个人数据存档的选择都没有，至此，我的一十六年的记录消失在互联网。
这两年也确实进入了人生低谷期，半生役役未见成功，茕茕孑立不知所向，已无力、无心继续在网络上记录个人生活日常。此事就当是和过往做个了结。
希望接下去的日子，朋友，你和我，每天都开心。
😄</description>
    </item>
    
    <item>
      <title>Linux下迁移mdadm软raid</title>
      <link>https://ruohai.wang/202311/mdadm-auto-mount-raid/</link>
      <pubDate>Fri, 10 Nov 2023 18:03:30 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/mdadm-auto-mount-raid/</guid>
      <description>当在A系统下用mdadm组装的软raid阵列，如果全盘迁移到B系统时，如何正确的重新组装并识别。
有两种解决方案：
方案一：B系统重启 B系统先安装mdadm，然后关机，接着插上raid阵列的所有硬盘，最后B系统重启即可。B系统启动后会自动识别软raid阵列并正确组装，之后只需要动手完成挂载。
方案二：B系统不重启 现在A系统中卸载（umount）软raid阵列，然后把阵列的所有硬盘插到B系统主机。
这里又分两种情况。
先安装mdadm，然后raid硬盘都插入后，系统会自动识别raid并正确组装
先插入raid阵列所有硬盘，然后安装mdadm，此时系统无法自动识别raid，需要手动组装
设定raid阵列名为md0，4个阵列盘分为sdb、sdc、sdd、sde。执行以下命令，即可完成raid组装与识别，之后再手动完成挂载。
# 组装阵列，mdadm会自动识别raid类型 mdadm -A /dev/md0 /dev/sd[b-e] # 手动挂载 mount /dev/md0 /mnt/raid </description>
    </item>
    
    <item>
      <title>Hugo博客的安装</title>
      <link>https://ruohai.wang/202311/hugo-install-guide/</link>
      <pubDate>Wed, 01 Nov 2023 00:32:27 +0800</pubDate>
      
      <guid>https://ruohai.wang/202311/hugo-install-guide/</guid>
      <description>前言 这两天重新部署了nas，而且博客用的主题m10c也已经停止维护快一年，新版本的hugo已经不支持这个主题。两个原因叠加，正好重新部署hugo。
离上一次部署已经过去快四个月，需要重新看官方文档才能回忆起步骤。看之前自己写的教程也觉得啰里啰唆，旧文懒得改，索性重新记录一篇。
安装 第一步：下载安装包
之前是直接apt install用的debian仓库版本，但太老了，还一直停在0.111.3版本，而且apt安装还会附带一大堆其它包，提示需要几百MB的存储空间，所以这次放弃apt，直接到github仓库下载二进制安装包。
github指路：https://github.com/gohugoio/hugo/releases
下载对应系统、对应硬件架构的版本，然后添加环境变量。
windows：把压缩包解压到D:\hugo并把路径添加到环境变量，高级系统设置——环境变量——系统变量——path，保存退出。 linux：把压缩包解压到/opt/hugo并把路径添加到.bashrc，在末尾加一行export PATH=$PATH:/opt/hugo，然后source ~/.bashrc让变更生效。 配置完以后，敲命令hugo -h看是否正常输出。
第二步：创建博客目录
hugo new site myblog 第三步：获取主题
hugo官网主题商店指路：https://themes.gohugo.io/
# 进入博客目录 cd myblog # 初始化git仓库 git init # 克隆paper主题到themes/paper目录 git clone https://github.com/nanxiaobei/hugo-paper themes/paper 然后在hugo.toml配置文件中指定主题即可
theme = &amp;#34;paper&amp;#34; 第四步：本地运行
安装了主题以后，本地运行查看效果
hugo server 如果非本机访问，而是局域网内其他机器访问，需要加bind参数
hugo server --bind=&amp;#34;0.0.0.0&amp;#34; 第五步：写文章
写文章需要先根据模板新建markdown文件
hugo new post/my-first-blog.md 其中post是归档目录，也是发布博客以后的url地址，可以根据自己喜好调整，比如我喜欢根据月份归档，那就是
hugo new 202311/my-first-blog.md 第六步：编译博客
博客写好以后，在发布之前，需要编译成html静态页面。
# 进入目录 cd myblog # 编译 hugo 注意编译的时候，默认会忽略草稿，也就是markdown文件中的draft: false标签，如果是true，默认在执行hugo编译的时候会忽略掉这篇草稿。
第七步：发布博客
在编译完成后，在myblog目录下会出现一个public目录，要发布博客，就只需要把public目录下的内容推送到目标服务器就行了，比如自己的服务器、github pages、cloudflare pages等等。</description>
    </item>
    
    <item>
      <title>用tune2fs释放ext4文件系统的预留空间</title>
      <link>https://ruohai.wang/202310/tune2fs-reduce-reserved-blocks-percentage/</link>
      <pubDate>Tue, 31 Oct 2023 17:10:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/tune2fs-reduce-reserved-blocks-percentage/</guid>
      <description>linux的ext4文件系统，默认会预留5%的存储空间作为特权进程使用。
这在小容量硬盘上表现并不明显，500G的硬盘，扣掉1000/1024的损耗，再扣掉5%的损耗也就20GB左右。
但是我现在使用linux系统和ext4文件系统作为NAS，硬盘容量都是TB为单位，每一个TB的5%就是50GB。
如果你也玩nas，就知道在nas上，sata接口和存储空间都是稀有物资，能抠出来一点是一点。
但硬盘已经完成格式化的情况下，需要用tune2fs来调整这个预留空间的比例。
tune2fs -m 1 /dev/sdb1 m ：用来调整预留空间的比例，后面的1指调整为1% 注意事项 网上搜索到的内容，没有明确的定论，这个预留空间减少以后对系统正常运行是否会有影响，但大致都认同1%是一个安全的比例。
强烈不建议设置为0%。
实测生产环境可以直接用tune2fs调整，无需重启，实时生效。
参考文章 Linux基础命令&amp;mdash;tune2fs https://www.cnblogs.com/wj78080458/p/9920449.html </description>
    </item>
    
    <item>
      <title>Linux下用mdadm创建软RAID以及避坑</title>
      <link>https://ruohai.wang/202310/mdadm-create-soft-raid-guide/</link>
      <pubDate>Tue, 31 Oct 2023 00:54:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/mdadm-create-soft-raid-guide/</guid>
      <description>前言 linux下组软raid用mdadm命令，multiple devices admin，多设备管理。
本文内容有二：
用mdadm创建raid 用mdadm创建raid时的一个大坑 大坑 先把大坑写前面。
用来创建raid的硬盘，不管是新盘还是旧盘，在linux中挂载以后，请先用wipefs命令清理硬盘上的分区表信息。
硬盘分区有两种，mbr和gpt，mbr可以直接裸盘不分区就创建raid，gpt必须要有分区才能创建raid。如果组raid的几块硬盘分区表信息不统一，虽然能成功创建raid，但是系统一重启就会掉raid，也就是raid消失了。没错，系统一重启raid就没了。如果你已经在这个raid上导入数据，这个坑肯定能惊出你一头汗。
所以拿到硬盘以后，最好是用wipefs直接清空分区表。也有人说用fdisk，但实际fdisk只能处理mbr分区表，需要用升级版gdisk才能处理gpt分区表。
假定磁盘是/dev/sdb
# 查看分区表 wipefs /dev/sdb 删除分区表所有信息
wipefs -a -f /dev/sdb 分区注意事项 创建raid之前，要简单了解一下mbr和gpt分区，避免后续再踩雷。
mbr：
不支持2TB以上容量的硬盘 可以不分区，以裸盘为单位创建raid 用fdisk处理分区 gpt：
支持2TB以上容量的硬盘 必须先分区，以分区为单位创建raid 用gdisk处理分区 创建磁盘阵列 我没有那么大容量的硬盘，而且系统也是legacy bios引导，所以这里选择mbr裸盘创建阵列。
第一步：查看分区表
先确认前面已经用wipefs清空了旧硬盘上的分区表信息。
# 查看分区表 wipefs /dev/sdb # 删除分区表 wipefs -a -f /dev/sdb 注意：如果是gpt分区，注意要用gdisk先分区，/dev/sdb1和/dev/sdc1，下面创建raid的时候也是用/dev/sdb1和/dev/sdc1。
第二步：创建raid0
mdadm --create /dev/md0 --level=0 --raid-devices=2 /dev/sdb /dev/sdc /dev/md0 ： 指创建的磁盘阵列的名称，如果有多个raid，可以按顺序往下编，比如/dev/md1 level=0 ：指raid0，还有1、5、10等等，对应raid1、raid5、raid10 raid-devices=2 ：指阵列的磁盘数量，2块盘就是2 创建完成后，可以用下面的命令查看raid信息。
mdadm --detail /dev/md0 第三步：创建文件系统（格式化）
raid创建成功以后，需要格式化
mkfs.ext4 /dev/md0 注意ext4文件格式下，系统会预留5%的冗余空间，简单换算就是1TB就会保留50GB空间。</description>
    </item>
    
    <item>
      <title>PhotoPrism视频功能的不足</title>
      <link>https://ruohai.wang/202310/photoprism-use-guide-about-video/</link>
      <pubDate>Sun, 22 Oct 2023 02:03:14 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-use-guide-about-video/</guid>
      <description>前言 photoprism以下简写pp。
文中pp使用docker-compose方式部署。
两个星期pp的使用体验下来，对比起immich，就像是守旧老派对标先锋新锐的感觉。使用的时间越久，这种体验越强烈。
当然这篇文章重点讲pp对于视频文件的使用体验。
pp对于视频文件的支持这一块值得单独拎出来写一篇文章，因为能看出来pp在这么多年的迭代过程中，对于视频功能似乎一直不怎么上心，导致视频文件的交互体验非常差。也许是因为对产品的定位，也许是觉得视频太吃硬件性能、太消耗存储空间
视频功能的不足 默认不开启视频转码。 在默认情况下，pp是不开启视频转码的。这种情况下，查看视频就是直接播放原素材。如果原视频的拍摄规格比较高的话，非常考验硬盘读写速度、网络带宽和播放设备的解码能力。
开启视频转码需要改配置文件 immich的视频转码功能直接在网页端就可以配置，分辨率、码率、硬件加速，网页端都提供了配置入口。pp的设置页面虽然有一大堆设置项，但那些都是针对照片的，包括让我误解了很久的【动态预览】，我一直以为这个是指实时转码，其实它也是针对照片。
pp开启视频转码，需要编辑docker-compose.yml文件，解开注释以下代码。
PHOTOPRISM_FFMPEG_ENCODER: &amp;#34;software&amp;#34; ## 解码方式，默认软解 PHOTOPRISM_FFMPEG_SIZE: &amp;#34;1920&amp;#34; ## 转码分辨率，默认1080p PHOTOPRISM_FFMPEG_BITRATE: &amp;#34;32&amp;#34; ## 转码码率，默认32Mbps 然后重新部署pp即可。
docker-compose up -d 如果想配置集显或者显卡硬解，请参考官网，还需要改更多地方。
开启视频转码后不会提前转码 启用了视频转码以后，并不会把图库里的所有视频全部都转码一遍，不会。
pp的视频转码，是用户在点击视频播放的那一刻，才立刻开始转码，等转码好了，再给你播放转码处理过的【小】视频。这中间会有一个等待时间，至于这个等待时间有多长，取决于你用来跑pp的电脑性能有多差，可能等5秒，也可能等50秒，如果视频很大规格很高的话，等5分钟也不是没可能。至于看个视频需要等这么久才开始播放，这使用体验有多糟糕，pp官方不在乎。
那有没有办法把图库里的视频全部都转码一遍呢，有，有办法。官网给了一条命令，执行以后，会把图库里的全部视频都提前转码，下次点击播放视频就不需要再等了。
docker-compose exec photoprism photoprism convert 如果图库又上传了新的视频，我估计，应该还需要再手动执行这条命令。
视频播放界面很简陋 播放视频的时候，是一个全屏遮罩的播放界面，不仅和查看照片一样没有信息侧栏，连编辑的入口都没有。而且播放界面点出菜单选择下载，下载下来的竟然是转码后的【小】视频，下载的竟然不是原视频！
那想要查看视频文件的exif信息要怎么操作？想要下载原视频要怎么操作？在照片墙页面，点击小圈圈选中文件，然后点击页面右小角的大圆圈，弹出功能菜单，里面有一个圈是【编辑】功能可以查看exif，一个圈是【下载】可以下载原视频。
视频不支持鼠标悬停自动播放 这个功能immich是支持的，非常方便查看视频内容。而且转码以后的小视频，全屏播放的时候清晰度会比较差，十分影响观看体验，在照片墙界面小窗口播放是最合适的。很不幸，pp不支持这个功能，视频文件默认只抽取一张图片当封面，想查看视频内容，得点击播放，然后弹出那个简陋的全屏播放遮罩。如果这个视频文件没有转码的话，你可能还需要耐心的等上几十秒甚至几分钟才能看。
视频播放不支持旋转 网页端播放视频时，没有旋转方向的功能，不管视频是竖的还是横的，将就着看吧。不过，如果在手机上用pwa小应用（网页）看视频的话，它会无视手机是否关闭了自动转向，根据重力感应计自动旋转，倒是实现了视频旋转方向的功能。</description>
    </item>
    
    <item>
      <title>Immich用非root账号运行的设置方法</title>
      <link>https://ruohai.wang/202310/immich-run-as-a-non-root-user/</link>
      <pubDate>Fri, 20 Oct 2023 18:07:57 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-run-as-a-non-root-user/</guid>
      <description>前言 immich服务用docker部署，有一个非常刺挠不舒服的问题，就是文件权限。
docker需要root账户跑（虽然可以通过一些设置实现non-root账户跑），用docker部署的immich默认也就是root权限，导致通过immich上传和归档的照片、视频文件都是root权限。
这说不上什么大的问题，但我觉得很不舒服，就看了官方文档，要怎么设置才能用non-root账户跑。但官网含糊其辞，最后在虚拟机里反复部署、删除、调试，终于搞定了我的三个需求：
上传和归档的照片、视频，不能是root权限
immich图像算法处理以后生成的内容，不能是root权限
整体服务和功能要正常可用
这里不得不夸一下photoprism，在docker-compose配置文件里就定义好了用non-root账号运行的参数，取消注释就行了。
步骤 先看下官网给出的用非root账号运行immich的办法
How can I run Immich as a non-root user? 1. Set the PUID/PGID environment variables (in .env). 2. Set the corresponding user argument in docker-compose for each service. 3. Add an additional volume to immich-microservices that mounts internally to /usr/src/app/.reverse-geocoding-dump. The non-root user/group needs read/write access to the volume mounts, including UPLOAD_LOCATION. 简单英翻中一下：
在.env文件中设置PUID/PGID 在docker-compose配置文件中给每一个服务（service）配置对应的user参数 给immich-microservices服务添加一个额外的卷（volume）用来挂载容器内部的/usr/src/app/.reverse-geocoding-dump目录 注意各个文件夹的读写权限分配 但实际看完这个官网的步骤也是一头雾水的，说的很模糊，也没有给出示例。
最后在immich项目的github主页的issues列表里，找到了别人贴出的non-root场景的配置信息，反复调试以后，确定了一下方案。
第一步：在.env中配置PUID/PGID</description>
    </item>
    
    <item>
      <title>macOS装机必备软件（个人向）</title>
      <link>https://ruohai.wang/202310/macos-selected-apps/</link>
      <pubDate>Thu, 19 Oct 2023 21:58:30 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/macos-selected-apps/</guid>
      <description>前言 个人向的macos必备的简单优化app。
作为一个windows忠实用户，选择app的方向偏向windows style、免费。
app清单会慢慢更新。
App清单 Mos
官网：https://mos.caldis.me/
功能：平滑鼠标混动，翻转鼠标滚轮方向
费用：免费
Tiles
官网：https://freemacsoft.net/tiles/
功能：一个窗口管理器，用来实现类似Windows系统的窗口贴边自动分屏，支持快捷键。
费用：免费
V2rayU
官网：https://github.hscsec.cn/yanue/V2rayU
功能：v2ray的macos客户端
费用：免费
Keka
官网：https://www.keka.io/
功能：压缩和解压缩软件
费用：免费
IINA
官网：https://iina.io/
功能：视频播放器
费用：免费
VSCode
官网：https://code.visualstudio.com/
功能：文本编辑器
费用：免费
Edge
官网：https://www.microsoft.com/zh-cn/edge/download
功能：浏览器
费用：免费
搜狗拼音输入法
官网：https://pinyin.sogou.com/mac/
功能：中文拼音输入法
费用：免费
Microsoft Remote Desktop
官网：https://apps.apple.com/us/app/microsoft-remote-desktop/id1295203466
功能：远程连接Windows电脑
费用：免费</description>
    </item>
    
    <item>
      <title>台州神仙居旅游简单记录</title>
      <link>https://ruohai.wang/202310/diary-trip-to-taizhou/</link>
      <pubDate>Thu, 19 Oct 2023 16:50:57 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/diary-trip-to-taizhou/</guid>
      <description>2023年10月17号的时候去了一趟台州神仙居，简单记录一下这个景区游玩的注意事项：
收费项目
这个景区有几个核心收费项目，明细如下：
门票110元。60周岁以上半价，70周岁以上免票。其它还有军人、老师之类的优惠政策，可以查阅官网。
缆车120元。分为上山65元，下山55元。如果对自己的体力有信心，而且游玩时间十分充裕，可以选择自行登山（大概2小时）下山（大概1.5小时）。
北门观光车10元。北门从停车场到景区入口有1.5公里，可以步行或者选择观光车。
景区南北门调度大巴5元。神仙居景区很大，分为南门和北门，两门之间距离15公里。如果自驾游玩，停南门北门都行，下山以后乘坐调度大巴返回即可。
南门观光车5元。南门从停车场到景区入口600米，这里建议步行。
南天顶观景台90元。这个是景区内的单独收费项目，一个高空玻璃观景台，非必选。如果只是想体验高空玻璃台，景区内的如意桥也有，免费。
山顶用餐35~45元。南门上山电梯登顶后就有食堂，有快餐，一荤两素35元两荤一素45元。另外有一些小吃和面条之类，价格没问。
其它费用。神仙居景区的外围还有其它一些攀岩类、户外扩展类的项目，也是单独收费，这里不做列举。
费用合计：必须费用计算，门票+缆车+北门观光车+调度大巴+用餐，大概280元/人。
无障碍设施
这次去主要目的是陪我父母出去玩，母亲体弱无法长时间站立和步行，所以我随身带了一个可折叠轮椅。全程体验下来，有不少的台阶无法使用轮椅。电梯上也无法使用轮椅，因为电梯很窄只容一个成年人的身宽，轮椅必须折叠竖着放。
游玩攻略
自驾游，建议车停在北门停车场，然后乘坐景区调度大巴到南门上山，也就是【南上北下】路线。
南上北下的优点：
地势南高北低，全程都是下坡，体力消耗少
南门缆车是吊舱，一舱8人，运载能力强。北门缆车是类似公交车的大车厢，无座。
南门上山，一般都是9点左右进入景区，缆车（要排队）+电梯直接登顶，简单几个景点闲逛后大概11点，正好到食堂吃饭，避免出现饿肚子爬山的窘境。
景点路线选择
神仙居景点众多，南门上山后，可以从西边绕圈，也可以从东边绕圈。我建议从东边绕圈，也就是南天顶——南天桥———青云梯——卧龙桥——如意桥，如意桥逛完以后从北海索道下山到达景区北门。这条路径几乎包含了景区内所有精华景点。
如果对自己的体力十分有信心，而且游玩时间十分充裕，而且车停在南门，那也可以选择绕完东线后，走如意桥继续绕西线回到南天顶，然后从南天索道下山达到景区南门。</description>
    </item>
    
    <item>
      <title>Immich的优缺点</title>
      <link>https://ruohai.wang/202310/immich-pros-and-cons/</link>
      <pubDate>Sat, 14 Oct 2023 04:45:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-pros-and-cons/</guid>
      <description>前言 优缺点内容会随着日常使用不断更新。
对比产品是photoprism。
其它类似产品lychee、piwigo、mt-photos、photoview、librephotos等等，懒得试了。
简单总结：优点非常突出，但缺点也很致命。快速迭代中，bug较多，建议当作备用方案。
优点 很像google photos。优点等级：✔️✔️✔️✔️✔️ 是的，像google photos是一个优点，而且是一个很大的优点。这个像不仅仅是简单的界面布局像，而且连操作交互都像，简洁、高效、赏心悦目。
可以理解为immich就是一个开源版本的google photos，或者说开发者就是照着google photos的ui/ux的逻辑去开发的。
如果你和我一样原本是一个google photos的用户，那对于使用immich就不会有任何的上手难度，完全可以说是无感迁移。
导入照片很快。优点等级：✔️✔️✔️✔️✔️ 这点我原本不觉得算优点，但对比了photoprism的导入速度以后，我必须要把这点列出来而且给它评一个五星。
immich的导入照片、图像算法处理、照片归档、视频转码都是异步处理的，导入速度有多快，只取决于你的硬盘读写速度和网络带宽速度的上限有多高，那感觉简直就是丝般的顺滑，这才是2023年的速度啊。至于图像算法处理、视频转码之类的耗时漫长的任务，统统扔后台异步处理。
官方有app而且免费。优点等级：✔️✔️✔️✔️✔️ 这点我原本也不觉得算优点，但对比了photoprism以后我觉得这就是五星级别的优点。同样的，app的ui/ux也是和google photos的app几乎一模一样。上手使用无难度。
支持多用户。优点等级：✔️✔️✔️✔️ 这点我原本觉得只能评个两星，但对标的photoprism的个人免费版本直接阉割了多用户功能，要付费才支持多用户，那immich这边必须给评个四星。
归档目录结构可自定义。优点等级：✔️✔️ 又是一个对比photoprism的优点。归档目录结构默认就有好几个模板可选，甚至还支持自定义，可以根据自己的喜好调整目录结构。
缺点 导入时有bug。缺点等级：❌❌❌❌❌ 我使用immich的一个星期里，这个bug碰到了两次。具体表现是，上传以后的照片，卡在upload目录无法归档。这个bug我觉得非常的致命。
这里说一下immich处理照片整个流程：
上传的照片全部用uuid重命名，保存到upload目录。这个目录可以理解为临时目录，所有上传的照片都临时放这里等待处理。 然后会跑extract metadata任务开始读取upload目录下照片的元数据。 读取完以后，根据照片拍摄时间把文件归档并还原文件名 上传的照片卡在upload目录的意思，就是extract metadata任务出了问题。我碰到的两次bug，一次是extract metadata任务无法运行，一直是pause状态，点击resume/start以后立刻就会变成pause，upload目录留了1800张照片无法处理。第二次bug是extract metadata任务能正常跑，但upload目录里它就是留了11张照片不处理。
如果你有很强的debug能力，那可以自己想办法处理。如果有足够的耐心，那可以上immich的github项目主页去提issue，然后等维护人员解答。
如果以上两个方案都无法接受，只想立刻解决这个bug，比如重新部署immich然后把卡在upload目录的照片拿出来重新导入一遍，那最致命的问题来了：留在upload目录的照片，文件名是被重命名过的，不仅丢失了原文件名，而且uuid的格式毫无辨识度。重新导入以后，甚至连归档时间都会被重置，也就是识别成此时此刻，然后归档到当天。
这种bug碰到一次就想死了，碰到两次，拜拜了immich。
exif读取错误。缺点等级：❌❌❌❌❌ 我用了大概一个星期，试过网页上传照片、cli批量导入、手机app同步，都出现过读出来的拍摄时间错误的问题。比如今天拍的照片，同步到immich以后它归档到明天去了，还显示拍摄时间是明天，一次两次可以接受，老是出现的话受不了。
不支持多硬盘。缺点等级：❌❌❌❌ immich在当前这个版本（1.81.1），只支持指定一个目录，也即是只不支持多硬盘。这对比起photoprism就少了很多灵活性，比如不能原图指向hdd的同时让缓存指向ssd，而且只支持一个硬盘的坏处是所有文件都存储在一个硬盘上，让硬盘空间消耗加快，因为缓存+缩略图+转码视频也是非常消耗存储的，大概会占用原图体积的20%左右，举例就是1500G的照片和视频，缓存类文件就会占用300G左右。
不支持多语言。缺点等级：❌ web端只支持英文，英文很简单，我用起来没什么障碍。但对比photoprism支持多语言来说，这就是个缺点了。
照片多了以后用起来很卡。缺点等级：❌❌❌❌❌ 我导入了80000个文件以后，此时immich的网页端用起来会很卡，首页加载照片时间轴需要等待5~10秒钟，加载完了以后上下滚动也很卡。
这可能和我用来跑immich的主机的性能比较差有关，毕竟是古董H61平台，奔腾g630双核双线程，hdd。而且immich因为不支持多路径多硬盘，无法把缓存类目录指向ssd来提高优化浏览体验。</description>
    </item>
    
    <item>
      <title>PhotoPrism的优点和缺点</title>
      <link>https://ruohai.wang/202310/photoprism-pros-and-cons/</link>
      <pubDate>Sat, 14 Oct 2023 04:45:30 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-pros-and-cons/</guid>
      <description>前言 优缺点内容会随着日常使用不断更新。
下文中photoprism会简写成pp。
这篇文章中列举的优缺点不涉及界面是否好看之类，喜欢什么ui/ux直接看官网demo即可。
对比产品是immich。
其它类似产品lychee、piwigo、mt-photos、photoview、librephotos等等，懒得试了。
简单总结：稳定好用，缺点很多但还算能接受。建议photoprism作为主相册，immich作为备用相册，俩一起用。
优点 稳定。优点等级：✔️✔️✔️✔️✔️ 服务稳定运行，这点是日常感知非常不明显，但却是最重要的优点。pp的个人自建版本免费，另外还有多种不同定价的收费服务方案。能出收费商业方案的，相信我，不会有太大的bug。而且我在日常使用的过程中，确实感觉就是pp运行起来【稳如老狗】，不管出现什么错误操作，它都有对应的撤回/修正的方案。
而我在使用immich的短短一个星期里碰到了好几个bug，对比以后，pp的这个优点值五星。
当你碰到服务出了bug，自己debug也毫无头绪，最后只能推倒从来，把80000张照片倒过来倒过去的时候，就会发现这个点的重要性。
支持多硬盘。优点等级：✔️✔️✔️✔️✔️ pp服务跑起来以后，常用的会有三个目录：
originals：存放归档的原图 storage：存放缓存、缩略图、转码视频、配置文件 import：存放需要导入到pp的照片和视频 这三个目录都支持自定义路径。比如originals目录指向大容量的机械硬盘来保存原图，方便维护的同时也保障数据安全。比如storage目录指向高速ssd，用来加速浏览性能，避免网页浏览的时候卡顿。比如import目录可以指向存了大量图片的老图库的硬盘，然后在网页端直接一键导入完成数据迁移。pp甚至还支持给照片和视频分别指定路径，可以把照片和视频分开存到两个硬盘。
支持多硬盘还有一个好处，就是存储空间存储空间的最大化利用，这点对比immich只能指定一个目录的时候非常明显。
immich只能指定一个目录，意味着只支持单盘，所以所有数据，无论原图还是缓存、缩略图、转码视频等等，都只能保存在一个硬盘上。一个是不方便维护，二是这导致硬盘空间消耗的特别快。比如2TB的硬盘，原图占了1.5TB，那缓存+缩略图+转码视频可能得占掉500GB，那这时候就不得不考虑买一个更大容量的硬盘，然后迁移数据。而pp因为支持多盘，缓存盘不会去占用原图盘的空间，硬盘空间会更耐用一些。
支持多语言。优点等级：✔️ immich不支持多语言（没有中文），pp支持多语言，这就是pp的一个优点。
归档照片统一重命名。优点等级：✔️✔️ 默认设置下，所有照片视频归档以后都会被按照固定格式统一重命名，yyyymmdd-hhMMss + 8位随机字符串 + 文件后缀名。原文件名只会保存在数据库。
这点孰优孰劣看个人喜好，我觉得是个优点。因为原始文件的文件名杂乱无章，统一以后看上去整理利落，就算是一个处女座的强迫症用户都挑不出一点瑕疵。而且yyyymmdd-hhMMss的前缀也很容易辨认。
pp网页端支持通过原文件名搜索。
如果不喜欢这点的用户记得从设置里关掉这个功能。
批量导入很方便。优点等级：✔️✔️✔️✔️ pp有一个专门的import目录是导入用的，配合samba把这个目录设置成smb共享文件夹，直接映射到日常使用的windows电脑或者mac电脑上，只需要把照片视频复制到import文件夹，然后在pp网页点击导入就行了，非常方便。这比起immich需要装npm再用命令来批量导入可方便太多了。
也可以把老的图库直接复制移动到originals目录下，然后在网页端点击索引。这样可以保留老图库的目录结构和文件名。
缺点 导入照片耗时漫长。缺点等级：❌❌❌❌❌ 如果是通过import目录批量导入图库，那这个导入过程和跑pp的主机cpu性能直接关联。导入照片 + 算法处理照片 + 照片归档，整个流程是同步线性进行的，也即是上传一张照片 + 算法处理照片 + 照片归档，这个流程跑完了，再开始处理下一张照片。
这意味着什么，如果用来跑pp的电脑性能很差（很多人都会拿性能很差的旧电脑用来跑nas然后装很多服务），那算法处理照片这一步会卡很久，因为这一步包含了照片元数据读取、人脸识别、照片主体识别、给照片加上各种标签、gps信息处理等等一长串的任务。如果电脑的cpu性能孱弱，那一张照片就要处理4~5秒钟，如果照片的内容包含了大量的元素，甚至可能要处理10秒钟。这就会导致【导入照片】这个过程变得非常非常非常的漫长，可以算一下如果要导入10000张照片，每张照片耗时5秒钟，cpu是两核两线程的古董，整个过程需要耗时多久，是7个小时！天哪，是7个小时！！！！如果照片数量翻翻，50000张照片，完成导入又需要多久。
这个缺点在2023年简直是难以置信，千万不要用弱鸡cpu来跑pp。
正确的处理方式可以参考immich，导入 + 读取元数据 + 归档 + 图像算法处理，这些任务全部异步处理。限制导入速度的只有你的网络带宽和硬盘读写速度。无论是100张还是1000000张，导入时直接跑满硬盘读写速度，体验就是丝般顺滑。至于读取元数据、生成缩略图、图像算法处理、视频转码，扔到后台去慢慢处理。
查看大图界面没有exif侧栏。缺点等级：❌❌❌ 大抵现在所有的照片查看软件都支持侧栏显示exif信息，高级一点的甚至还能在侧栏显示gps地图定位信息，比如immich。但很不幸pp不支持，它没有侧栏。
想要在pp里看到exif信息，有两个方法，第一种就是照片墙界面选择卡片布局或者列表布局，会展示一些简略的exif信息，第二种就是在查看大图界面，点击一下【编辑】就会进入照片信息编辑界面，会出现5个标签可以查看照片的各种信息，但很不幸依然没有gps地图定位。
没有官方app。缺点等级：❌❌❌❌ 官方只提供了网页端服务，pc端、移动端都只能用浏览器访问pp网页。但好消息是pp网页支持pwa，也就是可以把网页“安装”到桌面当成一个app用，使用体验嘛就那样。
官方推荐的第三方app收费。缺点等级：❌❌❌❌❌ 这点非常下头，非常的下头。官方没app也认了，但官方贴心的给你推荐了一个app，叫photosync，ios/android平台都有，可以实现移动端同步照片到pp。不过天下没有免费的午餐，这app下载免费，但有内置广告，同步照片的功能很不幸需要付费，你可以免费体验7天然后选择花$5.99购买。
视频不支持鼠标悬停自动播放。缺点等级：❌ immich支持照片墙浏览时鼠标悬停视频自动播放，pp不支持。在使用体验上影响不大，就是每次看视频需要多点击一下。
不支持照片旋转。缺点等级：❌❌❌ 很多照片拍摄的时候有的横向有的竖向，我也不要求pp用算法自动纠正，但至少给我一个编辑的入口吧。很不幸，没有旋转照片的功能。
归档目录结构无法自定义。缺点等级：❌❌❌ pp的归档目录结构是yyyy/mm两级，也就是归档的最小时间单位是月，举例就是2023年10月拍的所有照片和视频，无论是10月哪一天拍的，都会归档到2023/10这个目录下。这个目录结构无法自定义，比如我想改成2023/2023-10/2023-10-14，很不幸，不支持自定义。
归档照片统一重命名。缺点等级：❌❌❌❌❌ 默认设置下，pp对归档的文件会统一重命名，格式是yyyymmdd-hhMMss的前缀+8位随机字符串+文件名后缀，原文件名会存在数据库里。这点对很多人来说是一个致命的缺点，这意味着源文件名的丢失。虽然源文件名存在数据库，pp网页也支持原文件名的搜索，但这导致如果数据库崩了，或者迁移服务、重新部署的时候没备份数据库，那原文件名就永远的丢失了。所以在意这点的用户，务必、千万一定要在开始导入照片之前，在设置里关掉这个功能。
对视频的支持不理想。缺点等级：❌❌❌❌ 提这个点我需要提前交代下我的硬件和软件配置：</description>
    </item>
    
    <item>
      <title>PhotoPrism的安装以及和Immich的优缺点对比</title>
      <link>https://ruohai.wang/202310/photoprism-install-guide/</link>
      <pubDate>Thu, 12 Oct 2023 18:48:49 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/photoprism-install-guide/</guid>
      <description>前言 10月初因为google one订阅计划到期没续，导致google one存储空间耗尽，接着连锁反应导致我的gmail因为没有空间而无法使用，所以终于下定决心：
要自建相册服务，不能在关键时候被google卡脖子！
（开玩笑的
immich的优缺点 上周弄了个机器部署immich，实际使用一段时间后，几个最突出的优点：
全终端覆盖，除了web服务之外，官方就提供了ios和android的app web和app的ui/ux都模仿的google photos，所以上手使用没难度 但是，但是啊，immich用起来确实各方面都还可以，但也有不少槽点，列举一二：
immich只能指定一个目录，也就是上传目录、缩略图目录、原图目录、转码视频目录，统统都一个目录下（aka一个硬盘）。导致会有原始媒体文件体积的20%左右的空间，是被缩略图、缓存之类消耗掉的，这导致硬盘空间更容易耗尽，意味着会需要更频繁的更换大容量硬盘和迁移/恢复。
上传了7万多张照片+视频以后，web端浏览非常、非常的卡，首页时间线的瀑布流展示出来需要等5~10秒钟左右。
上传照片的流程：新照片被重命名并放到upload目录 → immich读取新照片的exif → immich把新照片归档到指定根目录并还原文件名。这个流程如果顺利的话就很完美，没有问题。但我在短短几天的时候过程中，出现了好几次上传的照片被积压在upload目录，无论怎么在管理员的Job管理页面重启读取照片metadata的任务，积压在upload目录的文件都毫无变化，无法正确归档。最后的解决方案，第一次碰到这问题时，我简单排查以后感觉是immich-microserver出了问题，也不知道咋bugfix，索性备份了400G的内容以后重新部署。第二次在重新部署的immich服务上又碰到了这个问题，还好这次积压的不多只有17个文件，我下载到本地，根据日期核对图库以后，确认原图已经存在于图库，所以直接清空了upload目录。
物色其它方案 因为使用中种种的槽点，尤其是照片积压在upload目录这个严重的bug，所以我又开始物色其它自建相册方案：lychee、piwigo、photoprism、etc&amp;hellip;
古人有云：少年不知愁滋味，乱花渐欲迷人眼。看着这么多的方案，一时不知道该先试哪个。
看了一圈官方文档以后，挑中了photoprism。
优点如下：
自定义图库目录、缩略图目录、原图目录、转码视频目录，可以分别指定路径。这就可以实现原图放一个硬盘（方便维护），缩略图和缓存放ssd（加速图片浏览）。这简直就是对着immich的弱点痛打啊。 多语言支持，自带中文。虽然相册服务那点简单的英文对我来说没有使用障碍，但有中文可选总是加分的。 web端使用起来体验比immich响应速度快，可配置的内容更多更细致。 看完photoprism的文档以后，十分心动，立刻就弄个虚拟机，开始部署。
部署photoprism 我的机器用的系统时debian 12 bookworm stable，使用官网推荐的docker compose方案进行部署。
使用的photoprism版本是Build 231011-63f708417，docker-compose.yml文件中指定的version是3.5。注意不同的版本可能部署方式会有出入，最终以官网的文档为准。
官网文档：https://docs.photoprism.app/getting-started/docker-compose/
第一步：安装docker和docker-compose。
apt install docker apt install docker-compose 第二步：下载docker-compose.yml文件。
mkdir ~/.photoprism cd ~/.photoprism wget https://dl.photoprism.app/docker/docker-compose.yml 第三步：配置参数。
注意： 自建相册服务一般很少会反复折腾，都是部署好了以后就是24H运行除非硬盘满了。所以下面的10个参数一定要好好理解后进行配置，避免返工。
下载好docker-compose.yml以后，用文本编辑器打开，有以下几个参数需要修改：
账户密码类配置项：
1. PHOTOPRISM_ADMIN_USER：网页端管理员登录的用户名，默认是admin，建议修改 2. PHOTOPRISM_ADMIN_PASSWORD：网页端管理员登录的密码，建议修改 3. PHOTOPRISM_DATABASE_PASSWORD：数据库的密码，建议修改 4. MARIADB_PASSWORD：服务默认用的数据库是mariadb，这里配置photoprism数据库的密码。注意这个密码要和上一条中的PHOTOPRISM_DATABASE_PASSWORD的密码保持一致 5. MARIADB_ROOT_PASSWORD：数据库的root账户密码，建议修改 文件路径类配置项：
1. &amp;#34;~/Pictures:/photoprism/originals&amp;#34;：这项指定原图的归档目录，建议指向一个大容量hdd，一个硬盘专门用来放原图，方便后期维护。 2. &amp;#34;~/Import:/photoprism/import&amp;#34; ：这项指定需要导入的目录，默认是注释的（不启用），可选，有图库需要批量导入的可以这里指定路径，然后系统会把图片转移到originals目录进行归档。 3.</description>
    </item>
    
    <item>
      <title>Immich相册服务照片视频文件的批量上传</title>
      <link>https://ruohai.wang/202310/immich-bulk-upload/</link>
      <pubDate>Tue, 10 Oct 2023 19:06:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-bulk-upload/</guid>
      <description>前言 immich的网页端只支持选中多个文件上传，不支持选择文件夹。
官网有文档，批量导入需要用到npm。
啧，行吧，记录下怎么弄。
官网文档很细致，英文阅读无障碍的话直接看官网就行，我就是英翻中。
安装 我用来跑immich服务的机器装的是debian系统。
先装npm，大概600MB。
apt install npm 再装immich CLI模块
npm i -g immich 到此，安装完成。
批量导入 第一步：生成api key。
很抱歉我之前用的免费图床跑路了，所以不再传图，用文字记录下路径：
点击网页端的账户头像 —— account setting —— API Keys —— new api keys，name一栏随便填，然后点击create，然后把字符串复制保存。
第二步：文件夹批量上传。
immich upload --key API_KEY_STRING --server http://immich_host_ip:2283/api --recursive directory/ 有三个地方需要根据自己情况修改：
API_KEY_STRING，替换成第一步中生成的api key immich_host_ip，immich服务的ip地址，如果是同一台机器，写localhost就行。如果改过默认端口，那2283也要一并修改 directory/，需要上传的文件夹 执行以上命令后，会有提示：
Checking connectivity with Immich instance... Server status: OK Checking credentials... Login status: OK Successful authentication for user nibabawo@123.com Indexing local assets... Indexing complete, found 74868 local assets Comparing local assets with those on the Immich instance.</description>
    </item>
    
    <item>
      <title>UFW限定IPV4/IPV6/来源IP规则的简单记录</title>
      <link>https://ruohai.wang/202310/ufw-add-ipv4-only-rule/</link>
      <pubDate>Fri, 06 Oct 2023 20:24:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/ufw-add-ipv4-only-rule/</guid>
      <description>ufw防火墙在用基础的开放端口ufw allow 12345/tcp语法的时候，默认是同时开启ipv4和ipv6。
如果只想开启12345端口的ipv4访问
ufw allow proto tcp to 0.0.0.0/0 port 12345 同理，如果只想开启12345端口的ipv6访问
ufw allow proto tcp to ::/0 port 12345 如果想限定12345端口的来访ip范围
ufw allow from 192.168.1.0/24 to any port 12345 如果想限定12345端口tcp协议的来访ip范围
ufw allow proto tcp from 192.168.1.0/24 to any port 12345 查看ufw当前开放的所有端口、规则
ufw status verbose samba服务使用的端口和协议
To Action From -- ------ ---- 137,138/udp (Samba) ALLOW IN Anywhere 139,445/tcp (Samba) ALLOW IN Anywhere </description>
    </item>
    
    <item>
      <title>UFW防火墙对Docker容器不生效的问题解决</title>
      <link>https://ruohai.wang/202310/ufw-solve-conflict-with-docker/</link>
      <pubDate>Fri, 06 Oct 2023 19:35:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/ufw-solve-conflict-with-docker/</guid>
      <description>在debian下用docker部署的方式安装了immich，默认端口2283。
为了安全，肯定不会用默认端口。部署完immich简单调试没问题以后，就开始安装ufw管理端口。
但实测发现ufw未开启2283端口的情况，immich的web服务依然可以访问，也就是ufw对docker服务不生效。
找了下解决方案。
在/etc/docker目录下新建daemon.json，添加配置项：
{ &amp;#34;iptables&amp;#34;: false } 保存退出。
# 重载 systemctl daemon-reload # 重启docker systemctl restart docker # 重启ufw systemctl restart ufw 因为ufw和docker都会操作iptables，这个方案选择禁掉docker，以ufw为准。
参考文章 Docker 和 UFW 一起用可能会出现问题 https://zhuanlan.zhihu.com/p/628899663 </description>
    </item>
    
    <item>
      <title>Immich配置SSL证书开启HTTPS访问</title>
      <link>https://ruohai.wang/202310/immich-update-to-https/</link>
      <pubDate>Fri, 06 Oct 2023 19:34:41 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-update-to-https/</guid>
      <description>注意事项 配置ssl证书开启https公网访问，请务必注意数据安全。
immich服务目前没有密码错误多次登录时触发登录保护的功能，所以存在暴力破解的可能性。
建议用tailscale、ngrok、frp、cloudflare tunnel之类内网穿透工具。
第一步：申请证书 申请证书这里不做赘述，阿里云送的免费证书，或者let&amp;rsquo;s encrypt的证书都可以。
我用的反代工具是nginx，所以证书是是nginx格式。
一共两个文件:
domain.key domain.pem 第二步：安装nginx 我用的系统是debian，直接apt安装
apt install nginx nginx安装好以后，默认配置文件路径/etc/nginx。
如果没有这个目录，执行以下命令，会显示nginx的配置文件路径
nginx -t 第三步：上传证书 在/etc/nginx目录下新建文件夹ssl，然后用工具（比如winscp/sftp等）把两个ssl证书文件放到ssl目录下。
最终ssl证书的路径如下：
/etc/nginx/ssl/domain.key /etc/nginx/ssl/domain.pem 第四步：配置反代 进入目录/etc/nginx/sites-available，把默认的default配置文件备份，新建一个default文件。
# 进目录 cd /etc/nginx/sites-available # 备份 mv default default.bak # 新建 touch default 如果不懂为啥，就根据这个操作，如果懂，就根据自己的习惯操作。
用编辑器编辑default文件，录入一下内容，保存后退出。假定新端口是12345。
server { # 监听端口 12345 listen 12345 ssl; listen [::]:12345 ssl; # 服务名 server_name domain; # 因为需要上传照片视频，这里设定最大上传文件50GB client_max_body_size 50000M; # ssl证书路径 ssl_certificate ssl/domain.pem; ssl_certificate_key ssl/domain.key; # ssl session缓存和时间 ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # ssl加密的相关配置 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!</description>
    </item>
    
    <item>
      <title>Linux下给新硬盘分区并挂载</title>
      <link>https://ruohai.wang/202310/linux-partion-mount-disk/</link>
      <pubDate>Fri, 06 Oct 2023 10:56:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/linux-partion-mount-disk/</guid>
      <description>前言 老是忘记，查别人文章也麻烦，索性自己记录一下
分区 第一步：获取设备名 lsblk 也可以用
fdisk -l 这里假定新硬盘是/dev/sdb，用fdisk开始分区
fdisk /dev/sdb 执行以上命令后，会进入fdisk工具的命令界面，输入m可以查看使用手册。
第二步：删除旧分区（可选） 如果是旧硬盘，或者已经有分区的硬盘，需要先删除旧分区表信息，输入d
d 提示内容如下
Command (m for help): d
Partition number (1-3, default 3):
提示内容是当前有三个分区，编号1-3，请输入需要删除的分区的编号。
依次输入分区编号，会提示删除成功。
Partition 1 has been deleted.
全部删除后，进入下一步。
第三步：创建新分区 新建分区，输入n
n 提示内容如下：
Command (m for help): n
Partition type
p primary (0 primary, 0 extended, 4 free)
e extended (container for logical partitions)
p主分区，e扩展分区。选择主分区p
p 提示如下：
Partition number (1-4, default 1):
确定分区编号，默认1，直接回车默认即可，提示如下：
First sector (2048-3907029167, default 2048):</description>
    </item>
    
    <item>
      <title>开源自托管相册服务Immich的安装</title>
      <link>https://ruohai.wang/202310/immich-installation/</link>
      <pubDate>Thu, 05 Oct 2023 16:35:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/immich-installation/</guid>
      <description>前言 停用了google photos，虽然很早很早就开始用这个服务，但最近碰到了几件事，让我选择停用它。
权益缩水。从最初原图免费无限空间，缩水到高品质压缩图片免费无限空间，再缩水到免费15GB空间。不要相信云存储空间厂商的任何免费和永久的承诺，哪怕是google这样的大厂背书。 祸及gmail。存储空间缩水到15GB以后，这个15GB由gmail、photos、driver三个服务共享使用，意味着，如果因为photos上传图片过多，或者driver上传文件过多，耗尽了这15GB空间，会导致gmail无法使用，因为没有多余空间来收发邮件了。这种情况只有两个方案可选，清理photos和driver腾出空间给gmail使用，或者订阅google one扩充空间。如果选择订阅google one，一定要留意，如果哪个月订阅费用扣款失败，gmail会因为没有剩余空间而无法使用。 以上两点原因，尤其是第二点，导致我必须、立刻开始寻找替代方案。
其实几个月前开始折腾nas的时候我就有考虑自建相册服务，几个方案：群晖自带的photo station、moments、synology photo，或者第三方的lychee、piwigo、photo prism、librephoto、photoview。但了解和体验下来，有几个核心问题一直无解：
不支持h265/hevc的图片和视频。因为h265复杂的版权关系，h265的图片和视频（heic、heif)基本不支持查看和生成缩略图。群晖有解决方案，但需要登录群晖账号才能在套件商店下载解码包。黑群可以自己安装ffmpeg来实现对h265媒体的支持，但网上看到很多人反馈时灵时不灵，很让人头疼。 不支持自定义图库位置。我有一个庞大的、积累多年的照片文件夹，有自己的目录结构，如果想要导入到这些相册服务中去，只有一个办法：通过相册的导入入口。而且这些相册一般都会把媒体文件按照日期进行归档，破坏掉原有的目录结构。 目前我从google photos切换到了immich，不仅解决了我的所有痛点，而且它的web和app界面都几乎1:1的模仿google photos，上手使用毫无难度。
安装 我的安装环境是debian 12 stable（bookworm）。因为跑docker服务需要root权限（可以通过一些设置用非root跑），关于权限、用户的问题这里不再赘述，需要自行解决。
immich的安装步骤在【官网】有文档，英语阅读无障碍的话可以直接看官网。
注意事项： 安装需要占用5GB存储空间 immich自带的机器学习（图像主体识别、人脸识别）、视频转码非常占用资源，内存至少4GB cpu性能无要求，但更强的cpu，上传、转码、机器学习就会更快更效率，使用体验会更好 immich的视频转码支持qsv、nvenc、vaapi硬件加速 因为docker-hub被封，部署的时候拉镜像根本没速度，请改用国内镜像站，或者用VPN 写这篇文章的当下（2023/10/05），immich版本1.81，实测支持自定义图库位置，edit user界面有个external path设置项，可以填入自定义图库的位置。填写以后，immich从图库读取图片的metadata、生成缩略图、图像识别，不会变动原图库的目录结构和原图。 批量导入图片的方法请查看官网，入口：Bulk Upload (Using the CLI) 第一步：安装docker和docker compose。 apt install docker.io apt install docker-compose 第二步：在本地创建immich目录 这个目录只是用来下载immich的docker-compse配置文件和env配置文件，随便建在那边都行。
mkdir immich cd immich 第三步：下载两个配置文件 wget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml wget -O .env https://github.com/immich-app/immich/releases/latest/download/example.env 第四步：编辑参数。 用文本编辑器打开.env文件，1.81.1版本的默认内容如下
# You can find documentation for all the supported env variables at https://immich.</description>
    </item>
    
    <item>
      <title>Linux小主机（WS1608）折腾总结</title>
      <link>https://ruohai.wang/202310/ws1608-summary/</link>
      <pubDate>Wed, 04 Oct 2023 01:49:08 +0800</pubDate>
      
      <guid>https://ruohai.wang/202310/ws1608-summary/</guid>
      <description>前言 不知不觉，从4月份入手玩客云老母鸡，到6月份开始刷机折腾armbian，然后7月、8月爆肝写了几十篇博客来记录在linux下的一些基础的配置和软件安装，最后到9月、10月归于沉寂，已经有半年的时间。
时间过的真快啊。
玩客云这台小机器，刷入armbian以后，几个月用下来，优点如下：
价格便宜，只要25rmb 功耗极低，本体大概3~5w，挂两个2.5寸hdd硬盘盒也不超过10w，没有用电焦虑 armbian固件除了logo灯颜色其它完美适配，而且固件跟着armbian官方在维护更新，运行稳定 千兆网口没拖后退，下载和内网smb共享文件可以跑满usb2.0的带宽，峰值大概30M/s，够用 usb接口供电稳定，两个usb口，每个都挂上2.5寸hdd硬盘盒，稳定不掉线。这点对于需要24h挂着usb硬盘的场景非常非常重要 有sd卡槽，聊胜于无 刚拿到这台机器的时候，总想着给它刷各种各样的固件，armbian、openwrt、电视盒子、达菲等等，还想在armbian的基础上安装各种服务，挖掘它的可用性。但几个月以后就失去了兴趣，再多可可玩性，也得自己有需求才会有使用场景，目前我的小机器就是简单的当一个下载机和轻nas，安安静静的躺在角落。
这里简单记录一下，当下这台机器上我依然在高频使用的服务。
在用的服务 ddns-go
毋庸置疑这个服务是肯定需要装的，用ipv6+ddns+域名实现公网的访问。
nginx
用来做端口转发，装ssl证书实现https访问
file browser
简单的web端文件管理器
samba
局域网文件共享，必装
udevil
实现usb存储设备自动挂载
ufw
防火墙，只做了简单的端口管理
qbittorrent-nox
bt下载工具，当下载机必装，下热门资源很好用，冷门资源就算了
ttyd
web端的ssh工具，应急用一下
iperf3
用来局域网测速
navidrome
自建流媒体服务（类似qq音乐），很好用，pc客户端我用的sonixd，安卓客户端用substreamer和subtracks
speedtest-cli
用来外网测速
lm-sensors
查看芯片温度
smartmontools
查看usb外界硬盘的健康度
hugo
静态博客的本地环境，没有用hexo因为hugo安装配置很简单，主题也漂亮
git
用来配合hugo发布到github pages
tailscale
内网穿透方案，安装配置都很简单，装好以后简单测试了一下，方便好用。但我一直用的ipv6+ddns方案，保留tailscale只作为备用
准备用的服务 既然把机器当作轻nas使用，自然就要考虑到文件备份的安全性。提到文件备份，中年男人们肯定就不陌生了，著名的321原则：三个备份 + 两种介质 + 一份异地。
之前我常常取笑别人花钱买各种云盘服务保存自己那些数字垃圾，但当我碰到用了几十年的google photo服务，从当初的免费无限容量，缩水到压缩画质无限容量，到现在只给15GB免费容量，也不得不考虑用什么方案来保存自己每天生成的数字垃圾。尤其是作为google全家桶用户，gmail、photo、driver三者共享15GB的免费空间，当空间耗尽以后，会连累gmail被停用，无法收发邮件。
rclone
用来实现文件云端备份
rsync
用来实现文件多端同步备份
kopia
用来实现文件快照</description>
    </item>
    
    <item>
      <title>杭州半山公园望宸阁</title>
      <link>https://ruohai.wang/202309/diary-hangzhou-banshan-park/</link>
      <pubDate>Sun, 03 Sep 2023 20:33:45 +0800</pubDate>
      
      <guid>https://ruohai.wang/202309/diary-hangzhou-banshan-park/</guid>
      <description>今天去了一趟半山公园。
半山公园，全称杭州半山国家森林公园，在杭州拱墅区。
公园很大，有多条绿道徒步路线，可以根据自身体能和时间安排。我这次是奔着望宸阁去的。
公园免费开放，山顶望宸阁免费开放，但望宸阁每周一会闭阁维护。
开车导航目的地到半山公园即可，大门在明园路。车子直接开到公园大门，左右边就是半山医院/杭钢医院/浙医健杭州医院，医院里可以停车，收费5元每小时。
公园内交通有观光车，单程收费10元，直达山顶望宸阁。
不坐观光车的话，可以选择走车道，或者走台阶。
上山建议走台阶，因为近，但是需要注意蚊虫。下山建议观光车，也可以走车道下山。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>MacOS下窗口管理软件分享</title>
      <link>https://ruohai.wang/202308/macos-window-manager-app/</link>
      <pubDate>Wed, 23 Aug 2023 21:21:55 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/macos-window-manager-app/</guid>
      <description>从win10开始，系统默认窗口管理支持鼠标拖动窗口管理贴边自动最大化。我非常需要这个功能，但macos的窗口管理默认不支持，所以需要上网自己找解决方案。
简单来讲，需求如下：
鼠标拖动窗口贴顶边，窗口自动最大化，而且支持快捷键，比如cmd + ↑ 鼠标拖动窗口贴右边，窗口自动右半屏最大化，而且支持快捷键，比如cmd + → 鼠标拖动窗口贴左边，窗口自动左半屏最大化，而且支持快捷键，比如cmd + ← 说白了就是实现windows下的窗口管理的一些方便的模式。
在我吐槽「macos的窗口管理一坨💩」以后，朋友给我分享了两个可以实现我需求的app。
Tiles 软件官网地址：https://freemacsoft.net/tiles/
我目前用的就是这个，免费，好用，支持快捷键。
Rectangle 软件官网地址：https://rectangleapp.com/
这软件分普通免费版和pro收费版，看了下官网列出的功能列表，普通版应该够用，而且界面更漂亮。
但免费软件Tiles已经满足我的需求了，所以Rectangle就没尝试。
真的忍不住吐槽，macos下为什么快捷键那么多都是三键甚至四键啊，难道每个mac用户都是八爪鱼吗。</description>
    </item>
    
    <item>
      <title>MacOS下给终端添加alias</title>
      <link>https://ruohai.wang/202308/macos-add-alias/</link>
      <pubDate>Wed, 23 Aug 2023 04:17:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/macos-add-alias/</guid>
      <description>目前macos默认shell是zsh，简单记录下给zsh添加自定义命令。
打开终端，进入用户目录。
cd ~ 我的机器默认没有.zshrc的配置文件，新建一个。
touch .zshrc 然后在.zshrc中添加alias。
alias ll=&amp;#39;ls -l&amp;#39; alias la=&amp;#39;ls -al&amp;#39; 保存退出，然后载入配置文件
source .zshrc 到这里就完成配置了～
吐槽下，macos自带中午拼音输入法竟然连波浪线～都区分了中英文的不同格式，中文和英文下～的编码不一样，导致markdown格式下中文格式的～不能被正常识别。淦。</description>
    </item>
    
    <item>
      <title>直刷版（emmc）玩客云系统的备份和还原</title>
      <link>https://ruohai.wang/202308/ws1608-use-dd-to-make-img/</link>
      <pubDate>Thu, 17 Aug 2023 14:26:23 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ws1608-use-dd-to-make-img/</guid>
      <description>前言 其实之前已经写过一篇用dd制作系统备份镜像文件的文章，【Linux使用dd命令克隆磁盘（制作系统镜像）】。但写的有点啰嗦，直接改也不合适。索性重新写一篇简单的。
先定义一下两个名词：
当前系统：指装在玩客云emmc上的armbian 第三方系统：指装在u盘、sd卡上的玩客云armbian 用dd命令备份还原的原理和windows ghost一样，就是把整个emmc磁盘克隆，生成一个img镜像文件。要还原的时候，再用dd命令把img镜像文件写回emmc。
整个过程分成两步：备份 + 还原。备份可以在当前系统或第三方系统下操作，还原必须要通过第三方系统。
这篇文章中，我是在【当前系统】下备份，在【第三方系统】下还原。
准备工作 一个已经直刷armbian的玩客云（系统装在emmc） 备份操作需要准备一个移动硬盘或者存储U盘，因为生成的备份镜像大概1~2GB左右 还原系统需要准备一个已经刷了armbian的U盘或者sd卡 ssh连上玩客云机器 备份 先用lsblk命令确定分区信息和设备名称，输出结果如下
NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 465.8G 0 disk └─sda1 8:1 0 465.8G 0 part /mnt mmcblk1 179:0 0 7.3G 0 disk ├─mmcblk1p1 179:1 0 256M 0 part /boot └─mmcblk1p2 179:2 0 7G 0 part /var/log.hdd / mmcblk1boot0 179:16 0 4M 1 disk mmcblk1boot1 179:32 0 4M 1 disk zram0 253:0 0 494.</description>
    </item>
    
    <item>
      <title>Linux用crontab实现定时重启</title>
      <link>https://ruohai.wang/202308/crontab-schedule-reboot/</link>
      <pubDate>Thu, 17 Aug 2023 10:27:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/crontab-schedule-reboot/</guid>
      <description>前言 有这个需求是因为我的armbian小机器ws1608，在运行5~7天左右的时间之后，会出现ipv6的网络问题，表现就是明明只有一个网卡的情况下，出现了两个全局的ipv6地址，此时ipv6下无法访问外网，导致ddns-go无法【通过接口】的方式获取ipv6地址，如果选择【通过网卡】获取ipv6地址，则因为出现两个ipv6地址，需要手动指定第一个还是第二个。这就意味着每次等我发现出现这个bug以后，都需要人为介入来纠正。
这个问题正确的解决方案，应该是排查为什么每运行一段时间会出现俩ipv6的ip，但网上找了一圈，暂时没有合理的解释。
那就只能重启大法了，每周重启一次！
定时任务 linux定时任务有俩实现方案，用systemd或者crontab，这里选择用crontab。
有俩注意点：
系统重启需要root权限 设备需要支持软重启（比如我手上的ws1508的某个固件就不支持软重启只能拔电源） sudo crontab -e 添加一行，设定每周四的4点0分重启
0 4 * * 4 /sbin/reboot 参考文章 1.Linux crontab 命令 https://www.runoob.com/linux/linux-comm-crontab.html
2.Linux设置定时重启 https://cloud.tencent.com/developer/article/2227856</description>
    </item>
    
    <item>
      <title>MacOS系统下添加SMB共享文件夹到开机自动挂载</title>
      <link>https://ruohai.wang/202308/macos-smb-folder-auto-mount/</link>
      <pubDate>Wed, 16 Aug 2023 02:02:01 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/macos-smb-folder-auto-mount/</guid>
      <description>前言 最近一个月因为apple在搞教育优惠送这送那的，m2芯片乞丐版本的mac mini直接跌破3000块。这么多年来我一直都是Windows系统用户，对macos并没有什么兴趣，但看这么便宜的份上，冲动入手了一个。
我并不是一个唯Windows系统为尊的用户，也用过不少的linux发行版，用过的桌面系统有xfce、gnome、unity和深度dde，都觉得可以接受。但不得不说，第一次上手macos，还是碰到了不少别扭和拧巴的地方，而且很多之前熟悉的操作都要从头开始查找要怎么用。
比如开机自动挂载局域网里的smb共享文件夹。
挂载 快捷键command + K打开连接服务器的窗口，或者用鼠标点击顶部菜单栏的【前往】然后选择【连接服务器】。
输入smb的访问地址。smb共享协议的网址需要用smb://开头。
输入访问网址，点击【连接】，输入smb设置的账户密码就连接成功了。打开【访达】可以看到。
加入登录项 以上的操作只针对本次系统登陆状态下有效，系统重启以后，依然需要重新打开【连接服务器】窗口来添加smb文件夹。现在需要把smb共享文件夹设置为开机自动挂载。
网上找了一些设置方案，发现不同的macos版本竟然调整了设置入口，所以这里做简单记录。
打开【系统设置】，找到【通用】，然后在右侧找到【登录项】。
点击加号。
弹出新窗口，选择smb文件夹位置，最后确定即可。</description>
    </item>
    
    <item>
      <title>Linux下操作分区扩容</title>
      <link>https://ruohai.wang/202308/ws1508-use-parted-to-expand-storage/</link>
      <pubDate>Thu, 10 Aug 2023 04:01:36 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ws1508-use-parted-to-expand-storage/</guid>
      <description>前言 有这个需求是因为我一开始插在ws1508上的是一张2GB容量而且io性能极差无比的老旧sd卡，用dd命令克隆的整个磁盘镜像以后，烧录到了一根16GB容量、使用先进的usb3.0接口协议的U盘棒子上。但烧录到新棒子上的系统的分区表信息也是1:1克隆的，依然是老的2GB容量，意味着剩下了14GB的闲置空间。
现在的分区信息大概是这样
|--256MB启动分区--|--1.5GB系统分区--|--14GB闲置空间--| 目录结构
sda 14.4G ├─sda1 256M ## 启动分区 └─sda2 1.5G ## 系统分区 这种情况下，只需要调整系统分区/dev/sda2的结束点（end），把14GB闲置空间拼接上去就行了。
一开始我是准备在win下用disk genius来操作的，毕竟图形化界面简单易上手。但用dg操作的时候一直有报错无法执行，算了，换到linux下，用命令行界面！
前期准备 旧系统盘用dd命令克隆整个磁盘为img镜像文件，然后把img烧录到新的u盘棒子上，最后把新棒子插入设备，通电开机，连上ssh。
扩容 用parted工具，先获取基础信息。
调用parted工具
parted 此时命令提示符会以(parted)开头，意味着进入了parted工具界面。
先查看剩余空间
print free 打印出来的信息如下
Number Start End Size Type File system Flags 32.3kB 16.8MB 16.7MB Free Space 1 16.8MB 285MB 268MB primary fat16 bls_boot 2 285MB 1862MB 1577MB primary ext4 1862MB 15.5GB 13.6GB Free Space 这里可以看到分区2的结束点（end）是1862MB，从1862MB到15.5GB这13.6GB空间都是空闲空间（free space）。
查看存储设备的分区表
print /dev/sda 打印出来的信息如下
Number Start End Size Type File system Flags 1 16.</description>
    </item>
    
    <item>
      <title>Syncthing设置只同步照片和视频文件</title>
      <link>https://ruohai.wang/202308/syncthing-sync-media-files-only/</link>
      <pubDate>Tue, 08 Aug 2023 22:41:34 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/syncthing-sync-media-files-only/</guid>
      <description>syncthing这软件的设定是用来多个设备之间保持【文件夹】内容同步，默认情况下，选择了要同步的文件夹以后，就会把文件夹内的所有内容一股脑儿进行同步，这会导致很多缩略图或者某些需要忽略系统文件也同步出去。
我的使用场景下，想要的是之同步照片和视频内容，其他的都不需要同步。这里用到的解决方法是：使用syncthing的忽略模式。
这里对synchting忽略模式的语法不做解释，直接上最后的配置规则。
常见的手机照片格式：png，jpg，HEIC，jpeg 常见的手机视频格式：mp4，HEVC 常见的动图格式：gif 好了，现在的需求是，只同步以上这些格式的文件，其他统统忽略
!**.jpg !**.jpeg !**.png !**.HEIC !**.gif !**.mp4 !**.HEVC ** </description>
    </item>
    
    <item>
      <title>微软给你发钱啦~</title>
      <link>https://ruohai.wang/202308/diary-edge-browser-reward/</link>
      <pubDate>Sun, 06 Aug 2023 19:19:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/diary-edge-browser-reward/</guid>
      <description>昨晚在mac mini上装edge浏览器的时候又看到了microsoft账号上的积分，只要鼠标移到浏览器右上角账户头像，点一下，就会出现悬浮窗，提示你有多少microsoft reward。这个提示存在很久了，但我从没在意。
除了pc端，手机上我也用的edge浏览器，在edge中用bing搜索的时候偶尔手机会突然震动一下，然后app左上角的头像位置会出现一个金币转圈圈的动画。这个动静也出现很久了，但我依然没在意。
直到昨晚换mac mini时候，我终于好奇点进去看了一眼，然后发现：
微软给你发钱啦~ 微软积分商城兑换中心【官网地址】有一个非常值得兑换的商品：京东礼品卡！只要9600积分，就可以兑换50rmb的京东礼品卡！
京东礼品卡是硬通货，就算自己不在京东消费，也可以9~9.5折在网上卖给有需要的人。
获取积分的方法 之前我的主力浏览器是edge，主力搜索引擎是bing，从edge刚发布就开始使用至今，攒下了11000多积分，从没想过这竟然还能赚钱，而且这积分竟然还挺值钱。
所以在官网看下了积分的获取方式。
不过先申明：这积分只是类似翻箱底找出旧衣服发现兜里还有5块钱，是一种小惊喜，不要太严肃的对待这事。刷这个积分发不了财的。也不必为了这几毛几分的蝇头小利，特地去改变自己的浏览器和搜索引擎使用习惯。
第一个：微软积分商城页面，有每日任务，大概75积分。
第二个：使用必应（bing）搜索，pc端和移动端分开计分。
第三个：手机端装bing客户端，好像有个每日签到积分。
第四个：在微软商店里消费，具体参考官方给的积分规则。
总结就是，每天把所有积分全薅到大概也就200分，9600积分需要48天，平均每天1块钱。😄</description>
    </item>
    
    <item>
      <title>杭州动物园最近的人气顶流：马来熊</title>
      <link>https://ruohai.wang/202308/diary-hangzhou-zoo/</link>
      <pubDate>Sat, 05 Aug 2023 23:09:49 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/diary-hangzhou-zoo/</guid>
      <description>最近杭州动物园的两只马来熊非常的火，不仅国内人气高，甚至美英澳的新闻都做了报道。
只是因为它用俩后腿人立起来的时候，屁股上会出现明显的褶子，看着像玩偶服皮套的褶，所以网友调侃：它该不会是工作人员假扮的吧。
就这么点事竟然火了，火的莫名其妙。网友们果然都很闲啊。
正好我也闲，今天大热天，跑去杭州动物园看看。
前俩月去杭动的时候这俩熊还默默无闻，但今时不同往日，现在已经是人气顶流。
所以一个🐻的命运啊，不仅要靠自己的奋斗，也要&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>对折腾Armbian小机器进入了不应期</title>
      <link>https://ruohai.wang/202308/diary-boring-days/</link>
      <pubDate>Fri, 04 Aug 2023 23:11:59 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/diary-boring-days/</guid>
      <description>捡垃圾玩armbian俩月，觉得啥都新鲜，这两天进入不应期了。
自有小主机，折腾来折腾去，最后就是下载机 + 文件共享。拿着锤子找钉子没有意义，自己用不上的服务，装它干啥。
╮(╯▽╰)╭
明天准备出门走走，正好杭州动物园的马来熊最近话题度挺高的。
就是这天太热了。</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）在OpenWrt固件基础上安装和配置Samba</title>
      <link>https://ruohai.wang/202308/ws1408-samba-use-guide/</link>
      <pubDate>Wed, 02 Aug 2023 22:35:07 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ws1408-samba-use-guide/</guid>
      <description>前言 ws1408只有一版openwrt固件，要在openwrt的基础上安装samba，和armbian有点不太一样，这里做简单记录。
其实在oenwrt的webui上也有入口可以安装软件和配置，但我实际用下来总是会有各种问题。所以最后放弃了webui安装和配置的方法，直接手搓。真的，自己手搓比webui上勾勾点点成功率高多了。
要安装软件，记得先换源，指路：迅雷赚钱宝一代（WS1408）的OpenWrt可用源分享
安装samba 先更新软件仓库
opkg update 查找软件
opkg list | grep samba 安装软件
opkg install luci-app-samba4 添加系统用户 ws1408的openwrt固件比较精简，默认只有root账户，想新增系统用户需要安装useradd。
opkg install shadow-useradd 添加用户jack。这里指定jack这个用户无法登录，因为只是用来做samba的用户，不会登录系统。
useradd jack -s /bin/false 如果jack这个用户需要登录系统，那上面的命令中去掉-s /bin/false，然后给他设置密码
passwd jack samba中添加用户 添加了系统用户以后，需要在samba中添加用户。下面这条命令敲完后回车，根据系统会提示设置密码
smbpasswd -a jack 如果想要删除samba用户，命令应该如下
smbpasswd -x jack 但我实际使用下来，这条删除用户的命令会一直提示处理失败。所以有效的办法是用nano打开/etc/samba/smbpasswd这个保存用户信息的文件，删除或者清空里面的内容。
配置共享文件夹 samba配置文件的路径是/etc/samba/smb.conf，但默认的这个smb.conf配置文件只是一个软链接，实际指向了/var/etc/smb.conf。我尝试直接修改这个软链接版的smb.conf文件，但每次一重启samba服务就会被重置。那正好，原始文件不动，咱另立门户。
# 进目录 cd /etc/samba # 把原文件重命名 mv smb.conf smb.conf.default # 新建一个配置文件 touch smb.conf 然后用nano编辑smb.conf，填写以下内容。因为我对samba共享的安全性要求略高，所以限定smb最低版本是smb2，限定只有jack可以访问，而且禁止匿名访问。
#======================= Global Setting ======================= [global] workgroup = WORKGROUP security = user server role = standalone server map to guest = never server min protocol = SMB2 #======================= Share Definitions ======================= [ShareFolder] comment = share comment path = /path/to/folder create mask = 0755 directory mask = 0755 valid users = jack browseable = yes writable = yes read only = no public = no guest ok = no 完成以上的配置以后，重启samba。</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）用USB转TTL工具刷机（救砖）</title>
      <link>https://ruohai.wang/202308/ws1408-use-ttl-to-flash/</link>
      <pubDate>Wed, 02 Aug 2023 17:36:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ws1408-use-ttl-to-flash/</guid>
      <description>前言 迅雷赚钱宝一代，型号ws1408，nand存储 + 256mb的内存。目前可用的第三方固件都是提取的官方固件的内核制作而成的各种openwrt。
我找了恩山论坛的【这个固件】，在用晶晨刷机软件amlogic usb burning tools线刷的时候，习惯性的选择了全部擦除。
最后成功刷机。但是想要再次线刷的时候，发现晶晨软件已经无法识别到设备了，也就是变砖了。
虽然这设备几乎没啥可玩性，放海鲜市场上卖10块估计还得包邮，但我还是想给它抢救一下。
最后在恩山上找到了用ttl救砖的方法，这里做个简单记录。
准备 一个usb转ttl的转接头和杜邦线。我买的是一款CH340G型号的转接头，指路 → CH340G土豪金USB转TTL模块RS232转串口模块刷机升级小板送杜邦线 有了转接头以后，需要安装驱动。驱动程序在卖转接头的淘宝店就有提供下载，在文章末尾也提供了百度盘下载。 电脑上安装了软件putty，【下载地址】 双公头usb数据线一根 拆机 要刷机，首先需要把ws1408的主板拆出来。
撕掉贴纸，卸掉螺丝，撬开外壳，卸掉中间的螺丝，然后撬开底盖。
再卸掉四个螺丝，然后取下主板保护盖。
然后就可以把主板取下来了。
安装驱动 先下载驱动，驱动可以找淘宝商家拿，所以在文章末尾找。
注意，需要先把转接头插到电脑上，要不然安装驱动的时候会提示找不到设备。
压缩包解压后，双击setup.exe
然后点击安装即可。
安装成功后，在电脑的设备管理中查看是否多了一个usb串口设备。
刷机 先确定一下主板上ttl针脚的定义，从左往右编号1234，1是TX，2是GND，4是RX。
接下去要连接主板和转接头。主板的tx对应转接头的rx，主板gnd对应转接头的gnd，主板rx对应转接头tx。接好后，usb头插入电脑。
先打开电脑的设备管理，查看usb转接头的硬件名称，这里看到是COM3。
然后电脑上打开putty，连接类型选Serial，Serial line填COM3，Speed填115200。然后点击Open打开终端。
这个时候主板接电源通电，注意使用dc电源通电而不是插usb通电，usb会干扰putty识别设备。通电后putty终端会开始代码跑屏，立刻按下回车键暂停，然后在终端中输入update后敲回车键确认，此时终端中会显示进入了线刷模式。
到这一步，就可以在电脑上打开usb burning tool软件，导入镜像包，记得选择擦除flash选择普通擦除，然后点开始。
最后用双公头连接主板和电脑，usb burning tool就会检测到硬件，开始烧入固件。
到这里就大功告成了，用usb转ttl工具刷机结束~
😄
刷机工具 CH340G_USB驱动 → 链接: https://pan.baidu.com/s/1QDyUuiPgCpQ89RU6ofAjLg 提取码: hdc3 WS1408可用的openwrt19固件。这般固件是纯净版本的openwrt19，没有装任何插件。这版固件在刷机的时候可以选择完全擦除，不影响二次线刷。 → 链接: https://pan.baidu.com/s/18b57mh514RjHhG-1SKC0wg 提取码: xbt9 </description>
    </item>
    
    <item>
      <title>Syncthing基础使用：实现增量备份/增量同步</title>
      <link>https://ruohai.wang/202308/syncthing-set-ignore-delete/</link>
      <pubDate>Wed, 02 Aug 2023 03:13:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/syncthing-set-ignore-delete/</guid>
      <description>脱水精简结论 Q：syncthing是否支持增量备份（增量同步）？
A：支持。被动接收一方在设置中把ignoreDelete勾选启用即可。
以下就是水内容 syncthing官方对这个参数的建议是不建议使用支持。
因为syncthing官方团队的意图是用它实现多个设备之间对某个文件夹的完全同步，如果syncthing匹配中的一方开启了ignoreDelete，容易出现无法理解的同步冲突场景。
简单来讲，假定有A和B两个设备，B设备开始了ignoreDelete，那如果A设备上删除了某文件以后，B设备上并不会同步删除，此后如果B修改了这个文件，那是否需要同步到A设备上。这里就出现了一个违背【完全同步】设计初衷的冲突场景。
具体设置 如果你确定自己需要用syncthing来实现增量备份的功能，那现在就开始设置吧。
简单来讲，ignoreDelete的逻辑是：
如果a设备会进行删除操作，但b设备不需要同步a的删除操作，那b设备需要开启ignoreDelete。
在webui上依次点击操作——高级
在文件夹选项中选择需要实现增量备份的文件夹
找到ignoreDelete参数，勾选以后保存。
到这里就实现增量备份的设置惹。
🎉
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>用FFmpeg拼接行车记录仪的视频片段</title>
      <link>https://ruohai.wang/202308/ffmpeg-concat-video-clips/</link>
      <pubDate>Wed, 02 Aug 2023 00:10:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ffmpeg-concat-video-clips/</guid>
      <description>前言 行车记录仪的视频具有相同编码、相同分辨率、相同视频格式的特点。行车记录仪往往都是设定视频每n分钟为一个片段，比如我的行车记录仪设定就是1分钟一个片段。
假定现在有一段2小时的行车记录，那就意味着120个视频片段。我的需求是把这120个片段拼接成一个长视频，然后加速10~20倍，最后形成一个10分钟左右时长的小视频，然后扔youtube上存档。
一开始我用剪映来处理，但实际使用过成功，无论是素材的管理，还是全选120个素材进行统一加速调节，或者最终的视频导出，都算不上是好的体验。
正好这种同编码、同分辨率、同视频格式的视频拼接，用ffmpeg来实现非常方便且快速。所以拆分步骤，用ffmpeg来处理视频拼接，再把拼接出来的长视频导进剪映处理。
ffmpeg官网wiki有非常详细的操作指导，啃完文档以后，实测单纯拼接视频确实很快。这里就做简单的操作记录和英翻中。
拼接 首先，要有一份包含了所有视频片段完整文件名的文档（怎么生成这个文档看后面的脚本），mylist.txt，内容如下：
file &amp;#39;/path/to/file1.mp4&amp;#39; file &amp;#39;/path/to/file2.mp4&amp;#39; file &amp;#39;/path/to/file3.mp4&amp;#39; 然后用命令拼接视频
ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4 也可以用相对路径的格式，mylist.txt文档和视频文件放在同一个目录，内容如下：
file &amp;#39;file1.mp4&amp;#39; file &amp;#39;file2.mp4&amp;#39; file &amp;#39;file3.mp4&amp;#39; 拼接视频命令，相对路径的情况下，-safe 0可以省略
ffmpeg -f concat -i /path/to/mylist.txt -c copy output.mp4 参数解释：
-f 用来指定输入/输出的文件格式。 -i 用来指定输入的文件 -c 用来指定编码，copy就是直接复制，不重新编码 好了，到这里用ffmpeg拼接视频的过程就完成了，因为-c copy不涉及编码转换，所以任务处理速度非常快，基本取决于硬盘的读写速度。
生成文档 官网提供了脚本用例，用来生成mylist.txt这种符合格式的、包含了视频文件完整路径的文档。以下举例中的wav调整为自己视频的格式即可。
windows cmd命令
(for %i in (*.wav) do @echo file &amp;#39;%i&amp;#39;) &amp;gt; mylist.txt windows powershell命令
foreach ($i in Get-ChildItem .</description>
    </item>
    
    <item>
      <title>赚钱宝二代（WS1508）直刷固件的初始化设置</title>
      <link>https://ruohai.wang/202308/ws1508-init-setup/</link>
      <pubDate>Tue, 01 Aug 2023 21:33:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ws1508-init-setup/</guid>
      <description>前言 不知不觉进入8月了，生活就这么碌碌无为又怅然若失。
ws1508的可用固件分为三种：
nand直刷armbian u盘启动armbian u盘启动openwrt 其中nand直刷armbian方案，在刷入固件以后，并不是开箱即用，还需要做一些初始化设置，这里做一些记录。
nand直刷固件原帖指路：【赚钱宝2代 Armbian 直刷包】软件随便装，可以apt-get，可以挂甜糖～
初始化 首先就是重新调整分区大小
resize2fs /dev/data 因为原固件没有预装ntp，需要手动设置时区
timedatectl set-timezone Asia/Shanghai 再手动设置时间，为避免后续update出异常，这里要求时间比正确时间晚一天。比如今天是2023-08-01
timedatectl set-time 2023-07-31 换源/etc/apt/source.list，这里选择用清华的源。固件是debian 10（buster），默认不支持https，所以这里用http。如果想上https，在清华debian源页面有提供设置方法，可以自行查阅。
deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free 还是换源，这次是文件/etc/apt/source.list.d/armbian.list，依然用清华的，依然是http。
deb http://mirrors.tuna.tsinghua.edu.cn/armbian buster main buster-utils buster-desktop 然后就可以执行apt update更新软件仓库了。但更新的时候会报错public key is not available，一般缺失的两个公钥是0E98404D386FA1D9和6ED0E7B82643E131，这里需要用命令重新导入公钥。注意俩公钥的编号，需要根据实际报错的公钥编号来调整。
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0E98404D386FA1D9 apt-key adv --keyserver hkp://keyserver.</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）的OpenWrt可用源分享</title>
      <link>https://ruohai.wang/202307/ws1408-openwrt-use-guide/</link>
      <pubDate>Sun, 30 Jul 2023 23:58:50 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1408-openwrt-use-guide/</guid>
      <description>前言 周末回了一趟乡下，耽误了搞机。😄
ws1408只有一版openwrt固件，没有armbian。但之前俩月我都在折腾armbian，对openwrt没啥经验，这里简单记录下这两天折腾openwrt的内容。
首先openwrt也是linux魔改，意味着除了webui之外，还以ssh连上用命令行操作。
其次，这里要着重讲一下，ws1408用usb burning tool软件刷openwrt固件的时候，
【擦除flash】选项选【普通擦除】，千万不要选【全部擦除】
选后者会导致机器变砖，或者导致机器刷成功以后无法再刷机，必须要用usb ttl工具。
换源 首先是ws1408的软件源配置，固件自带的源是supes.top，访问不稳定，先换掉。这里用ustc中科大的源。
src/gz openwrt_core http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/targets/at91/sama5/packages src/gz openwrt_base http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/base src/gz openwrt_luci http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/luci src/gz openwrt_packages http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/packages src/gz openwrt_routing http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/routing src/gz openwrt_telephony http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/telephony 注意ws1408要选at91/sama5和arm_cortex-a5_vfpv4这俩硬件分支的源。至于为啥我也不清楚，实际用下来确实没问题，试着装了samba4，一切正常。
换源以后，就可以在webui中点击更新列表，如果web端操作依然报错，可以ssh进系统以后执行以下命令
opkg update </description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）可用固件分享</title>
      <link>https://ruohai.wang/202307/ws1408-firmware-share/</link>
      <pubDate>Fri, 28 Jul 2023 20:30:01 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1408-firmware-share/</guid>
      <description>因为捡垃圾，手上有了两台赚钱宝一代，型号ws1408，接近10年龄的老机器了，硬件配置现在看来已经严重落伍。
但电子垃圾到了垃圾佬手上，但凡它还有一点点残余价值可以压榨，都不会把它丢进垃圾桶。
在恩山论坛一阵搜索以后，目前确定，ws1408能用的固件，只有openwrt。有线刷和u盘/tf卡卡刷两个版本。
openwrt可以装很多插件来实现qbittorrent、samba、ddns之类的功能，虽然百兆网口限制了用它当旁路由，但拿来当个samba文件共享服务器和下载机也是不错的。
因为原帖是要求回复可见固件获取地址，为了遵守社区规则，我这里只做帖子引路：
更新直刷包2023.03.27 赚钱宝1代WS1408 旁路由openwrt 22.03.3 内存卡或者U盘启动 线刷和卡刷两个版本都在这个帖子里下载。
这篇文章简单记录下线刷的注意事项：
双公头usb线 usb burning tool软件，最好是v2.1.6.8版本，因为其它版本存在一个bug，固件太大刷入成功后校验时间过长会直接跳任务失败 线刷的openwrt固件 update@2023/07/30：注意用usb burning tool软件刷机的时候，【擦除flash】一栏，务必选择【普通擦除】，不要选【完全擦除】。选后者会导致机器成砖，或者刷机成功以后下次刷机无法被usb burning tool软件识别，必须要上usb ttl工具。我踩坑了，已经下单usb ttl，各位准备刷机的朋友们注意。 实际刷机步骤注意事项：
机器先不要插usb线，我实测usb的供电会被这机器识别为通电，然后会自动开机 usb burning tool软件里选好固件，然后直接点击【开始】 用卡针捅进reset孔，并保持住 先插上usb线，如果识别为通电也无妨，usb burning tool会检测到硬件并开始刷机，如果未识别为通电，就正好插上电源 然后等usb burning tool完成刷机，提示成功以后拔usb线、拔电源。再捅上网线和电源，等开机，然后在路由器网关界面查看新增设备的ip，在浏览器中访问该ip即可。
线刷固件默认用户root，默认密码lanlan。
到此刷机完成，可以开始折腾卵路由，不是，软路由惹~
😄</description>
    </item>
    
    <item>
      <title>今天又捡了几个电子垃圾</title>
      <link>https://ruohai.wang/202307/i-picked-up-some-rubbish-today/</link>
      <pubDate>Fri, 28 Jul 2023 17:26:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/i-picked-up-some-rubbish-today/</guid>
      <description>今天收到了一个快递，是昨天在闲鱼上淘的几个电子垃圾：赚钱宝一代（ws1408）两个，赚钱宝二代（ws1508）两个。
感觉自己和迅雷赚钱宝系列磕上了。😄
一共4个设备，打包了网线和充电头，40块钱包邮，这个价格很难不让人心动啊！
赚钱宝一代ws1408 在恩山论坛搜了一下，这机器太老了而且硬件配置比二代ws1508更缩水
百兆网口，当旁路由都显得鸡肋 256MB的ram，😔 1GB nand flash rom，存储空间倒是给的很大方，但是受nand分区大小限制，最多只能识别80MB。 有1个tf卡槽 有一个usb2.0接口 目前能用的固件只有一版opewrt，支持直刷。下午尝试了刷机，都没啥难度，很快就刷上了openwrt。
那目前来看，ws1408的扩展可玩性的方案，就只能基于openwrt了。还好openwrt的可装的软件也挺多的，虽然灵活性上比不过armbian什么都能手搓，但总比没有固件要好。
赚钱宝二代ws1508 ws1508是老朋友了，之前已经30包邮收过两个，硬件配置：
百兆网口 usb2.0接口一个 nand flash，多少容量不记得了。但能直刷nand的固件最多只能识别4GB 512MB ram，比一代的内存容量翻倍 ws1508因为接口少了，所以可玩性差很多，唯一的usb2.0接口需要用来插启动u盘，导致没有任何扩展存储的可能。目前的玩法，刷armbian或者刷openwrt。
这次捡的俩ws1508里，有一个是emmc版本的，这算捡漏了，emmc版本有直刷固件，那一个金贵的usb2.0接口终于可以释放出来了。</description>
    </item>
    
    <item>
      <title>Linux下ssh.socket模式变更SSH端口（终结篇）</title>
      <link>https://ruohai.wang/202307/linux-change-ssh-port-under-ssh-socket/</link>
      <pubDate>Fri, 28 Jul 2023 10:55:34 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-change-ssh-port-under-ssh-socket/</guid>
      <description>前言 讲真我之前已经写文章记录过了怎么修改ssh的默认端口，不管是ssh.service还是ssh.socket，两个运行模式下的方法都有。
但是 是的，但是，我重装了这么多次的armbian，在ssh.socket模式下调整了n次默认端口，最后发现，无论怎么弄，都会出现问题，弄不好还容易搞得ssh都连不上。
行吧，经过我反复验证，得出最终有效的修改方法，100%有效，绝对有效。
如果你有更好的办法，可以twitter上给我发dm。
方案一：切换到ssh.service 是的，抛弃ssh.socket，回到传统的ssh.service，不要再去管什么socket什么listenstream，就用ssh.service，方便又好用。
# 滚他妈的socket systemctl disable --now ssh.socket # 欢迎service systemctl enable --now ssh.service 然后在/etc/ssh/sshd_config改成自己喜欢的端口就行了。
方案二：我TM就是要用ssh.socket 很好，你清高，你很棒。
办法有没有？还真有，需要在之前的方案上增加几个步骤，算是曲线救国。在ssh.socket运行的状态变更配置，最大的问题是它可能会突然异常停掉，或者重启ssh服务但新端口不生效。所以要让新端口生效的办法，就是先下手为强，上来就停掉ssh.socket，在它不运行的时候改配置，改完了再启动它。
第一步：禁用ssh.socket这个小可爱，换成ssh.service
# 滚他妈的socket systemctl disable --now ssh.socket # 欢迎service systemctl enable --now ssh.service 第二步：配置ssh.socket端口。是的，曲线救国，先tmd换成ssh.service，保证ssh.socket彻底停止，然后配置ssh.socket的端口。
# 新建目录 mkdir -p /etc/systemd/system/ssh.socket.d # 新建端口配置文件 touch /etc/systemd/system/ssh.socket.d/listen.conf 在listen.conf中添加如下内容，记得把12345改成自己喜欢的端口，保存退出。
[Socket] ListenStream= ListenStream=12345 修改完以后，重载服务
systemctl daemon-reload 第三步：从ssh.service换回ssh.socket 是的，所谓的曲线救国就是在这里~
# 老朋友完成任务了，送走 systemctl disable --now ssh.service # 把小可爱ssh.socket接回来 systemctl enable --now ssh.socket 完成这步曲线救国以后，可以查看下ssh的状态，看是否换成了新端口。
systemctl status ssh 第四步：到上面一步，ssh.</description>
    </item>
    
    <item>
      <title>玩客云WS1608控制LED灯的颜色</title>
      <link>https://ruohai.wang/202307/wky-turn-on-led-color/</link>
      <pubDate>Fri, 28 Jul 2023 07:52:03 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wky-turn-on-led-color/</guid>
      <description>玩客云这设备有个红、绿、蓝三色led灯，在刷入armbian系统以后，这个灯的颜色就会显示异常，往往是一直显示红色。
如果要自动动手调整led灯的颜色，控制命令如下（需要root用户执行）
echo 1 &amp;gt; /sys/class/leds/onecloud:blue:alive/brightness echo 1 &amp;gt; /sys/class/leds/onecloud:green:alive/brightness echo 1 &amp;gt; /sys/class/leds/onecloud:red:alive/brightness echo 1是开，echo 0就是关。现在可以组合出多种颜色，蓝绿、红蓝、红绿、红绿蓝。😄
但这个设置重启后失效。╮(╯▽╰)╭</description>
    </item>
    
    <item>
      <title>Linux下从0开始部署WordPress（二）</title>
      <link>https://ruohai.wang/202307/wordpress-installation-guide-2/</link>
      <pubDate>Fri, 28 Jul 2023 06:36:23 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-installation-guide-2/</guid>
      <description>前言 上篇文章链接：Linux下从0开始部署WordPress（一）
上篇说到了apache2的安装与配置，一直想着继续完成wordpress的教程，但拖延症发作，😄
复习一下wordpress的安装步骤：
有一台主机或vps（系统选linux，这里以debian为例） 安装web server(选apache2) 安装数据库（选mariadb） 安装php 配置wordpress 这篇就写一下安装数据库吧！
安装数据库 wordpress官方对数据库的要求：
MySQL5.7或更高版本 MariaDB 10.3或更高版本。
sun公司自从被oracle收购以后，原来sun公司旗下的产品都变成了oracle公司的资产，开源社区对oracle也是唯恐避之不及，现在debian仓库里连mysql都没有了。我不想去下安装包，所以这里数据库方案选择用mariadb。
一键安装
apt install mariadb-server 安装完成后，先用数据库自带的mysql_secure_installation进行简单的安全加固。执行下面这个命令，接下去会出现6个交互对话，需要选择yes/no。
mysql_secure_installation 第一个问题：是否切换到unix_socket认证。这里指mariadb的root账户身份认证是用密码还是unix_socket。unix_socket在简中互联网上几乎搜索不到什么有用的资料，出问题了不好解决，所以选n，用密码认证。
Setting the root password or using the unix_socket ensures that nobody can log into the MariaDB root user without the proper authorisation. You already have your root account protected, so you can safely answer &amp;#39;n&amp;#39;. Switch to unix_socket authentication [Y/n] 第二个问题：是否修改root账户的密码。毫无疑问这里选Y。然后就是设置root账户的新密码了。
Change the root password? [Y/n] 第三个问题：是否移除匿名用户。选Y</description>
    </item>
    
    <item>
      <title>Linux下用dd进行磁盘测速</title>
      <link>https://ruohai.wang/202307/linux-disk-io-speed-test/</link>
      <pubDate>Fri, 28 Jul 2023 03:09:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-disk-io-speed-test/</guid>
      <description>前言 linux想要对磁盘进行测速，有几个方案，比如hdparm、fio，还有最简单的dd。
因为另外俩软件都要安装，而且我对测速结果的精度要求也不高，本着less is more原则，这里就用系统自带的dd来进行测试。
测速 开头先定义（解释）一下/dev/zero和/dev/null这俩设备。这俩官方名称叫伪设备，或者空设备，只用来做一些特殊用途。比如这里就用它俩来测磁盘的io性能。
/dev/zero，可以理解为无尽之水，只要从这个设备进行读操作，它就可以源源不断的提供空数据流。 /dev/null，可以理解为无尽黑洞，任何写入这个设备的数据，都会消失。 测试写速度：
dd if=/dev/zero of=/home/jack/testfile bs=500M count=1 oflag=direct 参数解释：
bs=500M, 数据块的大小，这里设定500MB。 count=1，指定多少个数据块，配合bs一起使用 oflag=direct，指定直接写入磁盘，不用缓存 测速以后得到结果：
测试读速度：
dd if=/home/jack/testfile of=/dev/null iflag=direct 测速结果如下：
参考文章 Linux如何查看与测试磁盘IO性能：https://www.cnblogs.com/mauricewei/p/10502539.html </description>
    </item>
    
    <item>
      <title>使用iPerf3进行局域网的简单测速</title>
      <link>https://ruohai.wang/202307/iperf3-use-guide/</link>
      <pubDate>Fri, 28 Jul 2023 00:48:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/iperf3-use-guide/</guid>
      <description>前言 之前文章写过在linux进行测速，但用的是speedtest-cli，这软件是用来测公网网速的，如果想测局域网网速，需要用到的软件是iperf3。
iperf3，纯命令行界面，真男人都用命令行。官网有详细的【使用手册】，但是全英文。啃完文档，使用过程做个简单记录。
iperf3的使用，需要用到两台机器，一台服务器server，另一台客户端client，服务器负责监听请求，客户端负责发送请求，最终完成局域网的测速。所以，需要准备两台机器，如果只有一台，可以考虑虚拟机。
如果想测试公网网速，也可以，iperf3官网有公开的测速服务器。
安装 我手上的两台机器，一台是windows，一台是debian linux。
先记录windows下的安装。官网下载地址：下载地址。下载以后解压即可，里面有俩文件。
再记录下debian下的安装，简单，仓库就有。安装过程中会弹窗问你要不要把iperf3设置为守护进程（daemon）并设置为开机启动，根据自己需求选择yes或者no。
apt install iperf3 到这里，两台电脑的下载/安装就完成了，接下去开始使用！
使用 首先，启动服务端server，用来监听请求。这里我先用windows做服务端，命令行工具使用系统自带的cmd。-s指定为服务器server模式，-p指定监听的端口。
# 进入文件夹 cd C:\Users\Jack\Desktop\iperf-3.1.3-win64 # 以服务端模式启动。 iperf3.exe -s -p 33333 然后在另一台电脑上启动客户端并发送请求，我这里客户端电脑是debian。-c指定为客户端client模式，后面跟局域网内服务器电脑的ip地址，-p是指定服务端的接收端口。
iperf3 -c 192.168.1.4 -p 33333 跑完以后就可以看到局域网内两台机器的测速结果了。如下图，测速结果914Mbps，几乎跑满千兆带宽，说明我的两台电脑之间的交换机、网线、路由器没有出现网速瓶颈。
两台电脑如果要变换服务器和客户端的角色，只要反向使用-s和-c的参数即可，或者参考下面的进阶使用。
进阶使用 以上只是用最简单的命令完成了局域网内两台电脑之间的tcp测速。
如果想测速时间从默认的10s调整为60s，通过客户端电脑的-t参数设定
iperf3 -c 192.168.1.4 -p 33333 -t 60 如果想测试udp的速率，客户端电脑的命令需要添加-u指定udp协议，并且用-b指定带宽，我的内网是千兆，这里设定-b 1000M，如果不设定带宽，默认是1Mbps。
iperf3 -c 192.168.1.4 -u -b 1000M -p 33333 其它进阶使用参数，直接看手册吧。
-p, --port #，Server 端监听、Client 端连接的端口号； -f, --format [kmgKMG]，报告中所用的数据单位，Kbits, Mbits, KBytes, Mbytes； -i, --interval #，每次报告的间隔，单位为秒； -F, --file name，测试所用文件的文件名。如果使用在 Client 端，发送该文件用作测试；如果使用在 Server 端，则是将数据写入该文件，而不是丢弃； -A, --affinity n/n,m，设置 CPU 亲和力； -B, --bind ，绑定指定的网卡接口； -V, --verbose，运行时输出更多细节； -J, --json，运行时以 JSON 格式输出结果； --logfile f，输出到文件； -d, --debug，以 debug 模式输出结果； -v, --version，显示版本信息并退出； -h, --help，显示帮助信息并退出。 Server 端参数： -s, --server，以 Server 模式运行； -D, --daemon，在后台以守护进程运行； -I, --pidfile file，指定 pid 文件； -1, --one-off，只接受 1 次来自 Client 端的测试，然后退出。 Client 端参数 -c, --client ，以 Client 模式运行，并指定 Server 端的地址； -u, --udp，以 UDP 协议进行测试； -b, --bandwidth #[KMG][/#]，限制测试带宽。UDP 默认为 1Mbit/秒，TCP 默认无限制； -t, --time #，以时间为测试结束条件进行测试，默认为 10 秒； -n, --bytes #[KMG]，以数据传输大小为测试结束条件进行测试； -k, --blockcount #[KMG]，以传输数据包数量为测试结束条件进行测试； -l, --len #[KMG]，读写缓冲区的长度，TCP 默认为 128K，UDP 默认为 8K； --cport ，指定 Client 端运行所使用的 TCP 或 UDP 端口，默认为临时端口； -P, --parallel #，测试数据流并发数量； -R, --reverse，反向模式运行（Server 端发送，Client 端接收）； -w, --window #[KMG]，设置套接字缓冲区大小，TCP 模式下为窗口大小； -C, --congestion ，设置 TCP 拥塞控制算法（仅支持 Linux 和 FreeBSD ）； -M, --set-mss #，设置 TCP/SCTP 最大分段长度（MSS，MTU 减 40 字节）； -N, --no-delay，设置 TCP/SCTP no delay，屏蔽 Nagle 算法； -4, --version4，仅使用 IPv4； -6, --version6，仅使用 IPv6； -S, --tos N，设置 IP 服务类型（TOS，Type Of Service）； -L, --flowlabel N，设置 IPv6 流标签（仅支持 Linux）； -Z, --zerocopy，使用 “zero copy”（零拷贝）方法发送数据； -O, --omit N，忽略前 n 秒的测试； -T, --title str，设置每行测试结果的前缀； --get-server-output，从 Server 端获取测试结果； --udp-counters-64bit，在 UDP 测试包中使用 64 位计数器（防止计数器溢出）。 参考文章 iperf官网用户手册（英文）：iPerf user docs iperf3：网络测试工具及测试用例+参数详解 </description>
    </item>
    
    <item>
      <title>Hugo实现插入Bilibili的视频</title>
      <link>https://ruohai.wang/202307/hugo-add-bilibili-video-support/</link>
      <pubDate>Thu, 27 Jul 2023 21:28:20 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/hugo-add-bilibili-video-support/</guid>
      <description>前言 hugo博客想要插入视频，肯定是和图片一样的模式，先把视频上传到第三方视频网站（youtube、bilibili），然后通过嵌入代码的形式实现在博客内展示。
bilibili官网就提供了【嵌入代码】，但实测不是简单的直接复制粘贴就可以。
找到了两个方案，我实测以后，通过hugo的shortcodes功能实现的方式比较好，一劳永逸，而且也不用改安全设置。
我推荐方案一。
方案一：shortcodes shortcodes方案原理类似创建代码模板，然后页面直接调用模板来实现视频嵌入。
在博客的根目录的layouts目录下新建shortcodes目录，然后新建文件bilibili.html。实际路径是/layouts/shortcodes/bilibili.html。
在bilibili.html中添加如下内容：
&amp;lt;div style=&amp;#34;position:relative; padding-bottom:75%; width:100%; height:0&amp;#34;&amp;gt; &amp;lt;iframe src=&amp;#34;//player.bilibili.com/player.html?bvid={{.Get 0 }}&amp;amp;page={{ if .Get 1 }}{{.Get 1}}{{ else }}1{{end}}&amp;#34; scrolling=&amp;#34;no&amp;#34; border=&amp;#34;0&amp;#34; frameborder=&amp;#34;no&amp;#34; framespacing=&amp;#34;0&amp;#34; allowfullscreen=&amp;#34;true&amp;#34; style=&amp;#34;position:absolute; height: 100%; width: 100%;&amp;#34;&amp;gt; &amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt; 然后在博客的markdown文件的内容中插入视频：
{{&amp;lt; bilibili BV号 &amp;gt;}} 或 {{&amp;lt; bilibili BV号 选集号 &amp;gt;}}
到此，就实现在markdown/静态页面中嵌入视频代码了。
方案二：直接插入html代码 bilibili的每个视频下方的分享方式里都提供了嵌入代码，直接复制粘贴到markdown页面。
复制出来的代码如下：
&amp;lt;iframe src=&amp;#34;//player.bilibili.com/player.html?aid=530985056&amp;amp;bvid=BV1Gu411L7iR&amp;amp;cid=1197648479&amp;amp;page=1&amp;#34; scrolling=&amp;#34;no&amp;#34; border=&amp;#34;0&amp;#34; frameborder=&amp;#34;no&amp;#34; framespacing=&amp;#34;0&amp;#34; allowfullscreen=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;/iframe&amp;gt; 但这段代码默认不会渲染成html，需要修改hugo的安全设置。
编辑config.toml（新的hugo版本配置文件应该是hugo.toml），添加如下内容。
[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true 现在就可以看到视频嵌入成功了。但是b站默认的视频嵌入代码可能展示的样式不太好看，可以参考方案一中的代码自行调整。
参考文章 youtube/vimeo/bilibili/西瓜的视频嵌入方式：【在 gohugo 中如何嵌入视频 】 bilibili的视频嵌入方式：【利用hugo的短代码功能插入b站视频并且自适应】 </description>
    </item>
    
    <item>
      <title>今天吃鸭！</title>
      <link>https://ruohai.wang/202307/%E4%BB%8A%E5%A4%A9%E5%90%83%E9%B8%AD/</link>
      <pubDate>Thu, 27 Jul 2023 19:30:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/%E4%BB%8A%E5%A4%A9%E5%90%83%E9%B8%AD/</guid>
      <description>😄</description>
    </item>
    
    <item>
      <title>Linux下UFW的简单配置和使用</title>
      <link>https://ruohai.wang/202307/linux-ufw-setup/</link>
      <pubDate>Wed, 26 Jul 2023 13:25:45 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-ufw-setup/</guid>
      <description>前言 之前在armbian上用的防火墙是firewalld，基础使用挺方便的。但后来发现另一个防火墙软件，ufw，使用更简单更方便，至少命令行就简短了一大截。而且每次新增规则、删除规则，也不需要在一次次重载。使用体验上比firewalld不知道高到哪里去了。😄
ufw是ubuntu默认的防火墙方案，用来简化iptables的配置。
如果只是用防火墙的基础功能，可以试试ufw。
使用 第一步就是安装了，没法难度，一条命令搞定
apt install ufw 安装好以后，查看启用状态。ufw默认是不启用的。
ufw status 启用ufw。ufw启用以后，默认放行所有出的流量，但拒绝所有进的流量。所以在启用以后，千万不要着急退出终端，务必要留意放行ssh服务，但ssh默认规则是22端口，如果是自定义的ssh端口，则需要放行指定端口。
ufw enable 放行端口，不指定协议的话默认tcp + udp
ufw allow 12345 放行端口并指定tcp协议
ufw allow 23456/tcp 放行服务
ufw allow samba 删除已经添加的规则。有两个办法，第一步是获取规则的数字编号，然后删除指定编号的规则。注意这里删除编号，每次删除一个以后，剩下的规则会重新排序，编号会变，所以每次删之前都要重新获取最新的数字编号。
# 查看规则的编号 ufw status numbered # 删除指定编号的规则 ufw delete 4 第二种删除已有规则的方法就比较简单。假定当前有个规则是allow 80/tcp，直接delete即可。
ufw delete allow 80/tcp 高阶功能 更多高阶使用方法，可以查看ubuntu官方的帮助手册，→ https://help.ubuntu.com/community/UFW</description>
    </item>
    
    <item>
      <title>Linux下udevil无法自动挂载exfat格式U盘的问题解决</title>
      <link>https://ruohai.wang/202307/udevil-doesnt-amount-exfat-bugfix/</link>
      <pubDate>Tue, 25 Jul 2023 21:06:10 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/udevil-doesnt-amount-exfat-bugfix/</guid>
      <description>前言 之前文章提到过，我在linux下用来实现u盘、移动硬盘自动挂载的方案是udevil。这个方案的好处是安装了udevil以后，几乎是0配置，随便插任何u盘、移动硬盘都可以自动挂载。而且udevil的软件包依赖关系非常简单，不会出现本体几百kb但是需要几个mb的依赖包。
但是今天碰到了一个bug，就是udevil无法自动挂载exfat格式的u盘，换ext4、ntfs都正常，只有exfat不行。
照例上网搜解决方案，最后在官方repo的issue里找到了。
bugfix 先贴上两个解决方案的链接：
Udevil dont mount usb-stick (exfat fs) with linux kernel 5.5.3 udevil doesn&amp;rsquo;t mount exfat media 可以留意到其中一个issue的发布时间是2014年，也就是从2014至今，快10年的时间了，这个bug都没有修复。
解决方案就是编辑udevil的配置文件，路径/etc/udevil/udevil.conf，找到default options的配置块，其中有一条default_options_exfat记录，把这条记录中的noempty参数删掉，然后重启udevil服务即可。
修改完以后重启udevil服务。注意命令中的jack改成自己linux系统的用户账户名。
systemctl restart devmon@jack.service </description>
    </item>
    
    <item>
      <title>Linux使用dd命令克隆磁盘（制作系统镜像）</title>
      <link>https://ruohai.wang/202307/linux-use-dd-to-clone-disk/</link>
      <pubDate>Mon, 24 Jul 2023 06:57:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-use-dd-to-clone-disk/</guid>
      <description>前言 最近经常玩电子垃圾，之前都是刷别人制作好的初始系统镜像img文件，每次刷机都要进行一些基础配置：替换固件中的一些文件、设置账户和密码、改国内源、改ssh配置、装基础软件。
但因为我经常重刷，每次重刷又要把上面提到的基础配置流程走一遍，少说也要半个小时。重复了一次又一次以后，我肯定要考虑自己制作镜像文件了，类似早年的windows ghost，把完成了基础配置的系统直接做成镜像，下次刷机就不用再无意义的重复了。
linux下实现这个功能，用dd命令。
准备工作 目的是备份整个系统盘 假定系统盘是/dev/sda 要另一个u盘或者移动硬盘做备份盘，这里假定备份盘为/dev/sdb。 制作镜像 第一步：插上备份盘，用命令lsblk确认系统盘和备份盘的名称，系统盘为/dev/sda，备份盘为/dev/sdb。
第二步：挂载备份盘到/mnt
mount /dev/sdb /mnt 第三步：制作镜像。
dd if=/dev/sda of=/mnt/sda_bakcup.img 这是最简单的备份方式，不考虑任何其它参数（比如bs和count），就是1:1的备份，如果系统盘是2GB（指整个盘的大小，不是指已使用的空间），那制作出来的镜像也就是2GB。
如果想制作的镜像是压缩包，减少占用空间，这里以xz格式为例
dd if=/dev/sda | xz &amp;gt; /mnt/sda_backup.img.xz 优化 dd命令可以通过增加-bs和-count来优化传输速度和镜像大小。
先看下bs和count的定义：
bs=bytes：指block size，用来设定多少了bytes为一个block，系统就以一个block为数据单位进行读取和写入。可以分成ibs和obs两个参数分别设定读和写。
count=blocks：设定整个dd任务读取多少个blocks的数据。
bs用来设定每次读写的数据量，读取指定数据量为一个块（block）到缓存，然后从缓存把指定的数据量写到备份盘。无论是u盘、hdd还是ssd，一般大文件的连续读写速度都是远远高于小文件的随机读写，所以这个值可以设置的大一些。但也要根据自己的实际情况调整，比如小文件特别多时，可以分开设定读的数据量（ibs）和写的数据量（obs），更好的优化速度。
count用来设定读取多少个块（block）以后停止读取。如果这个值留空，默认全盘克隆，也就意味着原盘20G，生成的镜像也是20G，原盘如果200G，镜像就是200G，所谓1:1复制。但实际其实只需要克隆数据就可以了，没有使用的空白空间不需要写到镜像里，比如200G的盘，实际只使用了8GB，假定bs=1M，计算以后可得count应该是8192，考虑到空间冗余，可以设定count=9000，那生成的镜像文件就是9000M，不会出现无意义的空白空间占用镜像体积。
另外还可以整合xz、gzip之类的压缩命令，把镜像生成为压缩包，减少镜像文件的体积。但要注意，压缩需要cpu算力性能的支持，如果cpu性能孱弱（比如我的ws1508），使用xz命令以后会爆炸式的增加dd制作镜像的时间。所以cpu性能弱的就不用考虑整合xz命令。
xz命令可以通过-T增加线程数，默认是1。 增加三个参数以后的例子：
dd bs=1M count=1400 if=/dev/sda | xz -T3 &amp;gt; /mnt/backup-20230724.img.xz ╮(╯▽╰)╭
参考文章 1： https://www.runoob.com/linux/linux-comm-dd.html</description>
    </item>
    
    <item>
      <title>VSCode插件Remote-SSH的使用与体验</title>
      <link>https://ruohai.wang/202307/vscode-remote-ssh-learn-to-use/</link>
      <pubDate>Sun, 23 Jul 2023 02:29:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/vscode-remote-ssh-learn-to-use/</guid>
      <description>前言 久闻vscode插件remote-ssh的大名，很多人用这个组合来进行远程开发。但作为一个水货前java web程序员，我之前并没有兴趣去了解它，一个是因为vscode做java web的ide功能太孱弱，另一个是我当时的工作并不需要我随时oncall上线写代码改bug。
但最近我不是闲下来了嘛，而且经常在用linux，正好有机会可以了解一些错过的热点。
配置 首先当然是在vscode里安装remote-ssh插件了。没啥难度，在扩展商店里搜remote-ssh，排第一那个插件，安装！排在后面的remote-explorer之类插件不用管，等需要的时候vscode会自己安装。
安装完以后，vscode侧边栏会出现一个新的图标，就是remote-ssh的入口惹。
但现在还暂时不能用，需要先配置远程主机的rsa密钥认证，实现免密登录。
这里再简单记录以下配置过程。
先确保windows已经安装了openssh，方法是打开cmd，输入ssh并回车，看是否有命令提示。没安装的话网上搜以下windows下安装openssh，教程很多。 生成rsa密钥、linux中sshd_config文件的配置，我之前已经写过了，【Linux下配置RSA公钥认证登录】。
我本地电脑使用的是windows，文章我也写过了，【Windows下用CMD实现SSH连接】。
完成上面几步之后，点击vscode侧边栏的remote-ssh入口，就可以看到配置好的远程主机了。
选择主机，右键或者点击主机名右侧的小图标，选择当前窗口或者新窗口打开后，短暂的rsa密钥认证之后，就完成ssh远程访问主机了。
连接成功以后。就可以点击侧边栏的【打开文件夹】或者按快捷键ctrl+p，选择需要打开的文件。
选完文件夹之后（我这里直接选了根目录/），然后就可以把这个远程目录在vscode中当作本地文件夹来使用了。 后记 没有体验之前，一直不明白很多人夸赞的vscode + remote-ssh具体是干嘛用的，到底是怎么个远程开发法。今天完成了安装配置和使用，终于明白了，它就是类似用ssh协议把远程主机的指定目录映射到本地当作本地文件夹使用，就像smb/samba和webdav，只是限定了文件管理器和ide都是vscode。它甚至可以直接映射远程linux主机的根目录/。所谓远程开发，也就是本地vscode + 远程主机上的项目文件。
那我想，有没有可能，就不限制于vscode和remote-ssh，而是和smb/samba、webdav一样，通过ssh协议，真的把远程目录映射到本地，作为一个本地文件夹使用，这样的话，ide就可以随便选了。
搜了下，还真有这样的方案，叫做sshfs-win，项目地址：https://github.com/winfsp/sshfs-win</description>
    </item>
    
    <item>
      <title>Linux下从0开始部署WordPress（一）</title>
      <link>https://ruohai.wang/202307/wordpress-installation-guide/</link>
      <pubDate>Sat, 22 Jul 2023 21:51:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-installation-guide/</guid>
      <description>前言 虽然上一篇文章说我炸了，哦不是，我悟了，以后不用linux了。但奈何我还有好几篇软件/服务的安装记录没有写，比如这篇wordpress的部署安装。
wordpress的安装教程网上多如牛毛，本来也不差我这一篇。但我在wordpress这个坑，不是，这个软件上耽搁了十多年，有很大的原因正是网上的教程多如牛毛。十多年前如此，现在依然如此。
wordpress官方有著名的5分钟安装教程，但这个教程前提是已经搭好了环境。很多热心网友写了很多教程，但大部分在记录的时候都省略了很多细节且毫无条理，有很多一上来就让装宝塔面板、让装xmapp。NO，这些都不是我想要的，我想要一个从一个干净的linux系统开始一步步记录的，我想要的是一个小白按照这篇文章一步步操作就能完成搭建自己的wordpress。
wordpress说白了就是一个php网站模板，既然是网站，就需要一些配套的服务，简而言之，搭建wordpress，分为5个步骤：
有一台主机或vps（系统选linux，这里以debian为例） 安装web server(选apache2) 安装数据库（选mariadb） 安装php 配置wordpress 因为内容比较多，所以准备分成几篇来写。这篇的主要内容是：apache2的安装和配置。
前期准备 有一台linux主机，或者vps。这里以debian为例。
安装apache2 web server可选nginx或者apache2，这里以apache2为例。
apt install apache2 等命令跑完以后，在浏览器中访问主机的地址，http://host-ip，看是否显示apahce2的欢迎页面。
默认到这一步就完成了apache2的安装，但这里有一些进阶内容（如何修改apache2配置文件），如果没有兴趣看的话，恭喜你，下面内容都不用看了！
进阶内容 apache2的网站根目录默认路径是/var/www/html，有很多教程确实就会把wordpress安装到这个目录下。但这有两个问题，一个是我想自定义网站目录方便管理（假定/data/wordpress），二是var目录下涉及root权限。
要自定义网站目录，就要编辑apache2的配置文件，路径/etc/apache2，目录结构如下：
apache2.conf是总配置文件，一般不动 网站配置文件放在sites开头的两个文件夹下，其中sites-available是可用的配置，sites-enabled是实际生效的配置。 sites-enabled里面的的那个默认文件000-default.conf只是个软链接，真实文件在sites-available 所以合理的配置方法是：在sites-available修改或者直接新建，然后把配置文件通过软链接放到sites-enabled使其生效 那就开始配置吧！这里选择删掉默认的那个000文件，新建wordpress.conf，方便辨认和管理。
# 进目录 cd /etc/apache2/sites-available # 删掉默认文件 rm 000-default.conf # 创建新文件 nano wordpress.conf 添加如下内容，保存后退出。网站默认80端口，端口要自定义的话改掉80。
&amp;lt;VirtualHost *:80&amp;gt; DocumentRoot /data/wordpress &amp;lt;Directory /data/wordpress&amp;gt; AllowOverride none Require all granted &amp;lt;/Directory&amp;gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &amp;lt;/VirtualHost&amp;gt; 然后创建软链接
# 进目录 cd /etc/apache2/sites-enabled # 创建软链接 ln -s .</description>
    </item>
    
    <item>
      <title>我悟了~</title>
      <link>https://ruohai.wang/202307/i-boomed/</link>
      <pubDate>Sat, 22 Jul 2023 17:56:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/i-boomed/</guid>
      <description>翻看了闲鱼捡垃圾的记录，还有网心云的收益记录，开始折腾armbian应该是从6月18号开始，今天是7月22号，算起来一个月多4天。
但给我的感觉是最近半年似乎都在折腾armbian/debian/linux。
今天又是准备刷机，但不是给ws1608刷，不是给ws1508刷，是给闲置了两年多的intel nuc11pahi5刷，准备刷个debian。
但一下午都在翻车，从中午12点开始，翻车到傍晚5点，整整5个小时。一开始是忘记了给x86刷机的U盘只是做引导 + 系统镜像的作用，不像armbian小主机那样u盘是启动盘+系统盘二合一。后来是debian netinst版本在装机的时候必须要联网，这我能理解，而且我已经在虚拟机里装过好多次了，虽然联网下载软件确实有点耗时，但之前每次耗时大概也就5~20分钟左右。不过下午在nuc上安装的时候，联网下载的预计时间竟然离谱的要3~4小时甚至一度出现了天（D）这个时间单位，卧槽我明明已经选择了国内ustc的镜像站啊，马勒戈壁。再然后我依然用netinst的镜像安装但是这次选择不选镜像站而是跳过这一步！结果还没来得及称赞自己机智就被debian打了脸，离线安装以后竟然连open ssh server都没有，意思是ssh都没法连。既然netinst版翻车，我换完整版吧，完整版（dvd）的体积竟然达到了惊人的3.7GB。作为debian衍生的ubuntu server才1.7G啊。我估计完整版里应该是塞了所有的桌面环境吧。
到这一刻我对debian的厌恶已经达到了顶峰，为什么要有必须联网安装的netinst版，为什么完整版要塞那么多东西进去，为什么不能像ubuntu那样分出各种flavor的单独安装包和单独的server版本。马勒戈壁。
(╯‵□′)╯︵┻━┻
然后我觉得自己悟了（i boomed），获得了inner peace。我拆掉了nuc和它硕大笨重的电源适配器，重新装进包装盒，拆掉了显示器，拆掉了ws1508，删掉了虚拟机里的debian，重置了vps上的debian，把各种线缆绕好再用捆扎带邦好统统放进收纳箱。
只保留了一台ws1608当作qbit下载机器和samba文件服务器。
看了下时间，7月22号。
不玩linux了。</description>
    </item>
    
    <item>
      <title>Linux下user is not in the sudoers file问题的解决</title>
      <link>https://ruohai.wang/202307/linux-sudo-previlege-error-fix/</link>
      <pubDate>Sat, 22 Jul 2023 01:52:09 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-sudo-previlege-error-fix/</guid>
      <description>前言 最近linux使用的越来越频繁，对用户、组、权限开始慢慢多了一些了解，慢慢就从之前root一把梭改成用禁掉root登录 + 低权限账号配合sudo进行系统管理。
但这样谨慎的操作的日常使用中碰到了一些问题，比如在vps和自己的虚拟机上安装debian时，从root切换到低权限账户（假定是jack），用sudo会提示jack is not in the sudoers file，甚至在root账号下也会提示sudo: command not found。
这种情况之之前在用ubuntu和armbian的时候没见过啊，搜了一些解决方案，这里做简单记录。
报错：sudo: command not found 这个报错通常情况下是因为sudo没有安装。讲真我也用过好多linux发行版（在虚拟机里简单体验），这还是第一次见到连sudo都没装的。
apt install sudo 报错：jack is not in the sudoers file 网上有一些劣质的文章里说这个报错的解决方案是在/etc/sudoers加一条。
jack ALL=(ALL:ALL) ALL NO，不是这么改的。不是直接给用户授权，而是给sudo组授权，通过sudo命令来让低权限用户临时使用root权限。
先确认/etc/sudoers配置文件里有没有这一条，没有就加上去，保存退出。
%sudo ALL=(ALL:ALL) ALL 然后执行以下命令，把用户jack添加到sudo组。
usermod -aG sudo jack 到这里就完成配置了。默认jack是低权限账户，需要root权限时通过加sudo命令来授权。</description>
    </item>
    
    <item>
      <title>这个10多年的坑我今天终于把他趟平了~</title>
      <link>https://ruohai.wang/202307/wordpress-i-nailed-it/</link>
      <pubDate>Fri, 21 Jul 2023 22:10:19 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-i-nailed-it/</guid>
      <description>说起来大学的时候就想自己折腾wordpress了，但毕竟不是计算机专业，网上的教程搜了好几天，从vps到域名，从环境搭建到参数配置，各种wordpress五分钟教程琢磨了好几天，愣是没搞明白。
这件事就这么搁置了，一搁置就是这么多年。因为之前受的折磨给我留下的太深的伤害，所以之后再弄博客，选hexo选typecho选hugo我都不会去选wordpress。
但今天心血来潮，准备把这个坑填了。
说来惭愧，虽然这些年中间我也转行当了几年水货程序员（java web），但今天弄wordpress，十多年前的那种茫然无措的感觉再一次体验到了。
但是现在，right now，我搞定它了~
明天我就写一篇【从0开始动手搓一个wordpress网站】的教程，要为wordpress的安装教程正本清源！让完全没有编码经验的小白也可以按部就班的完成搭建！
😄</description>
    </item>
    
    <item>
      <title>Linux下CIFS设置开机自动挂载smb共享文件夹</title>
      <link>https://ruohai.wang/202307/cifs-auto-mount-at-linux-start-up/</link>
      <pubDate>Fri, 21 Jul 2023 00:37:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/cifs-auto-mount-at-linux-start-up/</guid>
      <description>前言 前两天写过一篇用cifs挂载smb共享文件夹的文章，但那篇文章中多有疏漏，本来直接在那篇文章中update补漏修正就行，但最近懒了，直接择重点重写一篇。
linux挂载smb共享文件夹涉及到很多权限分配的设置，比如smb服务端设置的用户和组、本地分配的用户和组、是不是指定文件和文件夹的默认权限。如果实在搞不清，那就直接root:root和0777一把梭，但千万而且一定要意识到root和0777的潜在风险。
设定 注意下面出现的配置文件中的ip地址、用户名、组名、密码都要根据自己的情况做修改。😄
设定本地用户都是jack，所属的组是jack-group 设定的smb共享文件夹的访问地址是//192.168.1.1/share，访问用户smb，访问密码123456 设定本地挂载smb共享文件夹的路径是/mnt/share 挂载 linux下安装cifs-utils后，挂载局域网smb共享文件夹，注意-o参数中别忘记加上iocharset=utf8以避免中文乱码的问题，uid和gid用来指定挂在目录分配的用户和组。
mount -t cifs //192.168.1.1/share /mnt/share -o username=smb,password=123456,iocharset=utf8,uid=jack,gid=jack-group 取消挂载
umount /mnt/share 开机自动挂载 编辑/etc/fstab文件，添加一行：
//192.168.1.1/share /mnt/share cifs credentials=/home/jack/.cifs_creds,file_mode=0755,dir_mode=0755,iocharset=utf8,uid=jack,gid=jack&amp;#39;s_group 0 0 注意：
smb访问账户的用户名和密码，建议单独新建一个文件来保存而不是明文写在fstab。我这里新建/home/jack/.cifs_creds。认证文件的格式如下： username=smb password=123456 # 下面这一栏可以不要 domain=WORKGROUP domain一栏可选，不填的话系统会自动猜（意味着猜不中就无法挂载），一般默认都是WORKGROUP uid=jack,gid=jack&#39;s_group，这是指定挂载的smb共享文件夹的本地用户和组分配给谁、给哪个组，如果没有指定uid和gid，默认就是root:root。 file_mode=0755,dir_mode=0755，这俩很好理解，文件的权限和文件夹的权限，0755什么意思不再赘述，不懂得话0777一把梭。 iocharset=utf8用来处理中文乱码问题 编辑完/etc/fstab，执行以下命令使配置生效：
# 重载 systemctl daemon-reload # 重新挂载 mount -a OK，大功告成~
😄</description>
    </item>
    
    <item>
      <title>Linux报错Read-only file system的问题处理</title>
      <link>https://ruohai.wang/202307/linux-read-only-filesystem-bugfix/</link>
      <pubDate>Wed, 19 Jul 2023 17:35:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-read-only-filesystem-bugfix/</guid>
      <description>前言 吐槽完赚钱宝二代（ws1508）的鸡肋配置以后，今天还是不太甘心，想来想去，最后给它刷了支持nand的那版固件，基于debian 10（buster），内核3.10。
这版固件有很多先天不足：
内核太老 只能识别4GB的nand存储空间（虽然我俩机器的包装盒上都标了32GB的nand存储） debian 10（buster）已经EOL，源仓库已经不再更新，里面的包都太老了 但如果能接受以上这些缺点，似乎也算是一个不错的选择。毕竟那个珍贵的usb2.0接口需要用来外挂数据盘。
装samba测试了一下，可以跑满百兆带宽，也不会出现缓存写满以后卡io导致系统假死的问题。但就算跑满了百兆也就10~12MB/s而已，不堪大用。
但是 没错，重点来了，系统直刷nand，我体验了2天以后，最大的问题是：nand很容易出现坏块！！！！
这个问题非常致命，当系统检测到nand坏块以后会报错errors，然后这版固件/etc/fstab配置的挂载参数中，有一个errors=remount-ro，也就意味着一旦使用过程中碰到坏块的block，整个系统立刻就会重新挂载为只读（readonly）模式保护数据。
而赚钱宝二代这玩意是2015~2016年的设备，产品定位就是为了跑pdcn，至少是7年的老矿机了，nand出现坏块几乎是必然。
解决方案 系统盘进入只读保护模式以后，任何写操作都会报错，提示如下：
Read-only file system 解决办法就是文件系统修复。先用df -hT查看根目录挂载的分区和格式。
Filesystem Type Size Used Avail Use% Mounted on udev devtmpfs 231M 0 231M 0% /dev tmpfs tmpfs 48M 4.0M 44M 9% /run /dev/data ext4 2.8G 795M 1.9G 30% / tmpfs tmpfs 238M 0 238M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock tmpfs tmpfs 238M 0 238M 0% /sys/fs/cgroup tmpfs tmpfs 238M 4.</description>
    </item>
    
    <item>
      <title>赚钱宝二代（WS1508）通过USB HUB扩展存储</title>
      <link>https://ruohai.wang/202307/ws1508-support-usb-hub/</link>
      <pubDate>Tue, 18 Jul 2023 22:57:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1508-support-usb-hub/</guid>
      <description>update@2023-07-19：用usb hub外界数据盘没必要，俩盘公用一个usb2.0接口，会卡i/o，256m的系统盘缓存跑完了以后写数据到移动硬盘，会导致系统卡死。还是加10块钱上玩客云吧，这玩意妥妥的就是一电子垃圾。
迅雷赚钱宝二代（ws1508）的硬件配置非常鸡肋：
百兆网络就不说了，跑满速也就12.5MB/s，这是它的极限了，都跑不满usb2.0接口的带宽。 早一些的批次内置存储是nand flash，虽然容量给的很大方，比如我淘的2个都标称32GB nand flash，但是有个卵用啊，因为截至目前根本就没有支持nand闪存的好用的固件。恩山论坛上唯一一个支持nand直刷的固件，是基于debian 10（buster）而且内核3.10，试着刷了几次，问题太多了。 usb2.0接口只有一个。接口只是usb2.0还不是最气人的，最气人的是usb接口只给了一个。在机内nand存储不可用的情况下，只能用u盘启动，意味着这唯一的usb接口就只能用来插系统盘了，根本没法扩展存储。 那不用nand直刷固件，用魔改的玩客云固件吧，稳定是稳定，但毕竟是魔改的，目前用下来有一个bug：电源管理有问题，不支持通过命令关机和重启。想关机想重启，只能拔电源。 这么些天ws1508折腾下来，算是毫无收获，拿到设备第一天得出的结论依然有效：这就是电子垃圾。不仅是个电子垃圾，还毫无性价比。现在这机器的价格大概10~15元左右，问题是这价格闲鱼个人卖家还不够付邮费，商户卖家至少10个才包邮。比起来，25~30块一台的玩客云（ws1608），多10块钱，就多了8GB emmc存储 + 1个usb2.0接口 + 千兆网口 + hdmi接口 + 稳定更新的armbian固件 + 稳定的openwrt固件，这多花的10块钱简直是性价比爆表了啊。
但是 对的，这里出现了转折。但是，昨天晚上我躺着睡觉的时候，突然灵光一闪：
你说这个ws1508，它支持usb hub扩展吗？ 之前也不是没考虑过这个方案，但毕竟是魔改固件，大致看了下启动脚本，里面的启动顺序是十六进制编码写死的，用usb hub的话，会不会无法识别呢。
今天起床以后，立刻就开始了验证。为了减少多次转接带来的带宽损失，这里usb hub用的是usb3.0版。
实际测试下来，结论是：
它支持usb hub扩展！ 但实际使用过程中也碰到了一些问题，这里做简单记录：
我曾尝试过不用u盘启动，而且把系统镜像写进2.5寸hdd的移动硬盘然后直接插到ws1508的usb口上，启动失败。失败一次以后，我没有再继续尝试，暂时不清楚是我的系统镜像没写好还是其它原因 用usb hub转接，插一个u盘，启动成功，和u盘直插没区别 用usb hub转接，插一个u盘，启动成功后，再插上移动硬盘，一切正常，移动硬盘可以正常挂载使用 用usb hub转接，插一个u盘（/dev/sda）启动成功后，再插一个移动硬盘（/dev/sdb），正常使用的情况下，断电再通电后机器自启，能成功启动并进入系统。但是，这里问题来了：两个盘的盘符编号顺序变了，u盘变成了/dev/sdb，移动硬盘变成/dev/sda。 虽然两个盘的顺序发生了变化，但系统运行正常，功能没有任何影响。/etc/fstab中设置开机自动挂载用的是blkid，所以盘符编号发生变化并不会有什么影响。 虽有最终结论就是：
ws1508可以用usb hub扩展存储！ 能扩展存储，那可玩性就多了一个：下载机，一个u盘做启动盘，一个大容量移动硬盘做数据盘。
其实之前没有用usb hub扩展时，我考虑过3个方案：
系统直接刷进大容量移动硬盘，一盘两用。但试了一次没成功就放弃了。 系统刷进大容量u盘/sd卡/tf卡，依然是一盘两用。但闪存盘不是容易丢数据么。 用cifs-utils挂载局域网里的smb共享文件夹，把这个文件夹当下载盘。这个方案应该可行，但这不是脱裤子放屁么。如果我有一台24小时运行的主机做smb共享，那直接用那台主机当下载机不就好了。 当然，还有个最最最简单的方案：
用nand直刷的那版固件 没错，用nand直刷固件，这样usb接口就空出来了，就可以接大容量移动硬盘惹~
虽然那版固件很老，但目前debian 10（buster）还是有仓库源的，还是能通过apt install安装应用，只是仓库里的软件版本比较老而已。如果只是做下载机，软件老不老的没啥影响，说不定老软件稳定性更好bug更少。
😄</description>
    </item>
    
    <item>
      <title>Linux更新源时提示the public key is not available问题解决</title>
      <link>https://ruohai.wang/202307/apt-update-public-key-error/</link>
      <pubDate>Mon, 17 Jul 2023 15:02:31 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apt-update-public-key-error/</guid>
      <description>手上的赚钱宝二代（ws1508）尝试刷入了【唯一一个支持nand flash的版本】，这版固件是基于debian10/buster，内核3.10，不论是debian版本还是内核都比较老。
刷入系统，启动成功以后，根据帖子内容进行了简单的基础配置，然后操作apt update，很快就出现了错误提示。
Err:4 http://mirrors.ustc.edu.cn/debian buster-backports InRelease The following signatures couldn&amp;#39;t be verified because the public key is not available: NO_PUBKEY 0E98404D386FA1D9 NO_PUBKEY 6ED0E7B82643E131 Reading package lists... Done W: GPG error: http://mirrors.ustc.edu.cn/debian buster-backports InRelease: The following signatures couldn&amp;#39;t be verified because the public key is not available: NO_PUBKEY 0E98404D386FA1D9 NO_PUBKEY 6ED0E7B82643E131 E: The repository &amp;#39;http://mirrors.ustc.edu.cn/debian buster-backports InRelease&amp;#39; is not signed. N: Updating from such a repository can&amp;#39;t be done securely, and is therefore disabled by default.</description>
    </item>
    
    <item>
      <title>Linux下安装DDNS-GO</title>
      <link>https://ruohai.wang/202307/ddns-go-install/</link>
      <pubDate>Mon, 17 Jul 2023 00:24:52 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ddns-go-install/</guid>
      <description>前言 没有前言，懒得写了。
DDNS-GO官方github repo指路：https://github.com/jeessy2/ddns-go
下载 在系统里创建安装目录
mkdir -p /usr/local/ddns-go 根据自己的硬件平台下载对应版本的安装包。我的设备依然是它，赚钱宝二代（ws1508），armv7。
# 进目录 cd /usr/local/ddns-go # 下载 wget https://github.com/jeessy2/ddns-go/releases/download/v5.3.7/ddns-go_5.3.7_linux_armv7.tar.gz # 解压 tar -zxvf ddns-go_5.3.7_linux_armv7.tar.gz 运行 解压以后得到的ddns-go默认就有执行权限，所以直接./ddns-go就可以跑起来了。但我们肯定是要把添加到systemd服务，并设置开机自启的。
# 新建服务文件 nano /etc/systemd/system/ddns-go.service 粘贴以下内容
[Unit] Description=The DDNS-GO Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/ddns-go/ddns-go -c /usr/local/ddns-go/ddns_go_config.yaml ExecStop=/bin/killall ddns-go [Install] WantedBy=multi-user.target 然后就是大家都喜欢的systemd reload/start/enable三板斧了。
# 重载 systemctl daemon-reload # 启动 systemctl start ddns-go.service # 开机启动 systemctl enable ddns-go.service 配置 ddns-go跑起来以后，默认端口是9876，打开浏览器，访问http://host-ip:9876，就进入ddns-go的webui了，之后就根据自己的需求进行配置。</description>
    </item>
    
    <item>
      <title>Linux下用Nginx给qBittorrent设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/qbittorrent-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 20:14:40 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/qbittorrent-update-to-https/</guid>
      <description>用nginx反向代理给qbit实现https访问，99%的设置都和【Linux下用Nginx给File Browser设置SSL开启HTTPS访问】一样，没错，又是99%的内容都是和filebrowser那篇一样。但还是那个问题，直接照搬的话会有一个坑，完成配置以后，用https访问qbit-webui会显示空白页面并提示unauthorized。
很明显这是碰到了一个安全设置问题，访问被qbit拒绝了。
有两个解决方案。
方案一：关闭qbit的一些安全设置 qbit webui设置中的【启用host header属性验证】和【启用跨站请求伪造保护】两个功能去掉勾选。
方案二：修改nginx反向代理的配置 参考qbit【官方wiki给出的方案】，调整nginx中的一些配置。
假定原规则如下：
location / { proxy_pass http://localhost:8089; } 调整以后的配置如下：
location / { proxy_pass http://localhost:8089; proxy_http_version 1.1; proxy_set_header Host localhost:8089; proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Forwarded-For $remote_addr; # qbit版本v4.2.2以上加入这条保护cookie安全 proxy_cookie_path / &amp;#34;/; Secure&amp;#34;; } 使用以上配置以后，实测qbit webui中可以开启安全设置，注意服务器域名哪里要填localhost。</description>
    </item>
    
    <item>
      <title>Linux下安装Samba服务开启文件夹共享功能</title>
      <link>https://ruohai.wang/202307/samba-setup-to-share-files/</link>
      <pubDate>Sun, 16 Jul 2023 13:15:51 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/samba-setup-to-share-files/</guid>
      <description>前言 局域网如果里有一台24小时开机的低功耗linux主机，那自然是要给它装上samba开启文件共享功能，把它作为一个文件服务器来用。可能有人会问，想开共享文件夹，直接给主机装casaos不就好了，就算不用samba也可以用filebrowser、alist、dufs、chfs之类。emmm，说的很对，但那不是少了很多手动挡的乐趣嘛。而且自己手搓一边，也方便更好的理解samba。
在记录安装和配置的内容时，确实会发现很多细节没法具体一一记录，只能记录下符合我的需求的配置。这时候就会觉得类似casaos这种webui上直接鼠标点点就开启共享的方式方便多了。
前期准备 一台24小时开机的低功耗linux主机，我这里用的是赚钱宝二代（ws1508） linux系统有一个非root的低权限账户，这里假定：jack 如果系统安装了防火墙，记得放行samba服务 samba的安装 debian仓库里就有samba，直接一键安装
apt install samba 安装完成后，可以执行systemctl status smbd看下服务的运行状态。
● smbd.service - Samba SMB Daemon Loaded: loaded (/lib/systemd/system/smbd.service; enabled; preset: enabled) Active: active (running) since Sun 2023-07-16 13:44:59 CST; 11min ago Docs: man:smbd(8) man:samba(7) man:smb.conf(5) Process: 4040 ExecCondition=/usr/share/samba/is-configured smb (code=exited, status=0/SUCCESS) Process: 4043 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS) Main PID: 4044 (smbd) Status: &amp;#34;smbd: ready to serve connections...&amp;#34; Tasks: 4 (limit: 986) Memory: 4.9M CPU: 9.725s CGroup: /system.</description>
    </item>
    
    <item>
      <title>Linux下用Nginx给ttyd设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/ttyd-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 01:17:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ttyd-update-to-https/</guid>
      <description>用nginx给ttyd实现https访问，99%的设置都和【Linux下用Nginx给File Browser设置SSL开启HTTPS访问】一样，直接照搬即可。但如果完全照搬，会发现https下登录ttyd以后，页面全黑，有一个浮窗显示【press enter to reconnect】，没有光标，也没有命令提示符。
很容易就明白出现这个问题是因为ttyd使用的是websocket协议，通过nginx代理转发以后出现了bug。
网上搜了一下解决方案，根据【这个页面】和【这个页面】上的两个解答，需要对nginx的配置内容稍微修改。
注意 设定域名为：jackiechang.cn 设定外网端口为：11111 设定内网端口为：4533 配置文件 server {listen [::]:11111 ssl;server_name jackiechang.cn;ssl_certificate ssl/jackiechang.cn.pem;ssl_certificate_key ssl/jackiechang.cn.key;ssl_session_cache shared:SSL:1m;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;ssl_prefer_server_ciphers on;error_page 497 https://$host:$server_port$uri$is_args$args;location / {proxy_set_header Host $host;proxy_set_header X-Forwarded-Proto $scheme;proxy_set_header X-Forwarded-Port $server_port;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection &amp;#34;upgrade&amp;#34;;proxy_http_version 1.1;proxy_pass http://localhost:4533;}} </description>
    </item>
    
    <item>
      <title>Linux下用Nginx给File Browser设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/filebrowser-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 00:25:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/filebrowser-update-to-https/</guid>
      <description>前言 我用赚钱宝二代（ws1508）和玩客云（ws1608）刷入armbian，然后搓了很多服务，比如file browser、qbittorrent、ttyd、alist、ddns-go、navidrome。这些应用在启动以后，都提供了webui用来管理和控制。再配合当下ipv6的公网ip，实现了外网访问。
但现在又碰到了新的需求（或者说问题），就是这些应用的webui都是http，为了安全，我准备升级到https。其中有一些应用（比如ttyd、firebrowser）确实支持ssl，但也有很多不支持ssl。而且就算支持ssl的应用，各自配置的方式也不相同，不方便后期统一管理。
为了实现这个需求，就需要使用nginx做反向代理。这里以filebrowser为例，做一下简单记录。
前期准备 设备已经实现了ipv6的外网访问 假定域名为：jackiechang.cn 系统已经安装了filebrowser且可以正常访问，假定访问端口为：8600 以上两个前提已经OK，那外网访问filebrowser的url应该是：http://jackiechang.cn:8600 已经有ssl证书，不管是阿里云买域名送的证书，还是Let&amp;rsquo;s Encrypt的免费证书。 ssl证书需要是nginx的格式，一共两个文件：jackiechang.cn.pem和jackiechang.cn.key。 8600一个端口不能被nginx和filebrowser同时监听，这里假定nginx监听端口是：22222。最终实现效果是：https://jackiechang.cn:22222 这里假定的外网端口、本地端口、域名、证书名称，在下面教程中记得根据自己的情况进行修改。 安装nginx 我的主机系统是armbian，debian仓库里有nginx，直接一键安装。
apt install nginx nginx安装好以后，可以先执行nginx -t测试一下nginx.conf配置文件的语法是否正确，顺便看一下nginx的路径。我的nginx目录是/etc/nginx。
上传ssl证书 在nginx目录新建ssl文件夹，用sftp/scp工具把两个证书文件放到ssl目录下。注意这两个文件的读取权限，因为nginx是以www-data的用户身份运行，这俩ssl文件针对everyone需要配置读权限。但一般不会有什么问题，这里提到权限问题只是以防万一。
mkdir /etc/nginx/ssl 配置nginx nginx的默认配置文件是nginx.conf，但现在为了整洁和方便管理，nginx分出了conf.d、sites-available、site-enabled三个文件夹用来分别存放不同用途的配置文件。目录结构示意图如下。
nginx.conf总文件不动，/sites-enabled/default是实际生效的配置文件，但这里的文件实际是软链接到/sites-avaliable/default。搞得这么复杂，其实是为了方便配置和管理。（真的嘛我不信）
好了，开始编辑配置文件。
nano sites-available/default 添加如下配置内容，然后保存退出。
server { # 监听端口 listen [::]:22222 ssl; # 域名 server_name jackiechang.cn; # 证书 ssl_certificate ssl/jackiechang.cn.pem; ssl_certificate_key ssl/jackiechang.cn.key; # session缓存 ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # 加密 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; # http请求拦截报错页面，自动跳转到https error_page 497 https://$host:$server_port$uri$is_args$args; location / { proxy_pass http://localhost:8600; } } 重启nginx 完成上面的配置以后，先执行nginx -t测试配置文件的语法，没有报错就说明配置OK，接下去重启nginx即可。</description>
    </item>
    
    <item>
      <title>Linux下ttyd使用Git提示Author identity unknown和fatal: $HOME not set问题的解决</title>
      <link>https://ruohai.wang/202307/git-home-not-set-bugfix/</link>
      <pubDate>Sat, 15 Jul 2023 17:50:39 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/git-home-not-set-bugfix/</guid>
      <description>我在ttyd下使用git commit -m &#39;xxx&#39;命令时，出现了一个无法识别git用户信息的错误。
具体报错信息如下：
Author identity unknown *** Please tell me who you are. Run git config --global user.email &amp;#34;you@example.com&amp;#34; git config --global user.name &amp;#34;Your Name&amp;#34; to set your account&amp;#39;s default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got &amp;#39;user@hostname.(none)&amp;#39;) 意思就是git的用户身份认证信息未知，需要用git config --global进行配置。但我已经在系统中配置了git username&amp;amp;email，在本地终端中使用都正常，仅在ttyd中出现了这个bug。
那既然都提示要设置了，就先git config --global设置一下，这时又出现了第二个报错。
fatal: $HOME not set 到这里基本就明白错误原因了，ttyd下git无法识别$HOME环境变量，所以无法读取到~/.gitconfig文件内配置的username&amp;amp;email信息。
解决方案 根据这个报错搜了一下解决方案，根据【stackoverflow上的这个帖子】，解决方案就是用git config --system来设定git用户信息
git config --system user.</description>
    </item>
    
    <item>
      <title>ttyd基础使用之：在debian上安装ttyd</title>
      <link>https://ruohai.wang/202307/install-ttyd/</link>
      <pubDate>Sat, 15 Jul 2023 16:38:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-ttyd/</guid>
      <description>前言 ttyd，轻量好用的一个web terminal，特别适合出门在外没有带自己电脑但又需要访问自己vps进行操作的场景，只需要打开浏览器，访问配置好的ttyd就OK。
github项目指路：【ttyd - Share your terminal over the web】
简单记录下安装过程。
安装 这次安装ttyd的机器是刷了armbian的玩客云（ws1608），硬件架构是arm32/armv7l/armhf。
第一步：下载安装包
第一步就是创建安装目录、下载安装包基础操作。注意下载二进制包的时候选择适配自己硬件架构的版本，这里玩客云需要选择ttyd.armhf。
sudo mkdir -p /op/ttyd ; cd $_ sudo wget https://github.com/tsl0922/ttyd/releases/download/1.7.7/ttyd.armhf 第二步：添加可执行权限
下载的二进制包默认没有执行权限，需要授权
sudo chmod +x ttyd.armhf 第三步：查看学习手册
先学习一下ttyd的手册，有几个参数后面需要用到
-p，指定端口，默认是7681 -c，设定认证信息，也就是账户和密码，格式是username:password -W，设定写权限。默认只读，如果要写权限需要加上这个参数 -6，开启支持ipv6，如果通过ipv6 + ddns进行访问的家宽用户可以添加这个参数 第四步：创建systemd服务配置文件
要把ttyd添加到systemd服务，在/etc/systemd/system目录下创建ttyd.service的配置文件，粘贴以下内容
[Unit] Description=TTYD After=syslog.target After=network.target [Service] ExecStart=/opt/ttyd/ttyd.armhf login Type=simple Restart=always User=root Group=root [Install] WantedBy=multi-user.target 以上是ttyd官方wiki中提供的模板，可以根据自己个性需求进行调整。比如自定义端口号、开启ipv6支持、添加用户认证、增加写权限、指定bash shell、以non-root用户运行，举例如下：
[Unit] Description=TTYD After=syslog.target After=network.target [Service] ExecStart=/opt/ttyd/ttyd.armhf -p 54321 -c jack:123456 -W -6 bash Type=simple Restart=always User=jack Group=jack [Install] WantedBy=multi-user.</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝二代（WS1508）还能怎么玩</title>
      <link>https://ruohai.wang/202307/ws1508-is-totally-a-rubbish/</link>
      <pubDate>Sat, 15 Jul 2023 14:53:09 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1508-is-totally-a-rubbish/</guid>
      <description>玩客云，也叫赚钱宝三代，或者直接叫型号名字ws1608，我弄了好几台，这俩月玩的不亦乐乎，玩到后期，乐趣已经不是来自折腾硬件，而是玩linux系统，在armbian的基础上搓各种服务。
然后偶然间在B站上看到了powersee发布的赚钱宝二代（型号ws1508）的刷机视频，看了下二手市场，15块钱一个，配置是玩客云同款S805芯片，usb2.0*1，百兆lan，没了。硬件配置上看实在是鸡肋，完全可以称之为电子垃圾。但挡不住低价的诱惑，而且玩客云的可玩性已经得到验证。在恩山论坛搜了下赚钱宝二代能刷的固件，还真有俩。遂闲鱼上挑挑拣拣，30元2个包邮入手。
今天下午收到货，拆包通电，折腾一下午，目前就仨结论：
目前能刷的固件，armbian的就俩，一个是【基于debian 11的固件】，只支持U盘启动，而且仅此一版，不像玩客云有稳定的固件更新。另一个是【基于debian 10的nand直刷版本】，但内核还是3.x，因为linux对nand的支持随着内核3.4/3.10停止而停止了，内核太老docker都没法装，并且debian 10已经EOL。 不刷armbian，那就是刷openwrt了。我本就对旁路由这种模式兴趣不大，这机器百兆网口，我就更没兴趣了。要固件的可以自己去恩山论坛找。 usb接口只支持2.0这还不是最致命的，最致命的是usb接口只有一个。目前它能用的固件，约等于就是只有一个U盘启动的armbian，那就没有多余的接口插U盘或者移动硬盘了，扩展性为0。 这机器，我思来想去，只适合用来当作对网速要求不高、也不需要usb接入的场景，也就是这么几种玩法：
装cups做打印机服务器 装home assissant做智障家居中心 装cifs-utils挂载局域网上的共享文件夹以后做下载机 还有一个在实际使用中碰到的问题，刷入armbian 11以后，在apt upgrade或者修改ssh的配置以后，会碰到一个报错【kex_exchange_identification: read: Connection reset】，网上搜了一下没有什么解决的头绪，实测断电重启以后可解。
update:2023/07/15 15:24
上面这篇文章是2023年7月10号写的。今天是7月15号。虽然才过去5天时间，但感觉像是半个世纪，因为杭州这段时间天天都是高温酷暑橙色警报，天气预报39~40℃，室外就是一空气炸锅，室内不开空调就是桑拿房。
说回这台电子垃圾ws1508，前几天基于【基于debian 11的固件】这个版本，提取出dtb和启动脚本，现在可以实现根据armbian-onecloud的固件自制ws1508的固件惹，armbian-bookworm、6.1内核、6.4内核都适用，具体看【这个帖子】。
但是，固件可以自制，核心问题依然没有解决，就是高内核固件无法识别机器自带nand flash，导致只能用U盘启动。它又只有一个usb接口，意味着只能用来插系统盘，扩展性依然为0。
所以还是个电子垃圾。</description>
    </item>
    
    <item>
      <title>Windows下用CMD实现SSH连接</title>
      <link>https://ruohai.wang/202307/windows-cmd-use-ssh/</link>
      <pubDate>Sat, 15 Jul 2023 14:51:46 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/windows-cmd-use-ssh/</guid>
      <description>Windows下有很多终端，收费的，免费的。但很多终端不支持zmodem导致不能使用lrzsz，或者用户协议是限定场景下才免费，亦或者是electron套壳主题不好看。其实windows10已经默认安装openssh客户端，可以直接用系统自带的cmd/powershell/windows terminal来实现ssh访问远程服务器。虽然依然不支持zmodem，但如果你和我一样有三方软件洁癖，或者想严格遵守软件的用户协议，可以考虑cmd来替代那些第三方软件。
如果你的Windows系统没有安装openssh，可以查看这篇【官方文章】进行安装。
然后在cmd中直接敲命令即可。是默认端口22的话，【-p 22】这部分可以省略。
ssh jack@192.168.1.10 -p 22 如果不想每次都敲【root@192.168.1.10 -p 22】这几句，需要在C:\Users\Jack\.ssh\目录下新建一个config文件（文件名就是config，没有后缀），按如下格式写入服务器信息后保存。
Host abc Hostname 192.168.1.10 User jack Port 22 然后就可以在cmd中敲【ssh abc】即可。
如果想实现免密登录，rsa密钥生成、服务器端的配置这里不做赘述，只记录config文件中的配置格式。为方便管理多个主机的rsa密钥对，这里在.ssh目录下新建文件夹abc，rsa密钥对放在其中
Host abc Hostname 192.168.1.10 User jack Port 22 IdentityFile C:\Users\Jack\\.ssh\abc\id_rsa 然后就可以在cmd中敲【ssh abc】即可实现免密登录。</description>
    </item>
    
    <item>
      <title>Linux下用SFTP命令操作文件上传下载</title>
      <link>https://ruohai.wang/202307/use-sftp-to-handle-file/</link>
      <pubDate>Sat, 15 Jul 2023 14:48:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/use-sftp-to-handle-file/</guid>
      <description>一般要在一台远程vps上进行文件上传下载，一两个文件会用lrzsz(前提是你的终端要支持zmodem），批量文件会用winscp/xftp之类的客户端。但如果自己的终端不支持zmodem，也不想用第三方软件，而且文件也就一两个就想敲命令来完成，因为敲命令泰裤辣，那就用sftp命令。
sftp连接服务器。连接成功后光标处的命令提示符变成 sftp&amp;gt; 。想要免密登录设置同ssh免密登录，可以看这篇文章。
sftp jack@192.168.1.10 -p 22 sftp下载文件并保持源文件名
get /home/jack/robots.txt C:\Users\Jack\Desktop\ sftp上传文件并保持源文件名
put C:\Users\Jack\Desktop\robots.txt /home/jack/ 如果要上传下载一个文件夹，在put/get后面跟一个参数 -r 即可。</description>
    </item>
    
    <item>
      <title>Typecho添加favicon</title>
      <link>https://ruohai.wang/202307/typecho-add-favicon/</link>
      <pubDate>Sat, 15 Jul 2023 14:46:01 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/typecho-add-favicon/</guid>
      <description>首先将制作好的favicon.ico文件上传到服务器目录，本例中保存在/usr/themes/default/目录下。接下去在网站管理后台操作。
后台——控制台——外观 编辑当前外观——header.php，在&amp;lt;header&amp;gt;标签中插入一行
&amp;lt;link rel=&amp;#34;shortcut icon&amp;#34; href=&amp;#34;/usr/themes/default/favicon.ico&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt; 最后保存再刷新网站即可。</description>
    </item>
    
    <item>
      <title>Linux下实现挂载SMB共享文件夹</title>
      <link>https://ruohai.wang/202307/linux-smb-mount/</link>
      <pubDate>Sat, 15 Jul 2023 14:40:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-smb-mount/</guid>
      <description>linux下访问局域网上的smb共享文件夹，需要安装cifs-utils。
apt install cifs-utils 这里假定共享文件夹的网络位置是http://smb_ip/share，用户名smb，密码123456。
mount -t cifs //smb_ip/share /mnt/share -o username=smb,password=123456 -t cifs，挂载的文件类型，smb为-t cifs。 //smb_ip/share，smb共享文件夹的网络位置 /mnt/share，本地挂载的位置 -o，-o后面跟的都是挂载的详细参数配置，smb协议、用户名、密码等等，具体可以看这里详细参数解释，或者看图片。 如果要设置开机自动挂载smb，在/etc/fstab文件中添加一行，保存退出即可。
//smb_ip/share /mnt/share cifs username=smb,passwd=123456 0 0 也可以在/etc/samba/目录下新建配置文件smbpasswd用来保存smb的用户名和密码以方便管理，内容如下。
username=smb password=123456 然后 fstab中添加一行
//smb_ip/share /mnt/share cifs credentials=/etc/samba/smbpasswd 0 0 fstab的格式规范如下
&amp;lt;file system&amp;gt; &amp;lt;dir&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt; </description>
    </item>
    
    <item>
      <title>Linux下给Apache2安装SSL证书</title>
      <link>https://ruohai.wang/202307/apache2-ssl-cert-setup/</link>
      <pubDate>Sat, 15 Jul 2023 14:38:50 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apache2-ssl-cert-setup/</guid>
      <description>拖了好几天一直懒得弄ssl证书，因为这服务器是一朋友闲置我拿来练手的，剩1个月到期。但晚上被大学同学叫出去喝酒，完了回来以后有点精神焦虑，索性把ssl证书给弄了缓解一下情绪。
获取ssl证书的步骤这里就不赘述。直接开始重点。
第一步，获取到的apahce2的证书应该是三个文件：domain.key, domain_chain.crt, domain_public.crt。这仨文件名是阿里云证书的格式。我看到也有叫domain_bundle.crt的，没关系，最后都是写一起的。
拿到证书文件以后，把这三个文件上传到/etc/apache2/ssl目录下，这里的ssl文件夹需要自己新建，名字可以用自己喜欢的，后面配置文件中记得路径同步修改就ok。也可以直接到/etc/apache2/ssl目录下直接用wget下载证书后解压。 第二步：启用apache2的ssl模块
a2enmod ssl 第三步：apache2默认的ssl配置文件的路径在/etc/apache2/sites-available/default-ssl.conf。现在把ssl证书三个文件的路径添加到&amp;lt;VirtualHost *:443&amp;gt;的标签内。
SSLCertificateFile /etc/apache2/ssl/domain_public.crt SSLCertificateKeyFile /etc/apache2/ssl/domain.key SSLCertificateChainFile /etc/apache2/ssl/domain_chain.crt
网上很多教程写到这里就说可以保存退出了。但是要注意，如果你的网站根目录不是apache2默认的/var/www/html而是自定义的目录，那只加这3行是不行的！还需要把网站信息的DocumentRoot和&amp;lt;Directory&amp;gt;的信息也配置进去。
第四步：现在需要把ssl配置文件用软链接映射到/etc/apache2/sites-enabled/目录，命令中的001-ssl.conf文件名可以取自己喜欢的。
ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf 如果不喜欢用软链接，也可以直接把default-ssl.conf文件复制一份到/sites-enabled/目录下。
第五步：重启apache2。
systemctl restart apache2 第六步：如果没有开防火墙（firewalld/iptables），那到上一步就结束了。如果开启了防火墙（我用的是firewalld），记得开放443端口。
# 开放端口 firewall-cmd --add-port=443/tcp --permanent # 防火墙重载 firewall-cmd --reload </description>
    </item>
    
    <item>
      <title>Typecho更改后台登录地址</title>
      <link>https://ruohai.wang/202307/change-typecho-admin-dir/</link>
      <pubDate>Sat, 15 Jul 2023 14:37:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/change-typecho-admin-dir/</guid>
      <description>typecho后台登录url默认就是/admin/，为了安全，还是自定义比较好。
这里假定要把/admin/改成/abcd/，要改两个地方。
网站根目录下的admin文件夹，重命名为abcd
网站根目录下的config.inc.php，把define(&amp;rsquo;TYPECHO_ADMIN_DIR&amp;rsquo;, &amp;lsquo;/admin/&amp;rsquo;)中的admin修改为abcd，然后保存退出
以上两步操作完以后就可以用/abcd/登录网站后台了，成功~</description>
    </item>
    
    <item>
      <title>Linux下从0开始安装Typecho</title>
      <link>https://ruohai.wang/202307/install-typecho-step-by-step/</link>
      <pubDate>Sat, 15 Jul 2023 02:52:12 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-typecho-step-by-step/</guid>
      <description>typecho的安装，官方有【安装指导文档】，但讲实话我看完官方文档是一头雾水的，并不知道要怎么弄。搜其它教程，很多又是配合宝塔面板来部署。宝塔面板我试过官网的demo，并不是我对国产的软件产品有偏见啊，但主题和无处不在的付费升级到pro的入口，我觉得不行。
所以这就是一篇从0开始完全手搓的安装教程。
第一步：安装环境的准备。typecho说白就是一个php网站，要跑php网站，就需要web server。那就nginx或者apache2二选一。这些年nginx风头强劲，apache2日暮西山。但巧了么这不是，我选择apache2。
apt install apache2 -y apache2安装好以后，在浏览器中输入http://host_ip看是否能访问到apache2 index页面，能访问说明安装成功。
第二步：网站要跑起来，有了web server，接下去就是安装数据库。typecho官方说支持mysql、postgresql和sqlite，又到了技术选型的分岔口了。mysql因为oracel这个爹的原因，从debian的源仓库被移除了，postgresql我不熟，略过，那剩下的就只有sqlite惹。其实debian的源仓库里有mariadb-server可以装，但用mariadb的话和mysql一样需要安装mysqli这个php扩展，很不巧mysqli也从debian源仓库里被移除了。开源人都是有洁癖的，碰了oracel的统统都要清理掉。我这里偷懒，只想用apt install一键安装而不是去下mysql安装包，所以数据库最终选择：sqlite。
apt install sqlite3 -y 安装完成后，输入sqlite3，看命令提示符是不是 sqlite3 来判断是否成功，敲.quit退出。
第三步：现在要在apache2中进行virtualhost配置，也就是网站信息配置。可以在/etc/apahce2/apache2.conf文件中配置，也可以/etc/apache2/sites-enabled/目录下配置。为了方便管理，这里选择/sites-enabled/目录。
将目录下的000-default.conf重命名为typecho.conf 在typecho.conf中的&amp;lt;VirtualHost *:80&amp;gt;标签内进行如下配置。DocumentRoot配置的是你网站的根目录。 DocumentRoot /data/typecho &amp;lt;Directory /data/typecho&amp;gt; Options Indexes FollowSymLinks AllowOverride All Require all granted &amp;lt;/Directory&amp;gt; 完成配置后，重启apahce2。 systemctl restart apache2 在网站根目录新建phpinfo.php，内容&amp;lt;?php phpinfo(); ?&amp;gt;，保存。然后浏览器访问http://host_ip/phpinfo.php，查看是否能正常访问页面。 这里有一个需要注意的问题。apache2跑起来的用户:组是www-data:www-data，记得给网站目录/data/typecho分配合理权限，要不然会提示【you don&amp;rsquo;t hava permission】无法访问。 第四步：开始安装php。全程没啥好注意的，等命令跑完就好了。
apt install php -y 第五步：不知不觉终于到第五步了，写教程可真累啊。到此为止，安装环境算是都准备好了，现在可以去typecho官网下载安装包惹。
# 进入网站根目录 cd /data/typecho # 下载最新版typecho代码 wget https://github.com/typecho/typecho/releases/download/v1.2.1/typecho.zip # 解压到当前目录 unzip typecho.zip 接着就可以在浏览器中输入http://host_ip/install.php进行安装，然后根据网页提示的报错信息进行debug。 第六步：马上大功告成了。点击下一步，马上就会看到红字错误提示。 不要慌，根据错误提示一个个处理即可。
# 安装mbstring，需要重启apache2生效 apt install php-mbstring -y # 安装数据库扩展，我用的是sqlite3，就装sqlite3的扩展，需要重启apache2生效 apt install php-sqlite3 -y # usr/uploads目录分配权限。俩方法，把/typecho/目录指定给www-data:www-data，或者给755。因为等会还需要在网站根目录写入一个config.</description>
    </item>
    
    <item>
      <title>Linux下Syncthing的安装和配置</title>
      <link>https://ruohai.wang/202307/install-syncthing/</link>
      <pubDate>Sat, 15 Jul 2023 02:50:44 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-syncthing/</guid>
      <description>前言 不得不说在linux下随便安装一个软件都可以写一份教程，不像Windows下载exe双击运行然后下一步下一步就能搞定。
安装 debian仓库里就有，直接apt安装就行。虽然版本略微旧了一些，但简单省事，apt一把梭！
apt install syncthing 配置 通过apt方式安装syncthing服务，配置文件的默认路径是/lib/systemd/system/syncthing@.service。配置文件的默认内容如下
[Unit] Description=Syncthing - Open Source Continuous File Synchronization for %I Documentation=man:syncthing(1) After=network.target StartLimitIntervalSec=60 StartLimitBurst=4 [Service] User=%i ExecStart=/usr/bin/syncthing serve --no-browser --no-restart --logflags=0 Restart=on-failure RestartSec=1 SuccessExitStatus=3 4 RestartForceExitStatus=3 4 # Hardening ProtectSystem=full PrivateTmp=true SystemCallArchitectures=native MemoryDenyWriteExecute=true NoNewPrivileges=true [Install] WantedBy=multi-user.target 根据这份默认的配置信息可以判断，想要启动syncthing服务，命令中需要指定用户。假定我的系统账户是jack，使用如下命令启动syncthing服务
systemctl start syncthing@jack.service 用以上默认配置启动以后，在jack的home目录会生成配置文件，默认是/home/jack/.config/syncthing/config.xml，其中可以看到gui的默认访问地址
&amp;lt;gui enabled=&amp;#34;true&amp;#34; tls=&amp;#34;false&amp;#34; debugging=&amp;#34;false&amp;#34;&amp;gt; &amp;lt;address&amp;gt;127.0.0.1:8384&amp;lt;/address&amp;gt; &amp;lt;apikey&amp;gt;xxxxxxxxxxxxxxxxxxx&amp;lt;/apikey&amp;gt; &amp;lt;theme&amp;gt;default&amp;lt;/theme&amp;gt; &amp;lt;/gui&amp;gt; 注意这里的&amp;lt;address&amp;gt;127.0.0.1:8384&amp;lt;/address&amp;gt;，默认只监听本机的访问请求，如果是远程访问，需要改成&amp;lt;address&amp;gt;0.0.0.0:8384&amp;lt;/address&amp;gt;。
总结：
apt安装syncthing以后，启动命令：systemctl start syncthing@jack.service 如果是远程访问，修改/home/jack/.config/syncthing/config.xml中的gui标签，把127.0.0.1改成0.0.0.0 修改端口，和上一条一样，把8384改成自己喜欢的端口号 完成以上的配置后，就是熟悉的重启和开机自启。
# 启动syncthing服务 systemctl restart syncthing@jack.</description>
    </item>
    
    <item>
      <title>Linux下用udevil实现USB存储设备自动挂载</title>
      <link>https://ruohai.wang/202307/linux-auto-mount-usb-storage/</link>
      <pubDate>Sat, 15 Jul 2023 02:49:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-auto-mount-usb-storage/</guid>
      <description>前言 linux想要实现usb存储设备自动挂载，有这么几个方案：
插上去就半永久，一般不会拔下来，那就把设备uuid写入/etc/fstab 如果会经常插拔，而且动手能力强，可以编写udev的规则脚本 如果会经常插拔，但又不想写脚本，那就装软件，比如udevil、udiskie、udisk2、usbmount 根据自己的实际情况，最后我选择了udevil，三个原因：
安装简单0配置可用 依赖关系非常简单，不需要额外装一堆包 轻nas面板casaos实现u盘自动挂载用的就是udevil 😄
安装与使用 debian的软件仓库里就有udevil，一条命令就搞定安装
apt install udevil udevil的配置文件路径是/etc/udevil/udevil.conf，默认会把usb设备挂载到/media/user目录下（这里的user在后面的命令中体现）。如果要调整自动挂载路径，需要在udevil.conf中修改。
接下去要启动udevil服务惹，假定用非root账户jack来运行udevil服务。
systemctl start devmon@jack.service 注意命令中的jack，这里对应的是linux系统的用户账户，设备的挂载点就是/media/jack。如果你的系统使用的账户是tom，那对应的命令就是devmon@tom.service，usb设备的挂载点就是/media/tom。
启动成功以后，就可以插拔u盘、移动硬盘查看挂载情况了，确认下是否工作正常。
最后就是把udevil设置成开机启动。
systemctl enable devmon@jack.service 问题 exfat格式的存储设备默认无法自动挂载，因为有个bug，需要手动修改配置文件，修改方法：【Linux下udevil无法自动挂载exfat格式U盘的问题解决】
玩客云的sd卡槽如果插了sd卡，系统重启以后无法自动挂载，必须要有一个重新插拔的动作才可以挂载。</description>
    </item>
    
    <item>
      <title>Apache2下实现Typecho永久链接（伪静态）</title>
      <link>https://ruohai.wang/202307/apache2-url-rewrite/</link>
      <pubDate>Sat, 15 Jul 2023 02:43:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apache2-url-rewrite/</guid>
      <description>伪静态通过url rewrite实现，这里记录下apahce开启rewrite功能的方法。
首先第一步肯定是在typecho后台开启地址重写功能，不要管错误提示，选择【启用】并保存设置。 然后开始在apache2中进行配置：
本地新建一个文件，文件名**.htaccess** ，把下面这段内容粘贴进去，保存，然后上传到网站根目录。 &amp;lt;IfModule mod_rewrite.c&amp;gt; RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1] &amp;lt;/IfModule&amp;gt; 文件位置示意图：
修改apache2.conf（如果你的网站路径信息配置在VirtualHost下则修改对应位置）。这里以默认的/var/www为例，把AllowOverride后的参数改为FileInfo，不需要改成all，fileinfo的权限就够了。 &amp;lt;Directory /var/www/&amp;gt; Options Indexes FollowSymLinks AllowOverride FileInfo Require all granted &amp;lt;/Directory&amp;gt; 完成以上两步以后，可以试着重启apache2，如果rewrite模块已经开启的话，到这一步伪静态就已经完成了。 systemctl restart apache2 如果很不幸操作apache2重启以后你的地址重写功能依然没有生效，那就是服务器没有启用rewrite模块，执行下面这条命令启用apache2-rewrite，然后再重启apache2。 a2enmod rewrite systemctl restart apache2 </description>
    </item>
    
    <item>
      <title>为什么选择Typecho而不是Hexo来搭建博客</title>
      <link>https://ruohai.wang/202307/why-choose-typecho/</link>
      <pubDate>Sat, 15 Jul 2023 02:33:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/why-choose-typecho/</guid>
      <description>前言 这篇文章是2023年7月4号写的，当时方案选择的时候，排除掉了静态博客hexo选择了typecho，然后做了这篇记录。
谁曾想不到半个月的时间，因为拿来连手的vps快要到期，博客也要转移，最终新博客我选择了静态博客hugo。😄
本来这篇文章是吐槽静态博客不好用不方便的，但今天（2023-07-15）对内容做了重新整理和补充，反而变成了一篇吹静态博客好的文章，笑死了。
😄
想要自建博客的时候，我的方案是二选一：hexo或者typecho。
hexo入选是因为2015年的时候用hexo+github page搭过一个博客。typecho入选是因为玩客云这个机器硬件性能羸弱（没错一开始我是准备在玩客云上自建博客），看到有一个玩客云armbian固件里内置了typecho。
接下去就是决定用hexo还是typecho了。搜了网上很多博客工具优劣的点评文章，啰啰嗦嗦一大堆，都喜欢说什么主题好不好看。有的会提到动态博客、静态博客之分，这个也好理解，但往往也只点到静态页面、动态数据这些。
但是最最最关键的区别，他们都没说，我来说：
静态博客是分成本地环境和服务器环境的！！！ 静态博客 静态博客存在如下几个问题：
需要在本地搭建一个编译环境。hexo是nodejs，hugo是go，jekyll是ruby gem。想写博客，就需要本地写好markdown文件，然后本地编译成静态页面，然后git push到服务器（也可以用sftp工具）。文章发布以后发现有错误想要改，哎，本地编辑那份markdown文件，然后本地重新编译静态页面，然后再用git push到服务器。这也是小白容易理解错误的地方，按照hexo、hugo、jekyll的官方文档吭哧吭哧弄半天，最后发现只是在自己电脑上装了一个编译环境而已。
没有原生评论系统。因为是都是静态页面没有什么交互，自然也就没有原生评论系统，但可以通过配置第三方服务外挂评论系统来实现。但随之而来的问题就是，这些评论都保存在第三方网站上，不归自己管。
部署。静态博客如此流行，我觉着有很大的原因是免费的github pages吧。但如果想部署在主机上，那就和动态博客一样，需要开始ssh连上主机装nginx/apache2建站了。
设备绑定。markdown编译成静态页面以后，需要push到服务器，或者github。如果push到服务器，那和动态博客一样，需要和主机做rsa密钥认证登录；如果push到github，那需要在github上配置rsa公钥。这都导致了客户端设备的绑定，也就是我用A电脑写markdown然后编译然后push，那我换电脑了怎么办？得重新配置一遍rsa密钥认证，或者其它电脑远程登录到A电脑进行push。
不支持搜索。都是静态页面，往往没有交互功能，比如搜索文章。需要用搜索引擎配合一些搜索公式来实现。
文章管理不便。标签、分类、置顶，还有很多基础功能缺失，需要自己手动管理。
动态博客 动态博客最知名的就是wordpress，但很多人都会觉得它太重，typecho可以理解为wordpress的精简版。动态博客好处都有啥，谁说对了就给他。
原生评论系统。虽然我的博客几乎没有什么访问量，评论也完全没有，但评论功能它必须得有。
自带管理后台，可以直接在网站后台对全站资源进行配置，比如文章的编辑、发布、删除，评论的管理，主题的配置，页面的调整。
不绑定设备。出门没带自己电脑，不得不用其它电脑，照样可以浏览器登录网站后台管理博客。
动态博客系统都自带功能强大的富文本编辑器/markdown编辑器，不用再花心思去选什么支持语法高亮、支持实时预览、免费的markdown编辑器，系统自带。
动态博客系统自带功能强大的文章分类功能、标签管理功能、搜索功能，这些网站标配的功能，静态博客都需要自己动手去实现。
这么看下来，好像静态博客一无是处，动态博客全是优点。那为什么还有那么多人选择静态博客？
网站精简，less is more，砍掉所有功能以后可以把全部注意力都用在【写博客】这件事上。
免费。只要注册一个github账号，就可以把博客部署到github pages，不花钱，然后买个10块一年的廉价域名，搞定。如果用动态博客，自己的小主机没法备案吧，就不能解封80/443端口，那就得买vps。国内阿里云腾讯云各种云，要备案要审核，海外linode、vultr、azure、aws、digital ocean，各有优劣得挑好久吧而且价格不便宜。一年一年续费太心痛。</description>
    </item>
    
    <item>
      <title>Linux下安装Navidrome自建流媒体服务</title>
      <link>https://ruohai.wang/202307/navidrome-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:28:12 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/navidrome-setup/</guid>
      <description>前言 navidrome，开源的流媒体服务器，全平台客户端都有。功能和群晖的audio station一样，但首先不是人人都有群晖，其次有群晖的人也不一定都喜欢群晖那个沙雕的audio station。
这里记录下安装步骤。其实官网的安装教程已经非常完整且详细，只是没有中文版而已。英文阅读没问题的可以直接看【[官方安装教程][1]】。这里仅做一个自己安装过程的记录和英译中。有人会问navidrome不是支持docker安装吗而且docker安装很简单，STOP！我不喜欢docker，所以选择自己手搓。
好了，让我们开始安装navidrome吧！
安装 第一步：安装ffmpeg
解码音频文件用的，ffmpeg的包大概200~500MB，请保证有足够的存储空间。
apt install ffmpeg -y 第二步：创建文件夹
navidrome需要两个文件夹：
一个安装文件夹，存放navidrome的二进制包，默认是/opt/navidrome 一个运行文件夹，用来存放配置文件和运行缓存，默认是/var/lib/navidrome 我准备用非root用户jack来运行navidrome服务，所以要提前考虑好两个文件夹的用户权限。
执行以下命令创建文件夹
install -d -o jack -g jack /opt/navidrome install -d -o jack -g jack /var/lib/navidrome 第三步：下载安装包
到navidrome官方github发布页面下载对应系统、对应硬件架构的二进制包（安装包），指路👉【navidrome/releases】
我这里以amd64（x64）版本为例。如果用wget下载很慢的话，可以先在其它电脑上下载好了然后用sftp工具上传，或者直接路由器挂代理。
# 进入安装目录 cd /opt/navidrome # 下载安装包 wget https://github.com/navidrome/navidrome/releases/download/v0.49.3/navidrome_0.49.3_Linux_x86_64.tar.gz # 解压 tar -zxvf navidrome_0.49.3_Linux_x86_64.tar.gz # 解压后删除压缩包 rm navidrome_0.49.3_Linux_x86_64.tar.gz # 解压出来的文件分配用户和组，避免权限问题 chown -R jack:jack * 第四步：创建配置文件
在/var/lib/navidrome目录下创建navidrome.toml文件，用来指定音乐源文件的目录等其它参数。
默认只需要指定音乐源文件路径。更多自定义参数看【官方页面】，比如自定义端口。
# 进入目录 cd /var/lib/navidrome # 新建配置文件 # touch navidrome.</description>
    </item>
    
    <item>
      <title>Linux下Tailscale的安装和配置</title>
      <link>https://ruohai.wang/202307/tailscale-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:25:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/tailscale-setup/</guid>
      <description>前言 我的nas和玩客云armbian小主机的外网访问方案一直用的是ipv6 + ddns，因为我手上正好有个域名，这个方案确实很好用，不仅方便而且配置也很简单，除了ipv6地址更新的十分钟左右的时间会短暂掉线，其它方面我觉得已经十分完美。
今天在twitter有朋友问题玩客云机器刷armbian后能不能跑tailscale，我说没用过不清楚，但勾起了我的好奇心，所以按照官方文档的手册安装配置了一下，emmm，同样很好用，同样很方便而且配置简单，简单到压根就没有几步操作，教程都没什么好写的。
但我在安装组网好了以后还是碰到了一点简单的使用小疑惑。而且tailscale和ipv6公网使用场景虽然存在重叠，也是有一些差异化的，所以记录一下。
安装 首先就是去【tailscale官网】注册账号了，没啥好说的，根据官网提示操作就行了。注册好了以后，ssh进linux机器，开始安装。
第一步：安装，一条命令，耐心等它跑完，跑完会提示安装成功。
curl -fsSL https://tailscale.com/install.sh | sh 安装成功的提示
第二步：根据终端里安装成功的提示，启动tailscale。
tailscale up 启动成功以后，终端会出现一个url链接，复制链接到浏览器中打开，根据提示下一步再下一步，把设备添加到自己账号。
第三步：在tailscale的个人中心的machines标签页，可以看到自己账号下的设备。
可以看到每个设备后面都分配了一个100开头的ipv4地址。到这一步就完成了tailscale的安装、添加设别和异地组网。
使用 假定我现在需要在debian这台机器上访问onecloud机器上的一个服务（比如群晖，端口是5000)，那只需要在debian机器上打开浏览器，输入onecloud的tailscale分配的ipv4地址和端口号，也就是100.xxx.xx.xx:5000，就可以惹~~实测基本能跑满带宽。
实际体验下来，注册、安装、使用，完全就是傻瓜式操作，0配置就可以使用，比ipv6 + ddns的方案还要简单。
使用场景 再说一下tailscale和ipv6方案使用场景的不同。默认配置下，ipv6是公网开放的，意味着只要知道ipv6地址和端口号，所有人都可以访问到，这就带来一个安全上问题，需要用户自己进行一些安全加固的配置，比如装防火墙、修改服务的默认端口、使用复杂密码等等。但tailscale只是一个账户下的局域网之内的设备之间开放访问，并不对公网开放，而且tailscale服务本身的安全措施就拉满。
所以比较合适的使用场景是：
公开资料，比如网络资源（网上能下载到的各种电影电视剧电子书音乐图片文章），用ipv6 + ddns即可，泄露也无妨。 个人资料，（工作生活家庭中的照片音频文档等私密材料），用tailscale，杜绝私密资料泄露。 </description>
    </item>
    
    <item>
      <title>Linux下firewalld防火墙的安装和配置</title>
      <link>https://ruohai.wang/202307/firewalld-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:19:54 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/firewalld-setup/</guid>
      <description>前几年买了vps以后都是跑ss一键脚本然后就扔那儿不管了，除了vps服务商默认提供的安全措施，其它防护为0。虽然做了好多年的web开发，但都只是做一些crud搬砖粗活，对linux维护并不了解。这次借着折腾玩客云小机器armbian的机会，正好摸索学习一下。
😄
linux下管理防火墙规则的工具，大致是iptables/firewalld/ufw，这里略过方案选型过程，只说firewalld的安装和简单配置。要注意firewalld安装好以后，默认只允许dhcpv6-client和ssh服务，其它服务、端口全部会被拦截，如果ssh改了自定义端口，务必要记得放行该端口。
安装，很简单。安装好以后自动启用，自动配置为开机启动服务。
apt install firewalld 查看firewalld当前状态
systemctl status firewalld 永久开放某个端口
firewall-cmd --add-port=80/tcp --permanent 修改规则以后重载生效
firewall-cmd --reload 查看当前开放的服务
firewall-cmd --list-service 查看当前开放的端口
firewall-cmd --list-ports 永久开放某个服务
firewall-cmd --add-service=samba --permanent 永久关闭某个端口
firewall-cmd --remove-port=22/tcp --permanent </description>
    </item>
    
    <item>
      <title>Linux下配置RSA公钥认证登录</title>
      <link>https://ruohai.wang/202307/pub-key-auth-config/</link>
      <pubDate>Fri, 14 Jul 2023 23:41:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/pub-key-auth-config/</guid>
      <description>为了安全，linux主机一般都会禁掉密码登录 + rsa密钥认证登录。这里记录以下这两个操作的过程。
第一步：生成rsa密钥对，不多赘述。
ssh-keygen 生成俩文件，id_rsa和id_rsa.pub。
第二步：确保在linux主机用户目录下有.ssh文件夹，没有的话就新建。
mkdir ~/.ssh 第三步：用sftp命令或者sftp客户端，把id_rsa.pub上传到~/.ssh目录下。上传完成后，最好把id_rsa.pub文件重命名为authorized_keys。
第四步：编辑/etc/ssh/sshd_config文件。
# 找到这个配置，去掉注释启用 PubkeyAuthentication yes # 找到这个配置，去掉注释启用 AuthorizedKeysFile .ssh/authorized_keys 第五步：本地终端配置好id_rsa私钥就可以ssh免密码登录了。接下去就是禁用密码登录。
# 找到这个配置，去掉注释启用，注意value是no，禁止密码验证 PasswordAuthentication no 修改后保存退出，重启sshd后配置生效。😄
sysmtectl restart sshd </description>
    </item>
    
    <item>
      <title>Linux下安装qBittorrent</title>
      <link>https://ruohai.wang/202307/install-qbit/</link>
      <pubDate>Fri, 14 Jul 2023 23:35:17 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-qbit/</guid>
      <description>debian仓库里qbit有俩版本，一个qbittorrent，另一个qbittorrent-nox。前者带qt5编写的gui，后者没有gui只有webui。我是在玩客云的小机器上装，不需要gui，所以这里选qbittorrent-nox。
apt install qbittorrent-nox 安装完成后，qbit默认的系统服务配置文件路径是/lib/systemd/system/qbittorrent-nox@.service
看到这个配置文件的名字就知道该怎么启动qbit了。
# 服务重载 systemctl daemon-reload # 启动qbit，注意需要指定运行qbit服务的用户 systemctl start qbittorrent-nox@jack.service # 设置开机自启 systemctl enable qbittorrent-nox@jack.service 默认端口8080，打开浏览器，访问http://host_ip:8080，默认用户admin，默认密码adminadmin，登录后就可以开始使用了。
分享 bt下载，tracklist很重要，这里分享一个网友整理的好用的tracklist。
指路👉：【XIU2/TrackersListCollection】</description>
    </item>
    
    <item>
      <title>Linux下自定义主机名称（hostname）</title>
      <link>https://ruohai.wang/202307/linux-change-hostname/</link>
      <pubDate>Fri, 14 Jul 2023 23:28:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-change-hostname/</guid>
      <description>查看当前的主机名
hostname 或者
hostnamectl 假定我想把hostname修改为WS1508，也就是硬件的型号。
修改hostname需要改两个文件，第一个/etc/hostname，可以用一条命令搞定，或者手动编辑。
hostnamectl set-hostname WS1508 第二个地方修改的文件是/etc/hosts，这里需要手动编辑。
nano /etc/hosts 示意图。
ipv4和ipv6两个ip后面都需要改成WS1508，保存退出
退出终端再重新登录以后就可以看到是新的主机名。</description>
    </item>
    
    <item>
      <title>Linux下设置静态IP（固定IP）</title>
      <link>https://ruohai.wang/202307/static-ip-address-config/</link>
      <pubDate>Fri, 14 Jul 2023 23:23:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/static-ip-address-config/</guid>
      <description>先查看自己设备的网卡名称
ifconfig 如果提示命令不存在，则先安装net-tools
apt install net-tools 获取到网卡名称后，在/etc/network/interfaces文件中进行编辑。子网掩码、网关地址、dns地址可以根据自己的实际网络情况进行调整。完成编辑以后保存退出。
# 开机自动启用eth0 auto eth0 # 使用静态ip iface eth0 inet static # ip地址 address 192.168.1.4 # 子网掩码 netmask 255.255.255.0 # 网关地址 gateway 192.168.1.1 # dns服务器 dns-nameservers 192.168.1.1 重启网络
service network restart 或者
systemctl restart network 如果以上两个命令都提示无效，直接重启吧。😄</description>
    </item>
    
    <item>
      <title>Linux下安装Docker Engine</title>
      <link>https://ruohai.wang/202307/install-docker-engine/</link>
      <pubDate>Fri, 14 Jul 2023 23:20:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-docker-engine/</guid>
      <description>在linux上安装docker，官方有详细的教程指导如何安装。但如果你和我一样用的linux发行版是debian以及debian的衍生发行版，可以直接用debian官方维护的docker.io。
apt install docker.io docker官方把docker.io称为unofficial packages非官方的版本。
因为docker.io是debian在维护而不是docker官方，而且2019年的时候曾经停止维护了1年导致版本落后太多。但现在不用担心docker.io版本问题，目前仓库里已经是20.10.24。</description>
    </item>
    
    <item>
      <title>Linux下添加自定义alias</title>
      <link>https://ruohai.wang/202307/alias-add-and-use/</link>
      <pubDate>Fri, 14 Jul 2023 23:14:36 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/alias-add-and-use/</guid>
      <description>针对当前用户
编辑用户目录下的.bashrc文件
nano ~/.bashrc 添加一行
alias ll=&amp;#39;ls -lah&amp;#39; 重载生效
source ~/.bashrc 全局生效
编辑/etc/bash.bashrc</description>
    </item>
    
    <item>
      <title>玩客云可用Armbian和OpenWrt固件分享</title>
      <link>https://ruohai.wang/202307/wky-firmware-share/</link>
      <pubDate>Fri, 14 Jul 2023 23:07:44 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wky-firmware-share/</guid>
      <description>玩客云，还有好多名字：赚钱宝、老母鸡、网心云，这里都指型号ws1608的那个小机器。
这机器现在pdd、闲鱼上的价格稳定在30rmb左右，但闲鱼上都要求10个起包邮，咱也不是矿场，买一两个回来玩玩就够了，所以我更推荐从pdd入手。
这机器玩了几个星期，目前来看，就能刷俩固件。第一刷armbian，然后根据自己需要手搓各种服务（file browser/qbittorrent/samba/alist/ddns-go/docker/typecho/cups/home assistant/&amp;hellip;），或者装casaos这种打包好各种服务的轻系统。第二刷openwrt当旁路由。也有很多人在armbian基础上再装openmediavault，但我根据omv官方的文档尝试了几次，不管是6.1内核还是5.9内核的固件，都没成功。
玩这种小设备肯定得去恩山论坛了，但论坛这种资源分享模式实在是太old school了，我不太喜欢，因为找资源太累。所以这里直接分享我用下来非常稳定的armbian和openwrt的两个固件下载地址。
armbian固件地址:https://github.com/hzyitc/armbian-onecloud
这个repo是根据上游armbian/build编译的玩客云专用固件。这里重点说下，固件名称中带burn字样的是线刷版本，刷入机内emmc；带minimal字样的是精简版。我用下来非常稳定。
openwrt固件地址：https://cloud.189.cn/t/rAv6v2ENnmAn （访问码：6hhb）
这个是恩山论坛里id:2224758988的用户分享的版本，我短暂体验了几天，也很稳定。如果上面这个链接失效，可以去【原帖地址】这里找。我对旁路由这种使用模式并不是很满意，所以用了几天以后就撤掉了。</description>
    </item>
    
    <item>
      <title>Linux下安装File Browser</title>
      <link>https://ruohai.wang/202307/filebrowser-installation-guide/</link>
      <pubDate>Fri, 14 Jul 2023 23:00:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/filebrowser-installation-guide/</guid>
      <description>第一步：新建安装目录
mkdir /usr/local/filebrowser 第二步：根据自己的硬件平台从【官方github repo】下载对应版本的安装包，这里以armv7为例。
# 进入安装文件夹 cd /usr/local/filebrowser # 下载安装包 wget https://github.com/filebrowser/filebrowser/releases/download/v2.23.0/linux-armv7-filebrowser.tar.gz # 解压 tar -zxvf linux-armv7-filebrowser.tar.gz 第三步：在安装目录/usr/local/filebrowser下新建config.json，添加配置信息。
# 创建配置文件 nano config.json 添加以下内容。其中root参数用来指定fireborwser展示的根目录，比如设定为/home，则webui中只能看到/home目录下的内容。
{ &amp;#34;port&amp;#34;: 8600, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/usr/local/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/var/log/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 第四步：把filebrowser添加到systemd服务。
# 创建配置文件 nano /etc/systemd/system/filebrowser.service 添加如下内容后保存退出。
[Unit] Description=The filebrowser Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/filebrowser/filebrowser -c /usr/local/filebrowser/config.json ExecStop=/bin/killall filebrowser PrivateTmp=true [Install] WantedBy=multi-user.target 第五步：systemd重载服务并设置开机启动
# 重载服务 systemctl daemon-reload # 启动filebrowser systemctl start filebrowser.service # 设置开机启动 systemctl enable filebrowser.</description>
    </item>
    
    <item>
      <title>Linux下Bash Shell开启命令自动补全</title>
      <link>https://ruohai.wang/202307/bash-completion-setup/</link>
      <pubDate>Fri, 14 Jul 2023 22:51:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/bash-completion-setup/</guid>
      <description>如果只是对单个用户生效，那下文中的/etc/bash.bashrc都要调整为~/.bashrc。
第一步：安装bash-completion。
apt install bash-completion 第二步：查看/etc/bash.bashrc文件中是否适配。
# 打开bash的用户配置文件 nano /etc/bash.bashrc 查看是否有下面这段内容，如果没有就添加到最后，保存退出。这段代码的意思是判断系统是否安装了bash_completion，如果安装则启用自动补全功能。
if ! shopt -oq posix; then if [ -f /usr/share/bash-completion/bash_completion ]; then . /usr/share/bash-completion/bash_completion elif [ -f /etc/bash_completion ]; then . /etc/bash_completion fi fi 第三步：重新加载用户的bash配置信息。
source /etc/bash.bashrc </description>
    </item>
    
    <item>
      <title>Linux下修改SSH默认端口</title>
      <link>https://ruohai.wang/202307/set-new-ssh-port/</link>
      <pubDate>Fri, 14 Jul 2023 22:28:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/set-new-ssh-port/</guid>
      <description>前言 这是一篇从搬瓦工vps的typecho搬过来的文章。对内容和格式做了轻微调整。
写这篇文章是因为前两天想动手改linux主机的默认ssh端口，但发现无论怎么改sshd_config文件都无济于事。简中互联网上以关键字ssh、修改端口之类搜出来的文章都千篇一律，再搜端口修改以后无效，出来的内容都说因为selinux。我就在这这个错误的方向上折腾了好久，但实际我的主机压根就没开启selinux。
最后用google搜英文关键字，才找到原因：systemd环境下ssh分为ssh.socket和ssh.service，这俩不同服务的配置文件完全不同。而较新的debian/ubuntu系统用的是ssh.socket。
找到问题原因以后就很好解决了，这里做简单记录。
查看ssh服务类型 要修改ssh默认端口，首先要分清楚自己linux机器的ssh是ssh.socket还是ssh.service。
systemctl status sshd 根据图中出现的ssh.socket字样区分。 ssh.service ssh.service的端口修改很简单，打开配置文件
nano /etc/ssh/sshd_config 找到port的配置进行修改
# 找到这条，默认是注释掉的，这里去掉注释 Port 22 # 添加一行自定义的端口 Port 12345 然后重启ssh服务即可
systemctl restart sshd 测试新端口OK以后，再注释掉旧端口然后重启sshd即可。
ssh.socket ssh.socket配置文件在/lib/systemd/system/ssh.socket，但我建议你千万不要去动原始文件。首先是这个配置文件会在更新openssh的时候被覆盖掉，其次在ssh.socket运行状态下修改配置文件，会导致ssh.socket服务出现异常（停止工作而且无法接受新的连接）。所以正确的配置方式如下
# 新建配置文件目录 mkdir -p /etc/systemd/system/ssh.socket.d 新建配置文件并写入监听端口信息
cat &amp;gt;/etc/systemd/system/ssh.socket.d/listen.conf &amp;lt;&amp;lt;EOF [Socket] # 这一栏需要保留，用来覆盖原配置文件中的22端口 ListenStream= # 这一栏填写新的ssh端口 ListenStream=1234 EOF 最后就是systemd重载服务并重启ssh了。
# 重载服务 systemctl daemon-reload # 重启ssh systemctl restart ssh 这个配置方法的参考来源：
https://askubuntu.com/questions/1439461/ssh-default-port-not-changing-ubuntu-22-10 https://discourse.ubuntu.com/t/sshd-now-uses-socket-based-activation-ubuntu-22-10-and-later/30189/6 从ssh.socket切换到ssh.service 讲真，我虽然已经掌握在ssh.socket模式下配置新端口的方法，但实际操作过程中还是碰到了ssh.socket异常的问题。那不如直接从ssh.socket切换到ssh.service吧！
# 禁用ssh.socket服务 systemctl disable --now ssh.socket # 启用ssh.</description>
    </item>
    
    <item>
      <title>Linux下用Hugo搭建博客并部署到Github Pages</title>
      <link>https://ruohai.wang/202307/hugo-setup-and-deploy-to-github/</link>
      <pubDate>Fri, 14 Jul 2023 15:15:15 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/hugo-setup-and-deploy-to-github/</guid>
      <description>前言 手上好几台armv7平台的电子垃圾，没错说的就是迅雷赚钱宝二代（ws1508）和迅雷玩客云（ws1608）。总琢磨着让这些电子垃圾在它们的生命末期发挥最后的光和热，给它们刷armbian、刷openwrt。正好我的搬瓦工vps还剩半个月要到期了，49.99刀/年的费用，对于现在的我也算是一笔不小的支出。能省则省，所以准备博客搬家。有很多捡垃圾玩家会把博客跑在自己的arm小主机上，但国内的网络环境下，自建服务器的备案和80/443端口解封根本无解，只能做到url:port进行公网访问，但这纯粹就是自娱自乐嘛。最后还是决定把博客部署到免费的github pages。
既然要用github pages，那只能用静态博客，无论是hexo、hugo还是jekyll，都需要一个本地的编译环境。既然如此，正好尝试一下在赚钱宝二代（ws1508）这台设备上安装hugo。
玩客云（ws1608）和赚钱宝二代（ws1508）主要硬件配置上一模一样，同样适用这个教程。
其实全平台都适用这个教程，只需要把apt install换成自己系统的版本就行了。
前期准备 一台功能正常的电脑/主机，linux/windows/macos/&amp;hellip;。赚钱宝二代的硬件是32位armv7，系统是armbian-bookworn github账号，假定用户名jack，并新建repo取名为jack.github.io 安装hugo 安装git apt install git 安装hugo。在armbian-bookworm的仓库里有hugo，在当下这个日期（2023-07-14），仓库里的hugo版本是v0.111.3，是2023年3月发布的。github hugo官方仓库的版本已经是v0.115.3。虽然都说喜新厌旧，但这不是巧了么，我就用armbian仓库的旧版。 apt install hugo 2023-07-17 update 这里补充一下通过下载官方github repo的二进制包安装的方法。
1-新建安装目录
mkdir -p /usr/local/hugo 2-到官方github repo下载对应自己硬件平台的包，我的设备是赚钱宝二代（ws1508），老朋友了，armv7。
cd /usr/local/hugowget https://github.com/gohugoio/hugo/releases/download/v0.115.3/hugo_0.115.3_linux-arm.tar.gztar -zxvf hugo_0.115.3_linux-arm.tar.gz 3-解压以后得到的hugo安装包默认就有可执行权限，接下去要做的是把hugo添加到环境变量。我这里把环境变量配置到~/.bashrc，仅对当前用户生效。如果要全局生效，可以添加到/etc/profile。
nano ~/.bashrc 末尾添加一行。
export PATH=$PATH:/usr/local/hugo 保存退出，重载配置使生效
source ~/.bashrc 4-到这部就安装完成了。执行以下命令查看是否成功。
hugo -h 如果安装成功的话，会出现hugo的帮助手册。
创建博客目录，下载主题 # 为方便管理在根目录新建data文件夹mkdir /data# 在data目录下创建博客目录cd data/hugo new site blog# 进入blog目录，进行git初始化cd blog/git init# 下载自己喜欢的主题（这里用m10c为例）git clone https://github.</description>
    </item>
    
    <item>
      <title>在Debian上用Speedtest CLI进行网络测速</title>
      <link>https://ruohai.wang/202307/speedtest-cli-setup/</link>
      <pubDate>Fri, 14 Jul 2023 14:57:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/speedtest-cli-setup/</guid>
      <description>前言 想要在debian下测一下公网网速，机器是赚钱宝二代（ws1508），系统是armbian/bookworm，硬件是32位armv7l。
tips：
debian apt仓库里有一个speedtest-cli的包，但这个包不是speedtest官方在维护，没有可用的中国境内的测速服务器 请用speedtest官方的包，官网指路：(https://www.speedtest.net/apps/cli) speedtest官方除了一键安装脚本，也提供了二进制包可以直接使用，根据自己喜好选择吧。
安装 两种安装方式：
一键安装脚本
ubunt/debian系linux的一键脚本
# 如果系统已经有curl可以跳过 sudo apt install curl # 下载脚本 curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash # 安装 sudo apt install speedtest 二进制包安装
创建目录、下载、解压。根据自己的硬件和系统下载对应版本。
# 创建目录 mkdir /opt/speedtest ; cd $_ # 下载二进制包，注意选择正确的硬件版本 wget https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-armhf.tgz # 解压 tar -zxvf ookla-speedtest-1.2.0-linux-armhf.tgz 解压以后就可以直接运行了
./speedtest 或者添加环境变量
nano ~/.bashrc 在末尾添加一行
export PATH=$PATH:/opt/speedtest-cli 然后重载生效，就可以直接使用speectest命令
source ~/.bashrc 使用 第一步：查看附近可用的测速服务器
使用命令查看附近可用的测速服务器
speedtest -L 显示附近的可用服务器列表
Closest servers: ID Name Location Country 36663 China Telecom JiangSu 5G Zhenjiang China 26352 China Telecom JiangSu 5G Nanjing China 5317 江苏电信5G Yangzhou China 17145 China Telecom AnHui 5G Hefei China 也可以限定自己所在的城市，比如杭州</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://ruohai.wang/202307/typecho-hello-world/</link>
      <pubDate>Tue, 27 Jun 2023 02:38:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/typecho-hello-world/</guid>
      <description>2023/06/27，凌晨2:38，终于在armbian上手搓了typecho，两次。
第一次主要是试错，手搓成功以后重新刷机按照刚刚实践成功的经验再搓一次，过程中因为有些配置调整，依然碰到了不少的问题。不过高兴的是，第二次又搓成功惹。
搞定了，睡觉。😄
update@2024/11/14 谁想到后来很快就从typecho迁移到了hugo + github pages 🤣
喝杯奶茶 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ruohai.wang/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruohai.wang/about/</guid>
      <description>关于 关于未来你总有周密的安排，然而剧情却总是被现实篡改。
关于现在你总是彷徨又无奈，任凭岁月黯然又憔悴地离开。
博客备用地址：【😹ฅ^•ﻌ•^ฅ】
联系方式 电报：Ruohai 邮箱：d2FuZ3J1b2hhaUBnbWFpbC5jb20= 微信 &amp;amp; 赞赏码 </description>
    </item>
    
  </channel>
</rss>
