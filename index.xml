<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/</link>
    <description>Recent content on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Aug 2023 00:10:32 +0800</lastBuildDate><atom:link href="https://ruohai.wang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用FFmpeg拼接行车记录仪的视频片段</title>
      <link>https://ruohai.wang/202308/ffmpeg-concat-video-clips/</link>
      <pubDate>Wed, 02 Aug 2023 00:10:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ffmpeg-concat-video-clips/</guid>
      <description>前言 行车记录仪的视频具有相同编码、相同分辨率、相同视频格式的特点。行车记录仪往往都是设定视频每n分钟为一个片段，比如我的行车记录仪设定就是1分钟一个片段。
假定现在有一段2小时的行车记录，那就意味着120个视频片段。我的需求是把这120个片段拼接成一个长视频，然后加速10~20倍，最后形成一个10分钟左右时长的小视频，然后扔youtube上存档。
一开始我用剪映来处理，但实际使用过成功，无论是素材的管理，还是全选120个素材进行统一加速调节，或者最终的视频导出，都算不上是好的体验。
正好这种同编码、同分辨率、同视频格式的视频拼接，用ffmpeg来实现非常方便且快速。所以拆分步骤，用ffmpeg来处理视频拼接，再把拼接出来的长视频导进剪映处理。
ffmpeg官网wiki有非常详细的操作指导，啃完文档以后，实测单纯拼接视频确实很快。这里就做简单的操作记录和英翻中。
拼接 首先，要有一份包含了所有视频片段完整文件名的文档（怎么生成这个文档看后面的脚本），mylist.txt，内容如下：
file &amp;#39;/path/to/file1.mp4&amp;#39; file &amp;#39;/path/to/file2.mp4&amp;#39; file &amp;#39;/path/to/file3.mp4&amp;#39; 然后用命令拼接视频
ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4 也可以用相对路径的格式，mylist.txt文档和视频文件放在同一个目录，内容如下：
file &amp;#39;file1.mp4&amp;#39; file &amp;#39;file2.mp4&amp;#39; file &amp;#39;file3.mp4&amp;#39; 拼接视频命令，相对路径的情况下，-safe 0可以省略
ffmpeg -f concat -i /path/to/mylist.txt -c copy output.mp4 参数解释：
-f 用来指定输入/输出的文件格式。 -i 用来指定输入的文件 -c 用来指定编码，copy就是直接复制，不重新编码 好了，到这里用ffmpeg拼接视频的过程就完成了，因为-c copy不涉及编码转换，所以任务处理速度非常快，基本取决于硬盘的读写速度。
生成文档 官网提供了脚本用例，用来生成mylist.txt这种符合格式的、包含了视频文件完整路径的文档。以下举例中的wav调整为自己视频的格式即可。
windows cmd命令
(for %i in (*.wav) do @echo file &amp;#39;%i&amp;#39;) &amp;gt; mylist.txt windows powershell命令
foreach ($i in Get-ChildItem .</description>
    </item>
    
    <item>
      <title>赚钱宝二代（WS1508）直刷固件的初始化设置</title>
      <link>https://ruohai.wang/202308/ws1508-init-setup/</link>
      <pubDate>Tue, 01 Aug 2023 21:33:24 +0800</pubDate>
      
      <guid>https://ruohai.wang/202308/ws1508-init-setup/</guid>
      <description>前言 不知不觉进入8月了，生活就这么碌碌无为又怅然若失。
ws1508的可用固件分为三种：
nand直刷armbian u盘启动armbian u盘启动openwrt 其中nand直刷armbian方案，在刷入固件以后，并不是开箱即用，还需要做一些初始化设置，这里做一些记录。
nand直刷固件原帖指路：【赚钱宝2代 Armbian 直刷包】软件随便装，可以apt-get，可以挂甜糖～
初始化 首先就是重新调整分区大小
resize2fs /dev/data 因为原固件没有预装ntp，需要手动设置时区
timedatectl set-timezone Asia/Shanghai 再手动设置时间，为避免后续update出异常，这里要求时间比正确时间晚一天。比如今天是2023-08-01
timedatectl set-time 2023-07-31 换源/etc/apt/source.list，这里选择用清华的源。固件是debian 10（buster），默认不支持https，所以这里用http。如果想上https，在清华debian源页面有提供设置方法，可以自行查阅。
deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free 还是换源，这次是文件/etc/apt/source.list.d/armbian.list，依然用清华的，依然是http。
deb http://mirrors.tuna.tsinghua.edu.cn/armbian buster main buster-utils buster-desktop 然后就可以执行apt update更新软件仓库了。但更新的时候会报错public key is not available，一般缺失的两个公钥是0E98404D386FA1D9和6ED0E7B82643E131，这里需要用命令重新导入公钥。注意俩公钥的编号，需要根据实际报错的公钥编号来调整。
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0E98404D386FA1D9 apt-key adv --keyserver hkp://keyserver.</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）的OpenWrt使用方法</title>
      <link>https://ruohai.wang/202307/ws1408-openwrt-use-guide/</link>
      <pubDate>Sun, 30 Jul 2023 23:58:50 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1408-openwrt-use-guide/</guid>
      <description>前言 周末回了一趟乡下，耽误了搞机。😄
ws1408只有一版openwrt固件，没有armbian。但之前俩月我都在折腾armbian，对openwrt没啥经验，这里简单记录下这两天折腾openwrt的内容。
首先openwrt也是linux魔改，意味着除了webui之外，还以ssh连上用命令行操作。
其次，这里要着重讲一下，ws1408用usb burning tool软件刷openwrt固件的时候，
【擦除flash】选项选【普通擦除】，千万不要选【全部擦除】
选后者会导致机器变砖，或者导致机器刷成功以后无法再刷机，必须要用usb ttl工具。
换源 首先是ws1408的软件源配置，固件自带的源是supes.top，访问不稳定，先换掉。这里用ustc中科大的源。
src/gz openwrt_core http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/targets/at91/sama5/packages src/gz openwrt_base http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/base src/gz openwrt_luci http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/luci src/gz openwrt_packages http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/packages src/gz openwrt_routing http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/routing src/gz openwrt_telephony http://mirrors.ustc.edu.cn/openwrt/releases/22.03.3/packages/arm_cortex-a5_vfpv4/telephony 注意ws1408要选at91/sama5和arm_cortex-a5_vfpv4这俩硬件分支的源。至于为啥我也不清楚，实际用下来确实没问题，试着装了samba4，一切正常。
常用命令 webui很多操作容易报错，有时候一些关键报错信息也不显示，所以还是命令行比较方便，真男人都用命令行。
更新软件仓库
opkg update 查找软件（比如samba）
opkg list | grep samba 安装软件
opkg install luci-app-samba4 ws1408的openwrt固件比较精简，默认只有root账户而且无法添加用户，需要安装useradd。
opkg install shadow-useradd 添加用户
useradd jack 设置密码
passwd jack 重启软件/服务。ws1408的openwrt固件用的init程序不是systemd，所以不能systemctl三件套了。比如这里要重启samba。
/etc/init.d/samba4 restart </description>
    </item>
    
    <item>
      <title>迅雷赚钱宝一代（WS1408）可用固件分享</title>
      <link>https://ruohai.wang/202307/ws1408-firmware-share/</link>
      <pubDate>Fri, 28 Jul 2023 20:30:01 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1408-firmware-share/</guid>
      <description>因为捡垃圾，手上有了两台赚钱宝一代，型号ws1408，接近10年龄的老机器了，硬件配置现在看来已经严重落伍。
但电子垃圾到了垃圾佬手上，但凡它还有一点点残余价值可以压榨，都不会把它丢进垃圾桶。
在恩山论坛一阵搜索以后，目前确定，ws1408能用的固件，只有openwrt。有线刷和u盘/tf卡卡刷两个版本。
openwrt可以装很多插件来实现qbittorrent、samba、ddns之类的功能，虽然百兆网口限制了用它当旁路由，但拿来当个samba文件共享服务器和下载机也是不错的。
因为原帖是要求回复可见固件获取地址，为了遵守社区规则，我这里只做帖子引路：
更新直刷包2023.03.27 赚钱宝1代WS1408 旁路由openwrt 22.03.3 内存卡或者U盘启动 线刷和卡刷两个版本都在这个帖子里下载。
这篇文章简单记录下线刷的注意事项：
双公头usb线 usb burning tool软件，最好是v2.1.6.8版本，因为其它版本存在一个bug，固件太大刷入成功后校验时间过长会直接跳任务失败 线刷的openwrt固件 update@2023/07/30：注意用usb burning tool软件刷机的时候，【擦除flash】一栏，务必选择【普通擦除】，不要选【完全擦除】。选后者会导致机器成砖，或者刷机成功以后下次刷机无法被usb burning tool软件识别，必须要上usb ttl工具。我踩坑了，已经下单usb ttl，各位准备刷机的朋友们注意。 实际刷机步骤注意事项：
机器先不要插usb线，我实测usb的供电会被这机器识别为通电，然后会自动开机 usb burning tool软件里选好固件，然后直接点击【开始】 用卡针捅进reset孔，并保持住 先插上usb线，如果识别为通电也无妨，usb burning tool会检测到硬件并开始刷机，如果未识别为通电，就正好插上电源 然后等usb burning tool完成刷机，提示成功以后拔usb线、拔电源。再捅上网线和电源，等开机，然后在路由器网关界面查看新增设备的ip，在浏览器中访问该ip即可。
线刷固件默认用户root，默认密码lanlan。
到此刷机完成，可以开始折腾卵路由，不是，软路由惹~
😄</description>
    </item>
    
    <item>
      <title>今天又捡了几个电子垃圾</title>
      <link>https://ruohai.wang/202307/i-picked-up-some-rubbish-today/</link>
      <pubDate>Fri, 28 Jul 2023 17:26:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/i-picked-up-some-rubbish-today/</guid>
      <description>今天收到了一个快递，是昨天在闲鱼上淘的几个电子垃圾：赚钱宝一代（ws1408）两个，赚钱宝二代（ws1508）两个。
感觉自己和迅雷赚钱宝系列磕上了。😄
一共4个设备，打包了网线和充电头，40块钱包邮，这个价格很难不让人心动啊！
赚钱宝一代ws1408 在恩山论坛搜了一下，这机器太老了而且硬件配置比二代ws1508更缩水
百兆网口，当旁路由都显得鸡肋 256MB的ram，😔 1GB nand flash rom，存储空间倒是给的很大方，但是受nand分区大小限制，最多只能识别80MB。 有1个tf卡槽 有一个usb2.0接口 目前能用的固件只有一版opewrt，支持直刷。下午尝试了刷机，都没啥难度，很快就刷上了openwrt。
那目前来看，ws1408的扩展可玩性的方案，就只能基于openwrt了。还好openwrt的可装的软件也挺多的，虽然灵活性上比不过armbian什么都能手搓，但总比没有固件要好。
赚钱宝二代ws1508 ws1508是老朋友了，之前已经30包邮收过两个，硬件配置：
百兆网口 usb2.0接口一个 nand flash，多少容量不记得了。但能直刷nand的固件最多只能识别4GB 512MB ram，比一代的内存容量翻倍 ws1508因为接口少了，所以可玩性差很多，唯一的usb2.0接口需要用来插启动u盘，导致没有任何扩展存储的可能。目前的玩法，刷armbian或者刷openwrt。
这次捡的俩ws1508里，有一个是emmc版本的，这算捡漏了，emmc版本有直刷固件，那一个金贵的usb2.0接口终于可以释放出来了。</description>
    </item>
    
    <item>
      <title>Linux下ssh.socket模式变更SSH端口（终结篇）</title>
      <link>https://ruohai.wang/202307/linux-change-ssh-port-under-ssh-socket/</link>
      <pubDate>Fri, 28 Jul 2023 10:55:34 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-change-ssh-port-under-ssh-socket/</guid>
      <description>前言 讲真我之前已经写文章记录过了怎么修改ssh的默认端口，不管是ssh.service还是ssh.socket，两个运行模式下的方法都有。
但是 是的，但是，我重装了这么多次的armbian，在ssh.socket模式下调整了n次默认端口，最后发现，无论怎么弄，都会出现问题，弄不好还容易搞得ssh都连不上。
行吧，经过我反复验证，得出最终有效的修改方法，100%有效，绝对有效。
如果你有更好的办法，可以twitter上给我发dm。
方案一：切换到ssh.service 是的，抛弃ssh.socket，回到传统的ssh.service，不要再去管什么socket什么listenstream，就用ssh.service，方便又好用。
# 滚他妈的socket systemctl disable --now ssh.socket # 欢迎service systemctl enable --now ssh.service 然后在/etc/ssh/sshd_config改成自己喜欢的端口就行了。
方案二：我TM就是要用ssh.socket 很好，你清高，你很棒。
办法有没有？还真有，需要在之前的方案上增加几个步骤，算是曲线救国。在ssh.socket运行的状态变更配置，最大的问题是它可能会突然异常停掉，或者重启ssh服务但新端口不生效。所以要让新端口生效的办法，就是先下手为强，上来就停掉ssh.socket，在它不运行的时候改配置，改完了再启动它。
第一步：禁用ssh.socket这个小可爱，换成ssh.service
# 滚他妈的socket systemctl disable --now ssh.socket # 欢迎service systemctl enable --now ssh.service 第二步：配置ssh.socket端口。是的，曲线救国，先tmd换成ssh.service，保证ssh.socket彻底停止，然后配置ssh.socket的端口。
# 新建目录 mkdir -p /etc/systemd/system/ssh.socket.d # 新建端口配置文件 touch /etc/systemd/system/ssh.socket.d/listen.conf 在listen.conf中添加如下内容，记得把12345改成自己喜欢的端口，保存退出。
[Socket] ListenStream= ListenStream=12345 修改完以后，重载服务
systemctl daemon-reload 第三步：从ssh.service换回ssh.socket 是的，所谓的曲线救国就是在这里~
# 老朋友完成任务了，送走 systemctl disable --now ssh.service # 把小可爱ssh.socket接回来 systemctl enable --now ssh.socket 完成这步曲线救国以后，可以查看下ssh的状态，看是否换成了新端口。
systemctl status ssh 第四步：到上面一步，ssh.</description>
    </item>
    
    <item>
      <title>玩客云WS1608控制LED灯的颜色</title>
      <link>https://ruohai.wang/202307/wky-turn-on-led-color/</link>
      <pubDate>Fri, 28 Jul 2023 07:52:03 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wky-turn-on-led-color/</guid>
      <description>玩客云这设备有个红、绿、蓝三色led灯，在刷入armbian系统以后，这个灯的颜色就会显示异常，往往是一直显示红色。
如果要自动动手调整led灯的颜色，控制命令如下（需要root用户执行）
echo 1 &amp;gt; /sys/class/leds/onecloud:blue:alive/brightness echo 1 &amp;gt; /sys/class/leds/onecloud:green:alive/brightness echo 1 &amp;gt; /sys/class/leds/onecloud:red:alive/brightness echo 1是开，echo 0就是关。现在可以组合出多种颜色，蓝绿、红蓝、红绿、红绿蓝。😄
但这个设置重启后失效。╮(╯▽╰)╭</description>
    </item>
    
    <item>
      <title>Linux下从0开始部署WordPress（二）</title>
      <link>https://ruohai.wang/202307/wordpress-installation-guide-2/</link>
      <pubDate>Fri, 28 Jul 2023 06:36:23 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-installation-guide-2/</guid>
      <description>前言 上篇文章链接：Linux下从0开始部署WordPress（一）
上篇说到了apache2的安装与配置，一直想着继续完成wordpress的教程，但拖延症发作，😄
复习一下wordpress的安装步骤：
有一台主机或vps（系统选linux，这里以debian为例） 安装web server(选apache2) 安装数据库（选mariadb） 安装php 配置wordpress 这篇就写一下安装数据库吧！
安装数据库 wordpress官方对数据库的要求：
MySQL5.7或更高版本 MariaDB 10.3或更高版本。
sun公司自从被oracle收购以后，原来sun公司旗下的产品都变成了oracle公司的资产，开源社区对oracle也是唯恐避之不及，现在debian仓库里连mysql都没有了。我不想去下安装包，所以这里数据库方案选择用mariadb。
一键安装
apt install mariadb-server 安装完成后，先用数据库自带的mysql_secure_installation进行简单的安全加固。执行下面这个命令，接下去会出现6个交互对话，需要选择yes/no。
mysql_secure_installation 第一个问题：是否切换到unix_socket认证。这里指mariadb的root账户身份认证是用密码还是unix_socket。unix_socket在简中互联网上几乎搜索不到什么有用的资料，出问题了不好解决，所以选n，用密码认证。
Setting the root password or using the unix_socket ensures that nobody can log into the MariaDB root user without the proper authorisation. You already have your root account protected, so you can safely answer &amp;#39;n&amp;#39;. Switch to unix_socket authentication [Y/n] 第二个问题：是否修改root账户的密码。毫无疑问这里选Y。然后就是设置root账户的新密码了。
Change the root password? [Y/n] 第三个问题：是否移除匿名用户。选Y</description>
    </item>
    
    <item>
      <title>Linux下用dd进行磁盘测速</title>
      <link>https://ruohai.wang/202307/linux-disk-io-speed-test/</link>
      <pubDate>Fri, 28 Jul 2023 03:09:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-disk-io-speed-test/</guid>
      <description>前言 linux想要对磁盘进行测速，有几个方案，比如hdparm、fio，还有最简单的dd。
因为另外俩软件都要安装，而且我对测速结果的精度要求也不高，本着less is more原则，这里就用系统自带的dd来进行测试。
测速 开头先定义（解释）一下/dev/zero和/dev/null这俩设备。这俩官方名称叫伪设备，或者空设备，只用来做一些特殊用途。比如这里就用它俩来测磁盘的io性能。
/dev/zero，可以理解为无尽之水，只要从这个设备进行读操作，它就可以源源不断的提供空数据流。 /dev/null，可以理解为无尽黑洞，任何写入这个设备的数据，都会消失。 测试写速度：
dd if=/dev/zero of=/home/jack/testfile bs=500M count=1 oflag=direct 参数解释：
bs=500M, 数据块的大小，这里设定500MB。 count=1，指定多少个数据块，配合bs一起使用 oflag=direct，指定直接写入磁盘，不用缓存 测速以后得到结果：
测试读速度：
dd if=/home/jack/testfile of=/dev/null iflag=direct 测速结果如下：
参考文章 Linux如何查看与测试磁盘IO性能：https://www.cnblogs.com/mauricewei/p/10502539.html </description>
    </item>
    
    <item>
      <title>使用iPerf3进行局域网的简单测速</title>
      <link>https://ruohai.wang/202307/iperf3-use-guide/</link>
      <pubDate>Fri, 28 Jul 2023 00:48:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/iperf3-use-guide/</guid>
      <description>前言 之前文章写过在linux进行测速，但用的是speedtest-cli，这软件是用来测公网网速的，如果想测局域网网速，需要用到的软件是iperf3。
iperf3，纯命令行界面，真男人都用命令行。官网有详细的【使用手册】，但是全英文。啃完文档，使用过程做个简单记录。
iperf3的使用，需要用到两台机器，一台服务器server，另一台客户端client，服务器负责监听请求，客户端负责发送请求，最终完成局域网的测速。所以，需要准备两台机器，如果只有一台，可以考虑虚拟机。
如果想测试公网网速，也可以，iperf3官网有公开的测速服务器。
安装 我手上的两台机器，一台是windows，一台是debian linux。
先记录windows下的安装。官网下载地址：下载地址。下载以后解压即可，里面有俩文件。
再记录下debian下的安装，简单，仓库就有。安装过程中会弹窗问你要不要把iperf3设置为守护进程（daemon）并设置为开机启动，根据自己需求选择yes或者no。
apt install iperf3 到这里，两台电脑的下载/安装就完成了，接下去开始使用！
使用 首先，启动服务端server，用来监听请求。这里我先用windows做服务端，命令行工具使用系统自带的cmd。-s指定为服务器server模式，-p指定监听的端口。
# 进入文件夹 cd C:\Users\Jack\Desktop\iperf-3.1.3-win64 # 以服务端模式启动。 iperf3.exe -s -p 33333 然后在另一台电脑上启动客户端并发送请求，我这里客户端电脑是debian。-c指定为客户端client模式，后面跟局域网内服务器电脑的ip地址，-p是指定服务端的接收端口。
iperf3 -c 192.168.1.4 -p 33333 跑完以后就可以看到局域网内两台机器的测速结果了。如下图，测速结果914Mbps，几乎跑满千兆带宽，说明我的两台电脑之间的交换机、网线、路由器没有出现网速瓶颈。
两台电脑如果要变换服务器和客户端的角色，只要反向使用-s和-c的参数即可，或者参考下面的进阶使用。
进阶使用 以上只是用最简单的命令完成了局域网内两台电脑之间的tcp测速。
如果想测速时间从默认的10s调整为60s，通过客户端电脑的-t参数设定
iperf3 -c 192.168.1.4 -p 33333 -t 60 如果想测试udp的速率，客户端电脑的命令需要添加-u指定udp协议，并且用-b指定带宽，我的内网是千兆，这里设定-b 1000M，如果不设定带宽，默认是1Mbps。
iperf3 -c 192.168.1.4 -u -b 1000M -p 33333 其它进阶使用参数，直接看手册吧。
-p, --port #，Server 端监听、Client 端连接的端口号； -f, --format [kmgKMG]，报告中所用的数据单位，Kbits, Mbits, KBytes, Mbytes； -i, --interval #，每次报告的间隔，单位为秒； -F, --file name，测试所用文件的文件名。如果使用在 Client 端，发送该文件用作测试；如果使用在 Server 端，则是将数据写入该文件，而不是丢弃； -A, --affinity n/n,m，设置 CPU 亲和力； -B, --bind ，绑定指定的网卡接口； -V, --verbose，运行时输出更多细节； -J, --json，运行时以 JSON 格式输出结果； --logfile f，输出到文件； -d, --debug，以 debug 模式输出结果； -v, --version，显示版本信息并退出； -h, --help，显示帮助信息并退出。 Server 端参数： -s, --server，以 Server 模式运行； -D, --daemon，在后台以守护进程运行； -I, --pidfile file，指定 pid 文件； -1, --one-off，只接受 1 次来自 Client 端的测试，然后退出。 Client 端参数 -c, --client ，以 Client 模式运行，并指定 Server 端的地址； -u, --udp，以 UDP 协议进行测试； -b, --bandwidth #[KMG][/#]，限制测试带宽。UDP 默认为 1Mbit/秒，TCP 默认无限制； -t, --time #，以时间为测试结束条件进行测试，默认为 10 秒； -n, --bytes #[KMG]，以数据传输大小为测试结束条件进行测试； -k, --blockcount #[KMG]，以传输数据包数量为测试结束条件进行测试； -l, --len #[KMG]，读写缓冲区的长度，TCP 默认为 128K，UDP 默认为 8K； --cport ，指定 Client 端运行所使用的 TCP 或 UDP 端口，默认为临时端口； -P, --parallel #，测试数据流并发数量； -R, --reverse，反向模式运行（Server 端发送，Client 端接收）； -w, --window #[KMG]，设置套接字缓冲区大小，TCP 模式下为窗口大小； -C, --congestion ，设置 TCP 拥塞控制算法（仅支持 Linux 和 FreeBSD ）； -M, --set-mss #，设置 TCP/SCTP 最大分段长度（MSS，MTU 减 40 字节）； -N, --no-delay，设置 TCP/SCTP no delay，屏蔽 Nagle 算法； -4, --version4，仅使用 IPv4； -6, --version6，仅使用 IPv6； -S, --tos N，设置 IP 服务类型（TOS，Type Of Service）； -L, --flowlabel N，设置 IPv6 流标签（仅支持 Linux）； -Z, --zerocopy，使用 “zero copy”（零拷贝）方法发送数据； -O, --omit N，忽略前 n 秒的测试； -T, --title str，设置每行测试结果的前缀； --get-server-output，从 Server 端获取测试结果； --udp-counters-64bit，在 UDP 测试包中使用 64 位计数器（防止计数器溢出）。 参考文章 iperf官网用户手册（英文）：iPerf user docs iperf3：网络测试工具及测试用例+参数详解 </description>
    </item>
    
    <item>
      <title>Hugo实现插入Bilibili的视频</title>
      <link>https://ruohai.wang/202307/hugo-add-bilibili-video-support/</link>
      <pubDate>Thu, 27 Jul 2023 21:28:20 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/hugo-add-bilibili-video-support/</guid>
      <description>前言 hugo博客想要插入视频，肯定是和图片一样的模式，先把视频上传到第三方视频网站（youtube、bilibili），然后通过嵌入代码的形式实现在博客内展示。
bilibili官网就提供了【嵌入代码】，但实测不是简单的直接复制粘贴就可以。
找到了两个方案，我实测以后，通过hugo的shortcodes功能实现的方式比较好，一劳永逸，而且也不用改安全设置。
我推荐方案一。
方案一：shortcodes shortcodes方案原理类似创建代码模板，然后页面直接调用模板来实现视频嵌入。
在博客的根目录的layouts目录下新建shortcodes目录，然后新建文件bilibili.html。实际路径是/layouts/shortcodes/bilibili.html。
在bilibili.html中添加如下内容：
&amp;lt;div style=&amp;#34;position:relative; padding-bottom:75%; width:100%; height:0&amp;#34;&amp;gt; &amp;lt;iframe src=&amp;#34;//player.bilibili.com/player.html?bvid={{.Get 0 }}&amp;amp;page={{ if .Get 1 }}{{.Get 1}}{{ else }}1{{end}}&amp;#34; scrolling=&amp;#34;no&amp;#34; border=&amp;#34;0&amp;#34; frameborder=&amp;#34;no&amp;#34; framespacing=&amp;#34;0&amp;#34; allowfullscreen=&amp;#34;true&amp;#34; style=&amp;#34;position:absolute; height: 100%; width: 100%;&amp;#34;&amp;gt; &amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt; 然后在博客的markdown文件的内容中插入视频：
{{&amp;lt; bilibili BV号 &amp;gt;}} 或 {{&amp;lt; bilibili BV号 选集号 &amp;gt;}}
到此，就实现在markdown/静态页面中嵌入视频代码了。
方案二：直接插入html代码 bilibili的每个视频下方的分享方式里都提供了嵌入代码，直接复制粘贴到markdown页面。
复制出来的代码如下：
&amp;lt;iframe src=&amp;#34;//player.bilibili.com/player.html?aid=530985056&amp;amp;bvid=BV1Gu411L7iR&amp;amp;cid=1197648479&amp;amp;page=1&amp;#34; scrolling=&amp;#34;no&amp;#34; border=&amp;#34;0&amp;#34; frameborder=&amp;#34;no&amp;#34; framespacing=&amp;#34;0&amp;#34; allowfullscreen=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;/iframe&amp;gt; 但这段代码默认不会渲染成html，需要修改hugo的安全设置。
编辑config.toml（新的hugo版本配置文件应该是hugo.toml），添加如下内容。
[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true 现在就可以看到视频嵌入成功了。但是b站默认的视频嵌入代码可能展示的样式不太好看，可以参考方案一中的代码自行调整。
参考文章 youtube/vimeo/bilibili/西瓜的视频嵌入方式：【在 gohugo 中如何嵌入视频 】 bilibili的视频嵌入方式：【利用hugo的短代码功能插入b站视频并且自适应】 </description>
    </item>
    
    <item>
      <title>今天吃鸭！</title>
      <link>https://ruohai.wang/202307/%E4%BB%8A%E5%A4%A9%E5%90%83%E9%B8%AD/</link>
      <pubDate>Thu, 27 Jul 2023 19:30:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/%E4%BB%8A%E5%A4%A9%E5%90%83%E9%B8%AD/</guid>
      <description>😄</description>
    </item>
    
    <item>
      <title>Linux下UFW的简单配置和使用</title>
      <link>https://ruohai.wang/202307/linux-ufw-setup/</link>
      <pubDate>Wed, 26 Jul 2023 13:25:45 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-ufw-setup/</guid>
      <description>前言 之前在armbian上用的防火墙是firewalld，基础使用挺方便的。但后来发现另一个防火墙软件，ufw，使用更简单更方便，至少命令行就简短了一大截。而且每次新增规则、删除规则，也不需要在一次次重载。使用体验上比firewalld不知道高到哪里去了。😄
ufw是ubuntu默认的防火墙方案，用来简化iptables的配置。
如果只是用防火墙的基础功能，可以试试ufw。
使用 第一步就是安装了，没法难度，一条命令搞定
apt install ufw 安装好以后，查看启用状态。ufw默认是不启用的。
ufw status 启用ufw。ufw启用以后，默认放行所有出的流量，但拒绝所有进的流量。所以在启用以后，千万不要着急退出终端，务必要留意放行ssh服务，但ssh默认规则是22端口，如果是自定义的ssh端口，则需要放行指定端口。
ufw enable 放行端口，不指定协议的话默认tcp + udp
ufw allow 12345 放行端口并指定tcp协议
ufw allow 23456/tcp 放行服务
ufw allow samba 删除已经添加的规则。有两个办法，第一步是获取规则的数字编号，然后删除指定编号的规则。注意这里删除编号，每次删除一个以后，剩下的规则会重新排序，编号会变，所以每次删之前都要重新获取最新的数字编号。
# 查看规则的编号 ufw status numbered # 删除指定编号的规则 ufw delete 4 第二种删除已有规则的方法就比较简单。假定当前有个规则是allow 80/tcp，直接delete即可。
ufw delete allow 80/tcp 高阶功能 更多高阶使用方法，可以查看ubuntu官方的帮助手册，→ https://help.ubuntu.com/community/UFW</description>
    </item>
    
    <item>
      <title>Linux下udevil无法自动挂载exfat格式U盘的问题解决</title>
      <link>https://ruohai.wang/202307/udevil-doesnt-amount-exfat-bugfix/</link>
      <pubDate>Tue, 25 Jul 2023 21:06:10 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/udevil-doesnt-amount-exfat-bugfix/</guid>
      <description>前言 之前文章提到过，我在linux下用来实现u盘、移动硬盘自动挂载的方案是udevil。这个方案的好处是安装了udevil以后，几乎是0配置，随便插任何u盘、移动硬盘都可以自动挂载。而且udevil的软件包依赖关系非常简单，不会出现本体几百kb但是需要几个mb的依赖包。
但是今天碰到了一个bug，就是udevil无法自动挂载exfat格式的u盘，换ext4、ntfs都正常，只有exfat不行。
照例上网搜解决方案，最后在官方repo的issue里找到了。
bugfix 先贴上两个解决方案的链接：
Udevil dont mount usb-stick (exfat fs) with linux kernel 5.5.3 udevil doesn&amp;rsquo;t mount exfat media 可以留意到其中一个issue的发布时间是2014年，也就是从2014至今，快10年的时间了，这个bug都没有修复。
解决方案就是编辑udevil的配置文件，路径/etc/udevil/udevil.conf，找到default options的配置块，其中有一条default_options_exfat记录，把这条记录中的noempty参数删掉，然后重启udevil服务即可。
修改完以后重启udevil服务。注意命令中的jack改成自己linux系统的用户账户名。
systemctl restart devmon@jack.service </description>
    </item>
    
    <item>
      <title>Linux使用dd命令克隆磁盘（制作系统镜像）</title>
      <link>https://ruohai.wang/202307/linux-use-dd-to-clone-disk/</link>
      <pubDate>Mon, 24 Jul 2023 06:57:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-use-dd-to-clone-disk/</guid>
      <description>前言 最近经常玩电子垃圾，之前都是刷别人制作好的初始系统镜像img文件，每次刷机都要进行一些基础配置：替换固件中的一些文件、设置账户和密码、改国内源、改ssh配置、装基础软件。
但因为我经常重刷，每次重刷又要把上面提到的基础配置流程走一遍，少说也要半个小时。重复了一次又一次以后，我肯定要考虑自己制作镜像文件了，类似早年的windows ghost，把完成了基础配置的系统直接做成镜像，下次刷机就不用再无意义的重复了。
linux下实现这个功能，用dd命令。
准备工作 目的是备份整个系统盘 假定系统盘是/dev/sda 要另一个u盘或者移动硬盘做备份盘，这里假定备份盘为/dev/sdb。 制作镜像 第一步：插上备份盘，用命令lsblk确认系统盘和备份盘的名称，系统盘为/dev/sda，备份盘为/dev/sdb。
第二步：挂载备份盘到/mnt
mount /dev/sdb /mnt 第三步：制作镜像。
dd if=/dev/sda of=/mnt/sda_bakcup.img 这是最简单的备份方式，不考虑任何其它参数（比如bs和count），就是1:1的备份，如果系统盘是2GB（指整个盘的大小，不是指已使用的空间），那制作出来的镜像也就是2GB。
如果想制作的镜像是压缩包，减少占用空间，这里以xz格式为例
dd if=/dev/sda | xz &amp;gt; /mnt/sda_backup.img.xz 优化 dd命令可以通过增加-bs和-count来优化传输速度和镜像大小。
先看下bs和count的定义：
bs=bytes：指block size，用来设定多少了bytes为一个block，系统就以一个block为数据单位进行读取和写入。可以分成ibs和obs两个参数分别设定读和写。
count=blocks：设定整个dd任务读取多少个blocks的数据。
bs用来设定每次读写的数据量，读取指定数据量为一个块（block）到缓存，然后从缓存把指定的数据量写到备份盘。无论是u盘、hdd还是ssd，一般大文件的连续读写速度都是远远高于小文件的随机读写，所以这个值可以设置的大一些。但也要根据自己的实际情况调整，比如小文件特别多时，可以分开设定读的数据量（ibs）和写的数据量（obs），更好的优化速度。
count用来设定读取多少个块（block）以后停止读取。如果这个值留空，默认全盘克隆，也就意味着原盘20G，生成的镜像也是20G，原盘如果200G，镜像就是200G，所谓1:1复制。但实际其实只需要克隆数据就可以了，没有使用的空白空间不需要写到镜像里，比如200G的盘，实际只使用了8GB，假定bs=1M，计算以后可得count应该是8192，考虑到空间冗余，可以设定count=9000，那生成的镜像文件就是9000M，不会出现无意义的空白空间占用镜像体积。
另外还可以整合xz、gzip之类的压缩命令，把镜像生成为压缩包，减少镜像文件的体积。但要注意，压缩需要cpu算力性能的支持，如果cpu性能孱弱（比如我的ws1508），使用xz命令以后会爆炸式的增加dd制作镜像的时间。所以cpu性能弱的就不用考虑整合xz命令。
xz命令可以通过-T增加线程数，默认是1。 增加三个参数以后的例子：
dd bs=1M count=1400 if=/dev/sda | xz -T3 &amp;gt; /mnt/backup-20230724.img.xz ╮(╯▽╰)╭
参考文章 1： https://www.runoob.com/linux/linux-comm-dd.html</description>
    </item>
    
    <item>
      <title>VSCode插件Remote-SSH的使用与体验</title>
      <link>https://ruohai.wang/202307/vscode-remote-ssh-learn-to-use/</link>
      <pubDate>Sun, 23 Jul 2023 02:29:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/vscode-remote-ssh-learn-to-use/</guid>
      <description>前言 久闻vscode插件remote-ssh的大名，很多人用这个组合来进行远程开发。但作为一个水货前java web程序员，我之前并没有兴趣去了解它，一个是因为vscode做java web的ide功能太孱弱，另一个是我当时的工作并不需要我随时oncall上线写代码改bug。
但最近我不是闲下来了嘛，而且经常在用linux，正好有机会可以了解一些错过的热点。
配置 首先当然是在vscode里安装remote-ssh插件了。没啥难度，在扩展商店里搜remote-ssh，排第一那个插件，安装！排在后面的remote-explorer之类插件不用管，等需要的时候vscode会自己安装。
安装完以后，vscode侧边栏会出现一个新的图标，就是remote-ssh的入口惹。
但现在还暂时不能用，需要先配置远程主机的rsa密钥认证，实现免密登录。
这里再简单记录以下配置过程。
先确保windows已经安装了openssh，方法是打开cmd，输入ssh并回车，看是否有命令提示。没安装的话网上搜以下windows下安装openssh，教程很多。 生成rsa密钥、linux中sshd_config文件的配置，我之前已经写过了，【Linux下配置RSA公钥认证登录】。
我本地电脑使用的是windows，文章我也写过了，【Windows下用CMD实现SSH连接】。
完成上面几步之后，点击vscode侧边栏的remote-ssh入口，就可以看到配置好的远程主机了。
选择主机，右键或者点击主机名右侧的小图标，选择当前窗口或者新窗口打开后，短暂的rsa密钥认证之后，就完成ssh远程访问主机了。
连接成功以后。就可以点击侧边栏的【打开文件夹】或者按快捷键ctrl+p，选择需要打开的文件。
选完文件夹之后（我这里直接选了根目录/），然后就可以把这个远程目录在vscode中当作本地文件夹来使用了。 后记 没有体验之前，一直不明白很多人夸赞的vscode + remote-ssh具体是干嘛用的，到底是怎么个远程开发法。今天完成了安装配置和使用，终于明白了，它就是类似用ssh协议把远程主机的指定目录映射到本地当作本地文件夹使用，就像smb/samba和webdav，只是限定了文件管理器和ide都是vscode。它甚至可以直接映射远程linux主机的根目录/。所谓远程开发，也就是本地vscode + 远程主机上的项目文件。
那我想，有没有可能，就不限制于vscode和remote-ssh，而是和smb/samba、webdav一样，通过ssh协议，真的把远程目录映射到本地，作为一个本地文件夹使用，这样的话，ide就可以随便选了。
搜了下，还真有这样的方案，叫做sshfs-win，项目地址：https://github.com/winfsp/sshfs-win</description>
    </item>
    
    <item>
      <title>Linux下从0开始部署WordPress（一）</title>
      <link>https://ruohai.wang/202307/wordpress-installation-guide/</link>
      <pubDate>Sat, 22 Jul 2023 21:51:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-installation-guide/</guid>
      <description>前言 虽然上一篇文章说我炸了，哦不是，我悟了，以后不用linux了。但奈何我还有好几篇软件/服务的安装记录没有写，比如这篇wordpress的部署安装。
wordpress的安装教程网上多如牛毛，本来也不差我这一篇。但我在wordpress这个坑，不是，这个软件上耽搁了十多年，有很大的原因正是网上的教程多如牛毛。十多年前如此，现在依然如此。
wordpress官方有著名的5分钟安装教程，但这个教程前提是已经搭好了环境。很多热心网友写了很多教程，但大部分在记录的时候都省略了很多细节且毫无条理，有很多一上来就让装宝塔面板、让装xmapp。NO，这些都不是我想要的，我想要一个从一个干净的linux系统开始一步步记录的，我想要的是一个小白按照这篇文章一步步操作就能完成搭建自己的wordpress。
wordpress说白了就是一个php网站模板，既然是网站，就需要一些配套的服务，简而言之，搭建wordpress，分为5个步骤：
有一台主机或vps（系统选linux，这里以debian为例） 安装web server(选apache2) 安装数据库（选mariadb） 安装php 配置wordpress 因为内容比较多，所以准备分成几篇来写。这篇的主要内容是：apache2的安装和配置。
前期准备 有一台linux主机，或者vps。这里以debian为例。
安装apache2 web server可选nginx或者apache2，这里以apache2为例。
apt install apache2 等命令跑完以后，在浏览器中访问主机的地址，http://host-ip，看是否显示apahce2的欢迎页面。
默认到这一步就完成了apache2的安装，但这里有一些进阶内容（如何修改apache2配置文件），如果没有兴趣看的话，恭喜你，下面内容都不用看了！
进阶内容 apache2的网站根目录默认路径是/var/www/html，有很多教程确实就会把wordpress安装到这个目录下。但这有两个问题，一个是我想自定义网站目录方便管理（假定/data/wordpress），二是var目录下涉及root权限。
要自定义网站目录，就要编辑apache2的配置文件，路径/etc/apache2，目录结构如下：
apache2.conf是总配置文件，一般不动 网站配置文件放在sites开头的两个文件夹下，其中sites-available是可用的配置，sites-enabled是实际生效的配置。 sites-enabled里面的的那个默认文件000-default.conf只是个软链接，真实文件在sites-available 所以合理的配置方法是：在sites-available修改或者直接新建，然后把配置文件通过软链接放到sites-enabled使其生效 那就开始配置吧！这里选择删掉默认的那个000文件，新建wordpress.conf，方便辨认和管理。
# 进目录 cd /etc/apache2/sites-available # 删掉默认文件 rm 000-default.conf # 创建新文件 nano wordpress.conf 添加如下内容，保存后退出。网站默认80端口，端口要自定义的话改掉80。
&amp;lt;VirtualHost *:80&amp;gt; DocumentRoot /data/wordpress &amp;lt;Directory /data/wordpress&amp;gt; AllowOverride none Require all granted &amp;lt;/Directory&amp;gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &amp;lt;/VirtualHost&amp;gt; 然后创建软链接
# 进目录 cd /etc/apache2/sites-enabled # 创建软链接 ln -s .</description>
    </item>
    
    <item>
      <title>我悟了~</title>
      <link>https://ruohai.wang/202307/i-boomed/</link>
      <pubDate>Sat, 22 Jul 2023 17:56:35 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/i-boomed/</guid>
      <description>翻看了闲鱼捡垃圾的记录，还有网心云的收益记录，开始折腾armbian应该是从6月18号开始，今天是7月22号，算起来一个月多4天。
但给我的感觉是最近半年似乎都在折腾armbian/debian/linux。
今天又是准备刷机，但不是给ws1608刷，不是给ws1508刷，是给闲置了两年多的intel nuc11pahi5刷，准备刷个debian。
但一下午都在翻车，从中午12点开始，翻车到傍晚5点，整整5个小时。一开始是忘记了给x86刷机的U盘只是做引导 + 系统镜像的作用，不像armbian小主机那样u盘是启动盘+系统盘二合一。后来是debian netinst版本在装机的时候必须要联网，这我能理解，而且我已经在虚拟机里装过好多次了，虽然联网下载软件确实有点耗时，但之前每次耗时大概也就5~20分钟左右。不过下午在nuc上安装的时候，联网下载的预计时间竟然离谱的要3~4小时甚至一度出现了天（D）这个时间单位，卧槽我明明已经选择了国内ustc的镜像站啊，马勒戈壁。再然后我依然用netinst的镜像安装但是这次选择不选镜像站而是跳过这一步！结果还没来得及称赞自己机智就被debian打了脸，离线安装以后竟然连open ssh server都没有，意思是ssh都没法连。既然netinst版翻车，我换完整版吧，完整版（dvd）的体积竟然达到了惊人的3.7GB。作为debian衍生的ubuntu server才1.7G啊。我估计完整版里应该是塞了所有的桌面环境吧。
到这一刻我对debian的厌恶已经达到了顶峰，为什么要有必须联网安装的netinst版，为什么完整版要塞那么多东西进去，为什么不能像ubuntu那样分出各种flavor的单独安装包和单独的server版本。马勒戈壁。
(╯‵□′)╯︵┻━┻
然后我觉得自己悟了（i boomed），获得了inner peace。我拆掉了nuc和它硕大笨重的电源适配器，重新装进包装盒，拆掉了显示器，拆掉了ws1508，删掉了虚拟机里的debian，重置了vps上的debian，把各种线缆绕好再用捆扎带邦好统统放进收纳箱。
只保留了一台ws1608当作qbit下载机器和samba文件服务器。
看了下时间，7月22号。
不玩linux了。</description>
    </item>
    
    <item>
      <title>Linux下user is not in the sudoers file问题的解决</title>
      <link>https://ruohai.wang/202307/linux-sudo-previlege-error-fix/</link>
      <pubDate>Sat, 22 Jul 2023 01:52:09 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-sudo-previlege-error-fix/</guid>
      <description>前言 最近linux使用的越来越频繁，对用户、组、权限开始慢慢多了一些了解，慢慢就从之前root一把梭改成用禁掉root登录 + 低权限账号配合sudo进行系统管理。
但这样谨慎的操作的日常使用中碰到了一些问题，比如在vps和自己的虚拟机上安装debian时，从root切换到低权限账户（假定是jack），用sudo会提示jack is not in the sudoers file，甚至在root账号下也会提示sudo: command not found。
这种情况之之前在用ubuntu和armbian的时候没见过啊，搜了一些解决方案，这里做简单记录。
报错：sudo: command not found 这个报错通常情况下是因为sudo没有安装。讲真我也用过好多linux发行版（在虚拟机里简单体验），这还是第一次见到连sudo都没装的。
apt install sudo 报错：jack is not in the sudoers file 网上有一些劣质的文章里说这个报错的解决方案是在/etc/sudoers加一条。
jack ALL=(ALL:ALL) ALL NO，不是这么改的。不是直接给用户授权，而是给sudo组授权，通过sudo命令来让低权限用户临时使用root权限。
先确认/etc/sudoers配置文件里有没有这一条，没有就加上去，保存退出。
%sudo ALL=(ALL:ALL) ALL 然后执行以下命令，把用户jack添加到sudo组。
usermod -aG sudo jack 到这里就完成配置了。默认jack是低权限账户，需要root权限时通过加sudo命令来授权。</description>
    </item>
    
    <item>
      <title>这个10多年的坑我今天终于把他趟平了~</title>
      <link>https://ruohai.wang/202307/wordpress-i-nailed-it/</link>
      <pubDate>Fri, 21 Jul 2023 22:10:19 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wordpress-i-nailed-it/</guid>
      <description>说起来大学的时候就想自己折腾wordpress了，但毕竟不是计算机专业，网上的教程搜了好几天，从vps到域名，从环境搭建到参数配置，各种wordpress五分钟教程琢磨了好几天，愣是没搞明白。
这件事就这么搁置了，一搁置就是这么多年。因为之前受的折磨给我留下的太深的伤害，所以之后再弄博客，选hexo选typecho选hugo我都不会去选wordpress。
但今天心血来潮，准备把这个坑填了。
说来惭愧，虽然这些年中间我也转行当了几年水货程序员（java web），但今天弄wordpress，十多年前的那种茫然无措的感觉再一次体验到了。
但是现在，right now，我搞定它了~
明天我就写一篇【从0开始动手搓一个wordpress网站】的教程，要为wordpress的安装教程正本清源！让完全没有编码经验的小白也可以按部就班的完成搭建！
😄</description>
    </item>
    
    <item>
      <title>Linux下CIFS设置开机自动挂载smb共享文件夹</title>
      <link>https://ruohai.wang/202307/cifs-auto-mount-at-linux-start-up/</link>
      <pubDate>Fri, 21 Jul 2023 00:37:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/cifs-auto-mount-at-linux-start-up/</guid>
      <description>前言 前两天写过一篇用cifs挂载smb共享文件夹的文章，但那篇文章中多有疏漏，本来直接在那篇文章中update补漏修正就行，但最近懒了，直接择重点重写一篇。
linux挂载smb共享文件夹涉及到很多权限分配的设置，比如smb服务端设置的用户和组、本地分配的用户和组、是不是指定文件和文件夹的默认权限。如果实在搞不清，那就直接root:root和0777一把梭，但千万而且一定要意识到root和0777的潜在风险。
设定 注意下面出现的配置文件中的ip地址、用户名、组名、密码都要根据自己的情况做修改。😄
设定本地用户都是jack，所属的组是jack-group 设定的smb共享文件夹的访问地址是//192.168.1.1/share，访问用户smb，访问密码123456 设定本地挂载smb共享文件夹的路径是/mnt/share 挂载 linux下安装cifs-utils后，挂载局域网smb共享文件夹，注意-o参数中别忘记加上iocharset=utf8以避免中文乱码的问题。
mount -t cifs //192.168.1.1/share /mnt/share -o username=smb,password=123456,iocharset=utf8 取消挂载
umount /mnt/share 开机自动挂载 编辑/etc/fstab文件，添加一行：
//192.168.1.1/share /mnt/share cifs credentials=/home/jack/.cifs_creds,file_mode=0755,dir_mode=0755,iocharset=utf8,uid=jack,gid=jack&amp;#39;s_group 0 0 注意：
smb访问账户的用户名和密码，建议单独新建一个文件来保存而不是明文写在fstab。我这里新建/home/jack/.cifs_creds。认证文件的格式如下： username=smb password=123456 # 下面这一栏可以不要 domain=WORKGROUP domain一栏可选，不填的话系统会自动猜（意味着猜不中就无法挂载），一般默认都是WORKGROUP uid=jack,gid=jack&#39;s_group，这是指定挂载的smb共享文件夹的本地用户和组分配给谁、给哪个组，如果没有指定uid和gid，默认就是root:root。 file_mode=0755,dir_mode=0755，这俩很好理解，文件的权限和文件夹的权限，0755什么意思不再赘述，不懂得话0777一把梭。 iocharset=utf8用来处理中文乱码问题 编辑完/etc/fstab，执行以下命令使配置生效：
# 重载 systemctl daemon-reload # 重新挂载 mount -a OK，大功告成~
😄</description>
    </item>
    
    <item>
      <title>Linux报错Read-only file system的问题处理</title>
      <link>https://ruohai.wang/202307/linux-read-only-filesystem-bugfix/</link>
      <pubDate>Wed, 19 Jul 2023 17:35:02 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-read-only-filesystem-bugfix/</guid>
      <description>前言 吐槽完赚钱宝二代（ws1508）的鸡肋配置以后，今天还是不太甘心，想来想去，最后给它刷了支持nand的那版固件，基于debian 10（buster），内核3.10。
这版固件有很多先天不足：
内核太老 只能识别4GB的nand存储空间（虽然我俩机器的包装盒上都标了32GB的nand存储） debian 10（buster）已经EOL，源仓库已经不再更新，里面的包都太老了 但如果能接受以上这些缺点，似乎也算是一个不错的选择。毕竟那个珍贵的usb2.0接口需要用来外挂数据盘。
装samba测试了一下，可以跑满百兆带宽，也不会出现缓存写满以后卡io导致系统假死的问题。但就算跑满了百兆也就10~12MB/s而已，不堪大用。
但是 没错，重点来了，系统直刷nand，我体验了2天以后，最大的问题是：nand很容易出现坏块！！！！
这个问题非常致命，当系统检测到nand坏块以后会报错errors，然后这版固件/etc/fstab配置的挂载参数中，有一个errors=remount-ro，也就意味着一旦使用过程中碰到坏块的block，整个系统立刻就会重新挂载为只读（readonly）模式保护数据。
而赚钱宝二代这玩意是2015~2016年的设备，产品定位就是为了跑pdcn，至少是7年的老矿机了，nand出现坏块几乎是必然。
解决方案 系统盘进入只读保护模式以后，任何写操作都会报错，提示如下：
Read-only file system 解决办法就是文件系统修复。先用df -hT查看根目录挂载的分区和格式。
Filesystem Type Size Used Avail Use% Mounted on udev devtmpfs 231M 0 231M 0% /dev tmpfs tmpfs 48M 4.0M 44M 9% /run /dev/data ext4 2.8G 795M 1.9G 30% / tmpfs tmpfs 238M 0 238M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock tmpfs tmpfs 238M 0 238M 0% /sys/fs/cgroup tmpfs tmpfs 238M 4.</description>
    </item>
    
    <item>
      <title>赚钱宝二代（WS1508）通过USB HUB扩展存储</title>
      <link>https://ruohai.wang/202307/ws1508-support-usb-hub/</link>
      <pubDate>Tue, 18 Jul 2023 22:57:38 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1508-support-usb-hub/</guid>
      <description>update@2023-07-19：用usb hub外界数据盘没必要，俩盘公用一个usb2.0接口，会卡i/o，256m的系统盘缓存跑完了以后写数据到移动硬盘，会导致系统卡死。还是加10块钱上玩客云吧，这玩意妥妥的就是一电子垃圾。
迅雷赚钱宝二代（ws1508）的硬件配置非常鸡肋：
百兆网络就不说了，跑满速也就12.5MB/s，这是它的极限了，都跑不满usb2.0接口的带宽。 早一些的批次内置存储是nand flash，虽然容量给的很大方，比如我淘的2个都标称32GB nand flash，但是有个卵用啊，因为截至目前根本就没有支持nand闪存的好用的固件。恩山论坛上唯一一个支持nand直刷的固件，是基于debian 10（buster）而且内核3.10，试着刷了几次，问题太多了。 usb2.0接口只有一个。接口只是usb2.0还不是最气人的，最气人的是usb接口只给了一个。在机内nand存储不可用的情况下，只能用u盘启动，意味着这唯一的usb接口就只能用来插系统盘了，根本没法扩展存储。 那不用nand直刷固件，用魔改的玩客云固件吧，稳定是稳定，但毕竟是魔改的，目前用下来有一个bug：电源管理有问题，不支持通过命令关机和重启。想关机想重启，只能拔电源。 这么些天ws1508折腾下来，算是毫无收获，拿到设备第一天得出的结论依然有效：这就是电子垃圾。不仅是个电子垃圾，还毫无性价比。现在这机器的价格大概10~15元左右，问题是这价格闲鱼个人卖家还不够付邮费，商户卖家至少10个才包邮。比起来，25~30块一台的玩客云（ws1608），多10块钱，就多了8GB emmc存储 + 1个usb2.0接口 + 千兆网口 + hdmi接口 + 稳定更新的armbian固件 + 稳定的openwrt固件，这多花的10块钱简直是性价比爆表了啊。
但是 对的，这里出现了转折。但是，昨天晚上我躺着睡觉的时候，突然灵光一闪：
你说这个ws1508，它支持usb hub扩展吗？ 之前也不是没考虑过这个方案，但毕竟是魔改固件，大致看了下启动脚本，里面的启动顺序是十六进制编码写死的，用usb hub的话，会不会无法识别呢。
今天起床以后，立刻就开始了验证。为了减少多次转接带来的带宽损失，这里usb hub用的是usb3.0版。
实际测试下来，结论是：
它支持usb hub扩展！ 但实际使用过程中也碰到了一些问题，这里做简单记录：
我曾尝试过不用u盘启动，而且把系统镜像写进2.5寸hdd的移动硬盘然后直接插到ws1508的usb口上，启动失败。失败一次以后，我没有再继续尝试，暂时不清楚是我的系统镜像没写好还是其它原因 用usb hub转接，插一个u盘，启动成功，和u盘直插没区别 用usb hub转接，插一个u盘，启动成功后，再插上移动硬盘，一切正常，移动硬盘可以正常挂载使用 用usb hub转接，插一个u盘（/dev/sda）启动成功后，再插一个移动硬盘（/dev/sdb），正常使用的情况下，断电再通电后机器自启，能成功启动并进入系统。但是，这里问题来了：两个盘的盘符编号顺序变了，u盘变成了/dev/sdb，移动硬盘变成/dev/sda。 虽然两个盘的顺序发生了变化，但系统运行正常，功能没有任何影响。/etc/fstab中设置开机自动挂载用的是blkid，所以盘符编号发生变化并不会有什么影响。 虽有最终结论就是：
ws1508可以用usb hub扩展存储！ 能扩展存储，那可玩性就多了一个：下载机，一个u盘做启动盘，一个大容量移动硬盘做数据盘。
其实之前没有用usb hub扩展时，我考虑过3个方案：
系统直接刷进大容量移动硬盘，一盘两用。但试了一次没成功就放弃了。 系统刷进大容量u盘/sd卡/tf卡，依然是一盘两用。但闪存盘不是容易丢数据么。 用cifs-utils挂载局域网里的smb共享文件夹，把这个文件夹当下载盘。这个方案应该可行，但这不是脱裤子放屁么。如果我有一台24小时运行的主机做smb共享，那直接用那台主机当下载机不就好了。 当然，还有个最最最简单的方案：
用nand直刷的那版固件 没错，用nand直刷固件，这样usb接口就空出来了，就可以接大容量移动硬盘惹~
虽然那版固件很老，但目前debian 10（buster）还是有仓库源的，还是能通过apt install安装应用，只是仓库里的软件版本比较老而已。如果只是做下载机，软件老不老的没啥影响，说不定老软件稳定性更好bug更少。
😄</description>
    </item>
    
    <item>
      <title>Linux更新源时提示the public key is not available问题解决</title>
      <link>https://ruohai.wang/202307/apt-update-public-key-error/</link>
      <pubDate>Mon, 17 Jul 2023 15:02:31 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apt-update-public-key-error/</guid>
      <description>手上的赚钱宝二代（ws1508）尝试刷入了【唯一一个支持nand flash的版本】，这版固件是基于debian10/buster，内核3.10，不论是debian版本还是内核都比较老。
刷入系统，启动成功以后，根据帖子内容进行了简单的基础配置，然后操作apt update，很快就出现了错误提示。
Err:4 http://mirrors.ustc.edu.cn/debian buster-backports InRelease The following signatures couldn&amp;#39;t be verified because the public key is not available: NO_PUBKEY 0E98404D386FA1D9 NO_PUBKEY 6ED0E7B82643E131 Reading package lists... Done W: GPG error: http://mirrors.ustc.edu.cn/debian buster-backports InRelease: The following signatures couldn&amp;#39;t be verified because the public key is not available: NO_PUBKEY 0E98404D386FA1D9 NO_PUBKEY 6ED0E7B82643E131 E: The repository &amp;#39;http://mirrors.ustc.edu.cn/debian buster-backports InRelease&amp;#39; is not signed. N: Updating from such a repository can&amp;#39;t be done securely, and is therefore disabled by default.</description>
    </item>
    
    <item>
      <title>Linux下安装DDNS-GO</title>
      <link>https://ruohai.wang/202307/ddns-go-install/</link>
      <pubDate>Mon, 17 Jul 2023 00:24:52 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ddns-go-install/</guid>
      <description>前言 没有前言，懒得写了。
DDNS-GO官方github repo指路：https://github.com/jeessy2/ddns-go
下载 在系统里创建安装目录
mkdir -p /usr/local/ddns-go 根据自己的硬件平台下载对应版本的安装包。我的设备依然是它，赚钱宝二代（ws1508），armv7。
# 进目录 cd /usr/local/ddns-go # 下载 wget https://github.com/jeessy2/ddns-go/releases/download/v5.3.7/ddns-go_5.3.7_linux_armv7.tar.gz # 解压 tar -zxvf ddns-go_5.3.7_linux_armv7.tar.gz 运行 解压以后得到的ddns-go默认就有执行权限，所以直接./ddns-go就可以跑起来了。但我们肯定是要把添加到systemd服务，并设置开机自启的。
# 新建服务文件 nano /etc/systemd/system/ddns-go.service 粘贴以下内容
[Unit] Description=The DDNS-GO Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/ddns-go/ddns-go -c /usr/local/ddns-go/ddns_go_config.yaml ExecStop=/bin/killall ddns-go [Install] WantedBy=multi-user.target 然后就是大家都喜欢的systemd reload/start/enable三板斧了。
# 重载 systemctl daemon-reload # 启动 systemctl start ddns-go.service # 开机启动 systemctl enable ddns-go.service 配置 ddns-go跑起来以后，默认端口是9876，打开浏览器，访问http://host-ip:9876，就进入ddns-go的webui了，之后就根据自己的需求进行配置。</description>
    </item>
    
    <item>
      <title>Linux下用Nginx给qBittorrent设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/qbittorrent-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 20:14:40 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/qbittorrent-update-to-https/</guid>
      <description>用nginx反向代理给qbit实现https访问，99%的设置都和【Linux下用Nginx给File Browser设置SSL开启HTTPS访问】一样，没错，又是99%的内容都是和filebrowser那篇一样。但还是那个问题，直接照搬的话会有一个坑，完成配置以后，用https访问qbit-webui会显示空白页面并提示unauthorized。
很明显这是碰到了一个安全设置问题，访问被qbit拒绝了。
有两个解决方案。
方案一：关闭qbit的一些安全设置 qbit webui设置中的【启用host header属性验证】和【启用跨站请求伪造保护】两个功能去掉勾选。
方案二：修改nginx反向代理的配置 参考qbit【官方wiki给出的方案】，调整nginx中的一些配置。
假定原规则如下：
location / { proxy_pass http://localhost:8089; } 调整以后的配置如下：
location / { proxy_pass http://localhost:8089; proxy_http_version 1.1; proxy_set_header Host localhost:8089; proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Forwarded-For $remote_addr; # qbit版本v4.2.2以上加入这条保护cookie安全 proxy_cookie_path / &amp;#34;/; Secure&amp;#34;; } 使用以上配置以后，实测qbit webui中可以开启安全设置，注意服务器域名哪里要填localhost。</description>
    </item>
    
    <item>
      <title>Linux下安装Samba服务开启文件夹共享功能</title>
      <link>https://ruohai.wang/202307/samba-setup-to-share-files/</link>
      <pubDate>Sun, 16 Jul 2023 13:15:51 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/samba-setup-to-share-files/</guid>
      <description>前言 局域网如果里有一台24小时开机的低功耗linux主机，那自然是要给它装上samba开启文件共享功能，把它作为一个文件服务器来用。可能有人会问，想开共享文件夹，直接给主机装casaos不就好了，就算不用samba也可以用filebrowser、alist、dufs、chfs之类。emmm，说的很对，但那不是少了很多手动挡的乐趣嘛。而且自己手搓一边，也方便更好的理解samba。
在记录安装和配置的内容时，确实会发现很多细节没法具体一一记录，只能记录下符合我的需求的配置。这时候就会觉得类似casaos这种webui上直接鼠标点点就开启共享的方式方便多了。
前期准备 一台24小时开机的低功耗linux主机，我这里用的是赚钱宝二代（ws1508） linux系统有一个非root的低权限账户，这里假定：jack 如果系统安装了防火墙，记得放行samba服务 samba的安装 debian仓库里就有samba，直接一键安装
apt install samba 安装完成后，可以执行systemctl status smbd看下服务的运行状态。
● smbd.service - Samba SMB Daemon Loaded: loaded (/lib/systemd/system/smbd.service; enabled; preset: enabled) Active: active (running) since Sun 2023-07-16 13:44:59 CST; 11min ago Docs: man:smbd(8) man:samba(7) man:smb.conf(5) Process: 4040 ExecCondition=/usr/share/samba/is-configured smb (code=exited, status=0/SUCCESS) Process: 4043 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS) Main PID: 4044 (smbd) Status: &amp;#34;smbd: ready to serve connections...&amp;#34; Tasks: 4 (limit: 986) Memory: 4.9M CPU: 9.725s CGroup: /system.</description>
    </item>
    
    <item>
      <title>Linux下用Nginx给ttyd设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/ttyd-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 01:17:58 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ttyd-update-to-https/</guid>
      <description>用nginx给ttyd实现https访问，99%的设置都和【Linux下用Nginx给File Browser设置SSL开启HTTPS访问】一样，直接照搬即可。但如果完全照搬，会发现https下登录ttyd以后，页面全黑，有一个浮窗显示【press enter to reconnect】，没有光标，也没有命令提示符。
很容易就明白出现这个问题是因为ttyd使用的是websocket协议，通过nginx代理转发以后出现了bug。
网上搜了一下解决方案，根据【这个页面】和【这个页面】上的两个解答，需要对nginx的配置内容稍微修改。
注意 设定域名为：jackiechang.cn 设定外网端口为：11111 设定内网端口为：4533 配置文件 server {listen [::]:11111 ssl;server_name jackiechang.cn;ssl_certificate ssl/jackiechang.cn.pem;ssl_certificate_key ssl/jackiechang.cn.key;ssl_session_cache shared:SSL:1m;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;ssl_prefer_server_ciphers on;error_page 497 https://$host:$server_port$uri$is_args$args;location / {proxy_set_header Host $host;proxy_set_header X-Forwarded-Proto $scheme;proxy_set_header X-Forwarded-Port $server_port;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection &amp;#34;upgrade&amp;#34;;proxy_http_version 1.1;proxy_pass http://localhost:4533;}} </description>
    </item>
    
    <item>
      <title>Linux下用Nginx给File Browser设置SSL开启HTTPS访问</title>
      <link>https://ruohai.wang/202307/filebrowser-update-to-https/</link>
      <pubDate>Sun, 16 Jul 2023 00:25:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/filebrowser-update-to-https/</guid>
      <description>前言 我用赚钱宝二代（ws1508）和玩客云（ws1608）刷入armbian，然后搓了很多服务，比如file browser、qbittorrent、ttyd、alist、ddns-go、navidrome。这些应用在启动以后，都提供了webui用来管理和控制。再配合当下ipv6的公网ip，实现了外网访问。
但现在又碰到了新的需求（或者说问题），就是这些应用的webui都是http，为了安全，我准备升级到https。其中有一些应用（比如ttyd、firebrowser）确实支持ssl，但也有很多不支持ssl。而且就算支持ssl的应用，各自配置的方式也不相同，不方便后期统一管理。
为了实现这个需求，就需要使用nginx做反向代理。这里以filebrowser为例，做一下简单记录。
前期准备 设备已经实现了ipv6的外网访问 假定域名为：jackiechang.cn 系统已经安装了filebrowser且可以正常访问，假定访问端口为：8600 以上两个前提已经OK，那外网访问filebrowser的url应该是：http://jackiechang.cn:8600 已经有ssl证书，不管是阿里云买域名送的证书，还是Let&amp;rsquo;s Encrypt的免费证书。 ssl证书需要是nginx的格式，一共两个文件：jackiechang.cn.pem和jackiechang.cn.key。 8600一个端口不能被nginx和filebrowser同时监听，这里假定nginx监听端口是：22222。最终实现效果是：https://jackiechang.cn:22222 这里假定的外网端口、本地端口、域名、证书名称，在下面教程中记得根据自己的情况进行修改。 安装nginx 我的主机系统是armbian，debian仓库里有nginx，直接一键安装。
apt install nginx nginx安装好以后，可以先执行nginx -t测试一下nginx.conf配置文件的语法是否正确，顺便看一下nginx的路径。我的nginx目录是/etc/nginx。
上传ssl证书 在nginx目录新建ssl文件夹，用sftp/scp工具把两个证书文件放到ssl目录下。注意这两个文件的读取权限，因为nginx是以www-data的用户身份运行，这俩ssl文件针对everyone需要配置读权限。但一般不会有什么问题，这里提到权限问题只是以防万一。
mkdir /etc/nginx/ssl 配置nginx nginx的默认配置文件是nginx.conf，但现在为了整洁和方便管理，nginx分出了conf.d、sites-available、site-enabled三个文件夹用来分别存放不同用途的配置文件。目录结构示意图如下。
nginx.conf总文件不动，/sites-enabled/default是实际生效的配置文件，但这里的文件实际是软链接到/sites-avaliable/default。搞得这么复杂，其实是为了方便配置和管理。（真的嘛我不信）
好了，开始编辑配置文件。
nano sites-available/default 添加如下配置内容，然后保存退出。
server { # 监听端口 listen [::]:22222 ssl; # 域名 server_name jackiechang.cn; # 证书 ssl_certificate ssl/jackiechang.cn.pem; ssl_certificate_key ssl/jackiechang.cn.key; # session缓存 ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # 加密 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; # http请求拦截报错页面，自动跳转到https error_page 497 https://$host:$server_port$uri$is_args$args; location / { proxy_pass http://localhost:8600; } } 重启nginx 完成上面的配置以后，先执行nginx -t测试配置文件的语法，没有报错就说明配置OK，接下去重启nginx即可。</description>
    </item>
    
    <item>
      <title>Linux下ttyd使用Git提示Author identity unknown和fatal: $HOME not set问题的解决</title>
      <link>https://ruohai.wang/202307/git-home-not-set-bugfix/</link>
      <pubDate>Sat, 15 Jul 2023 17:50:39 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/git-home-not-set-bugfix/</guid>
      <description>我在ttyd下使用git commit -m &#39;xxx&#39;命令时，出现了一个无法识别git用户信息的错误。
具体报错信息如下：
Author identity unknown *** Please tell me who you are. Run git config --global user.email &amp;#34;you@example.com&amp;#34; git config --global user.name &amp;#34;Your Name&amp;#34; to set your account&amp;#39;s default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got &amp;#39;user@hostname.(none)&amp;#39;) 意思就是git的用户身份认证信息未知，需要用git config --global进行配置。但我已经在系统中配置了git username&amp;amp;email，在本地终端中使用都正常，仅在ttyd中出现了这个bug。
那既然都提示要设置了，就先git config --global设置一下，这时又出现了第二个报错。
fatal: $HOME not set 到这里基本就明白错误原因了，ttyd下git无法识别$HOME环境变量，所以无法读取到~/.gitconfig文件内配置的username&amp;amp;email信息。
解决方案 根据这个报错搜了一下解决方案，根据【stackoverflow上的这个帖子】，解决方案就是用git config --system来设定git用户信息
git config --system user.</description>
    </item>
    
    <item>
      <title>Linux下安装ttyd</title>
      <link>https://ruohai.wang/202307/install-ttyd/</link>
      <pubDate>Sat, 15 Jul 2023 16:38:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-ttyd/</guid>
      <description>前言 ttyd，webui版本的终端，和本地终端功能一致，特别适合出门在外没有带自己电脑但又需要访问自己vps进行操作的场景，只需要打开浏览器，访问配置好的ttyd就OK。
第一步：在系统上创建安装目录
mkdir -p /usr/local/ttyd 第二步：访问ttyd的【github repo】，根据自己的硬件平台，下载对应的的安装包。我是装在ws1508上，选择armhf版本。
# 进安装目录 cd /usr/local/ttyd # 下载安装包 wget https://github.com/tsl0922/ttyd/releases/download/1.7.3/ttyd.armhf 第三步：授权
# 增加可执行权限。这里`ttyd.armhf`，以及下文中出现的`ttyd.armhf`，记得都改成自己的安装包的名字。 chmod +x ttyd.armhf 第四步：先学习一下ttyd的手册。有两个参数后面需要用到，-p指定端口，-c设定认证信息，也就是webui的登录账户和密码，格式是username:password。
USAGE: ttyd [options] &amp;lt;command&amp;gt; [&amp;lt;arguments...&amp;gt;] OPTIONS: -p, --port Port to listen (default: 7681, use `0` for random port) -i, --interface Network interface to bind (eg: eth0), or UNIX domain socket path (eg: /var/run/ttyd.sock) -U, --socket-owner User owner of the UNIX domain socket file, when enabled (eg: user:group) -c, --credential Credential for basic authentication (format: username:password) -H, --auth-header HTTP Header name for auth proxy, this will configure ttyd to let a HTTP reverse proxy handle authentication -u, --uid User id to run with -g, --gid Group id to run with -s, --signal Signal to send to the command when exit it (default: 1, SIGHUP) -w, --cwd Working directory to be set for the child program -a, --url-arg Allow client to send command line arguments in URL (eg: http://localhost:7681?</description>
    </item>
    
    <item>
      <title>迅雷赚钱宝二代（WS1508）还能怎么玩</title>
      <link>https://ruohai.wang/202307/ws1508-is-totally-a-rubbish/</link>
      <pubDate>Sat, 15 Jul 2023 14:53:09 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/ws1508-is-totally-a-rubbish/</guid>
      <description>玩客云，也叫赚钱宝三代，或者直接叫型号名字ws1608，我弄了好几台，这俩月玩的不亦乐乎，玩到后期，乐趣已经不是来自折腾硬件，而是玩linux系统，在armbian的基础上搓各种服务。
然后偶然间在B站上看到了powersee发布的赚钱宝二代（型号ws1508）的刷机视频，看了下二手市场，15块钱一个，配置是玩客云同款S805芯片，usb2.0*1，百兆lan，没了。硬件配置上看实在是鸡肋，完全可以称之为电子垃圾。但挡不住低价的诱惑，而且玩客云的可玩性已经得到验证。在恩山论坛搜了下赚钱宝二代能刷的固件，还真有俩。遂闲鱼上挑挑拣拣，30元2个包邮入手。
今天下午收到货，拆包通电，折腾一下午，目前就仨结论：
目前能刷的固件，armbian的就俩，一个是【基于debian 11的固件】，只支持U盘启动，而且仅此一版，不像玩客云有稳定的固件更新。另一个是【基于debian 10的nand直刷版本】，但内核还是3.x，因为linux对nand的支持随着内核3.4/3.10停止而停止了，内核太老docker都没法装，并且debian 10已经EOL。 不刷armbian，那就是刷openwrt了。我本就对旁路由这种模式兴趣不大，这机器百兆网口，我就更没兴趣了。要固件的可以自己去恩山论坛找。 usb接口只支持2.0这还不是最致命的，最致命的是usb接口只有一个。目前它能用的固件，约等于就是只有一个U盘启动的armbian，那就没有多余的接口插U盘或者移动硬盘了，扩展性为0。 这机器，我思来想去，只适合用来当作对网速要求不高、也不需要usb接入的场景，也就是这么几种玩法：
装cups做打印机服务器 装home assissant做智障家居中心 装cifs-utils挂载局域网上的共享文件夹以后做下载机 还有一个在实际使用中碰到的问题，刷入armbian 11以后，在apt upgrade或者修改ssh的配置以后，会碰到一个报错【kex_exchange_identification: read: Connection reset】，网上搜了一下没有什么解决的头绪，实测断电重启以后可解。
update:2023/07/15 15:24
上面这篇文章是2023年7月10号写的。今天是7月15号。虽然才过去5天时间，但感觉像是半个世纪，因为杭州这段时间天天都是高温酷暑橙色警报，天气预报39~40℃，室外就是一空气炸锅，室内不开空调就是桑拿房。
说回这台电子垃圾ws1508，前几天基于【基于debian 11的固件】这个版本，提取出dtb和启动脚本，现在可以实现根据armbian-onecloud的固件自制ws1508的固件惹，armbian-bookworm、6.1内核、6.4内核都适用，具体看【这个帖子】。
但是，固件可以自制，核心问题依然没有解决，就是高内核固件无法识别机器自带nand flash，导致只能用U盘启动。它又只有一个usb接口，意味着只能用来插系统盘，扩展性依然为0。
所以还是个电子垃圾。</description>
    </item>
    
    <item>
      <title>Windows下用CMD实现SSH连接</title>
      <link>https://ruohai.wang/202307/windows-cmd-use-ssh/</link>
      <pubDate>Sat, 15 Jul 2023 14:51:46 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/windows-cmd-use-ssh/</guid>
      <description>Windows下有很多终端，收费的，免费的。但很多终端不支持zmodem导致不能使用lrzsz，或者用户协议是限定场景下才免费，亦或者是electron套壳主题不好看。其实windows10已经默认安装openssh客户端，可以直接用系统自带的cmd/powershell/windows terminal来实现ssh访问远程服务器。虽然依然不支持zmodem，但如果你和我一样有三方软件洁癖，或者想严格遵守软件的用户协议，可以考虑cmd来替代那些第三方软件。
如果你的Windows系统没有安装openssh，可以查看这篇【官方文章】进行安装。
然后在cmd中直接敲命令即可。是默认端口22的话，【-p 22】这部分可以省略。
ssh jack@192.168.1.10 -p 22 如果不想每次都敲【root@192.168.1.10 -p 22】这几句，需要在C:\Users\Jack\.ssh\目录下新建一个config文件（文件名就是config，没有后缀），按如下格式写入服务器信息后保存。
Host abc Hostname 192.168.1.10 User jack Port 22 然后就可以在cmd中敲【ssh abc】即可。
如果想实现免密登录，rsa密钥生成、服务器端的配置这里不做赘述，只记录config文件中的配置格式。为方便管理多个主机的rsa密钥对，这里在.ssh目录下新建文件夹abc，rsa密钥对放在其中
Host abc Hostname 192.168.1.10 User jack Port 22 IdentityFile C:\Users\Jack\\.ssh\abc\id_rsa 然后就可以在cmd中敲【ssh abc】即可实现免密登录。</description>
    </item>
    
    <item>
      <title>Linux下用SFTP命令操作文件上传下载</title>
      <link>https://ruohai.wang/202307/use-sftp-to-handle-file/</link>
      <pubDate>Sat, 15 Jul 2023 14:48:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/use-sftp-to-handle-file/</guid>
      <description>一般要在一台远程vps上进行文件上传下载，一两个文件会用lrzsz(前提是你的终端要支持zmodem），批量文件会用winscp/xftp之类的客户端。但如果自己的终端不支持zmodem，也不想用第三方软件，而且文件也就一两个就想敲命令来完成，因为敲命令泰裤辣，那就用sftp命令。
sftp连接服务器。连接成功后光标处的命令提示符变成 sftp&amp;gt; 。想要免密登录设置同ssh免密登录，可以看这篇文章。
sftp jack@192.168.1.10 -p 22 sftp下载文件并保持源文件名
get /home/jack/robots.txt C:\Users\Jack\Desktop\ sftp上传文件并保持源文件名
put C:\Users\Jack\Desktop\robots.txt /home/jack/ 如果要上传下载一个文件夹，在put/get后面跟一个参数 -r 即可。</description>
    </item>
    
    <item>
      <title>Typecho添加favicon</title>
      <link>https://ruohai.wang/202307/typecho-add-favicon/</link>
      <pubDate>Sat, 15 Jul 2023 14:46:01 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/typecho-add-favicon/</guid>
      <description>首先将制作好的favicon.ico文件上传到服务器目录，本例中保存在/usr/themes/default/目录下。接下去在网站管理后台操作。
后台——控制台——外观 编辑当前外观——header.php，在&amp;lt;header&amp;gt;标签中插入一行
&amp;lt;link rel=&amp;#34;shortcut icon&amp;#34; href=&amp;#34;/usr/themes/default/favicon.ico&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt; 最后保存再刷新网站即可。</description>
    </item>
    
    <item>
      <title>Linux下实现挂载SMB共享文件夹</title>
      <link>https://ruohai.wang/202307/linux-smb-mount/</link>
      <pubDate>Sat, 15 Jul 2023 14:40:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-smb-mount/</guid>
      <description>linux下访问局域网上的smb共享文件夹，需要安装cifs-utils。
apt install cifs-utils 这里假定共享文件夹的网络位置是http://smb_ip/share，用户名smb，密码123456。
mount -t cifs //smb_ip/share /mnt/share -o username=smb,password=123456 -t cifs，挂载的文件类型，smb为-t cifs。 //smb_ip/share，smb共享文件夹的网络位置 /mnt/share，本地挂载的位置 -o，-o后面跟的都是挂载的详细参数配置，smb协议、用户名、密码等等，具体可以看这里详细参数解释，或者看图片。 如果要设置开机自动挂载smb，在/etc/fstab文件中添加一行，保存退出即可。
//smb_ip/share /mnt/share cifs username=smb,passwd=123456 0 0 也可以在/etc/samba/目录下新建配置文件smbpasswd用来保存smb的用户名和密码以方便管理，内容如下。
username=smb password=123456 然后 fstab中添加一行
//smb_ip/share /mnt/share cifs credentials=/etc/samba/smbpasswd 0 0 fstab的格式规范如下
&amp;lt;file system&amp;gt; &amp;lt;dir&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt; </description>
    </item>
    
    <item>
      <title>Linux下给Apache2安装SSL证书</title>
      <link>https://ruohai.wang/202307/apache2-ssl-cert-setup/</link>
      <pubDate>Sat, 15 Jul 2023 14:38:50 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apache2-ssl-cert-setup/</guid>
      <description>拖了好几天一直懒得弄ssl证书，因为这服务器是一朋友闲置我拿来练手的，剩1个月到期。但晚上被大学同学叫出去喝酒，完了回来以后有点精神焦虑，索性把ssl证书给弄了缓解一下情绪。
获取ssl证书的步骤这里就不赘述。直接开始重点。
第一步，获取到的apahce2的证书应该是三个文件：domain.key, domain_chain.crt, domain_public.crt。这仨文件名是阿里云证书的格式。我看到也有叫domain_bundle.crt的，没关系，最后都是写一起的。
拿到证书文件以后，把这三个文件上传到/etc/apache2/ssl目录下，这里的ssl文件夹需要自己新建，名字可以用自己喜欢的，后面配置文件中记得路径同步修改就ok。也可以直接到/etc/apache2/ssl目录下直接用wget下载证书后解压。 第二步：启用apache2的ssl模块
a2enmod ssl 第三步：apache2默认的ssl配置文件的路径在/etc/apache2/sites-available/default-ssl.conf。现在把ssl证书三个文件的路径添加到&amp;lt;VirtualHost *:443&amp;gt;的标签内。
SSLCertificateFile /etc/apache2/ssl/domain_public.crt SSLCertificateKeyFile /etc/apache2/ssl/domain.key SSLCertificateChainFile /etc/apache2/ssl/domain_chain.crt
网上很多教程写到这里就说可以保存退出了。但是要注意，如果你的网站根目录不是apache2默认的/var/www/html而是自定义的目录，那只加这3行是不行的！还需要把网站信息的DocumentRoot和&amp;lt;Directory&amp;gt;的信息也配置进去。
第四步：现在需要把ssl配置文件用软链接映射到/etc/apache2/sites-enabled/目录，命令中的001-ssl.conf文件名可以取自己喜欢的。
ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf 如果不喜欢用软链接，也可以直接把default-ssl.conf文件复制一份到/sites-enabled/目录下。
第五步：重启apache2。
systemctl restart apache2 第六步：如果没有开防火墙（firewalld/iptables），那到上一步就结束了。如果开启了防火墙（我用的是firewalld），记得开放443端口。
# 开放端口 firewall-cmd --add-port=443/tcp --permanent # 防火墙重载 firewall-cmd --reload </description>
    </item>
    
    <item>
      <title>Typecho更改后台登录地址</title>
      <link>https://ruohai.wang/202307/change-typecho-admin-dir/</link>
      <pubDate>Sat, 15 Jul 2023 14:37:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/change-typecho-admin-dir/</guid>
      <description>typecho后台登录url默认就是/admin/，为了安全，还是自定义比较好。
这里假定要把/admin/改成/abcd/，要改两个地方。
网站根目录下的admin文件夹，重命名为abcd
网站根目录下的config.inc.php，把define(&amp;rsquo;TYPECHO_ADMIN_DIR&amp;rsquo;, &amp;lsquo;/admin/&amp;rsquo;)中的admin修改为abcd，然后保存退出
以上两步操作完以后就可以用/abcd/登录网站后台了，成功~</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://ruohai.wang/about/</link>
      <pubDate>Sat, 15 Jul 2023 03:06:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/about/</guid>
      <description>关于未来你总有周密的安排，然而剧情却总是被现实篡改。
关于现在你总是彷徨又无奈，任凭岁月黯然又憔悴地离开。</description>
    </item>
    
    <item>
      <title>Linux下从0开始安装Typecho</title>
      <link>https://ruohai.wang/202307/install-typecho-step-by-step/</link>
      <pubDate>Sat, 15 Jul 2023 02:52:12 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-typecho-step-by-step/</guid>
      <description>typecho的安装，官方有【安装指导文档】，但讲实话我看完官方文档是一头雾水的，并不知道要怎么弄。搜其它教程，很多又是配合宝塔面板来部署。宝塔面板我试过官网的demo，并不是我对国产的软件产品有偏见啊，但主题和无处不在的付费升级到pro的入口，我觉得不行。
所以这就是一篇从0开始完全手搓的安装教程。
第一步：安装环境的准备。typecho说白就是一个php网站，要跑php网站，就需要web server。那就nginx或者apache2二选一。这些年nginx风头强劲，apache2日暮西山。但巧了么这不是，我选择apache2。
apt install apache2 -y apache2安装好以后，在浏览器中输入http://host_ip看是否能访问到apache2 index页面，能访问说明安装成功。
第二步：网站要跑起来，有了web server，接下去就是安装数据库。typecho官方说支持mysql、postgresql和sqlite，又到了技术选型的分岔口了。mysql因为oracel这个爹的原因，从debian的源仓库被移除了，postgresql我不熟，略过，那剩下的就只有sqlite惹。其实debian的源仓库里有mariadb-server可以装，但用mariadb的话和mysql一样需要安装mysqli这个php扩展，很不巧mysqli也从debian源仓库里被移除了。开源人都是有洁癖的，碰了oracel的统统都要清理掉。我这里偷懒，只想用apt install一键安装而不是去下mysql安装包，所以数据库最终选择：sqlite。
apt install sqlite3 -y 安装完成后，输入sqlite3，看命令提示符是不是 sqlite3 来判断是否成功，敲.quit退出。
第三步：现在要在apache2中进行virtualhost配置，也就是网站信息配置。可以在/etc/apahce2/apache2.conf文件中配置，也可以/etc/apache2/sites-enabled/目录下配置。为了方便管理，这里选择/sites-enabled/目录。
将目录下的000-default.conf重命名为typecho.conf 在typecho.conf中的&amp;lt;VirtualHost *:80&amp;gt;标签内进行如下配置。DocumentRoot配置的是你网站的根目录。 DocumentRoot /data/typecho &amp;lt;Directory /data/typecho&amp;gt; Options Indexes FollowSymLinks AllowOverride All Require all granted &amp;lt;/Directory&amp;gt; 完成配置后，重启apahce2。 systemctl restart apache2 在网站根目录新建phpinfo.php，内容&amp;lt;?php phpinfo(); ?&amp;gt;，保存。然后浏览器访问http://host_ip/phpinfo.php，查看是否能正常访问页面。 这里有一个需要注意的问题。apache2跑起来的用户:组是www-data:www-data，记得给网站目录/data/typecho分配合理权限，要不然会提示【you don&amp;rsquo;t hava permission】无法访问。 第四步：开始安装php。全程没啥好注意的，等命令跑完就好了。
apt install php -y 第五步：不知不觉终于到第五步了，写教程可真累啊。到此为止，安装环境算是都准备好了，现在可以去typecho官网下载安装包惹。
# 进入网站根目录 cd /data/typecho # 下载最新版typecho代码 wget https://github.com/typecho/typecho/releases/download/v1.2.1/typecho.zip # 解压到当前目录 unzip typecho.zip 接着就可以在浏览器中输入http://host_ip/install.php进行安装，然后根据网页提示的报错信息进行debug。 第六步：马上大功告成了。点击下一步，马上就会看到红字错误提示。 不要慌，根据错误提示一个个处理即可。
# 安装mbstring，需要重启apache2生效 apt install php-mbstring -y # 安装数据库扩展，我用的是sqlite3，就装sqlite3的扩展，需要重启apache2生效 apt install php-sqlite3 -y # usr/uploads目录分配权限。俩方法，把/typecho/目录指定给www-data:www-data，或者给755。因为等会还需要在网站根目录写入一个config.</description>
    </item>
    
    <item>
      <title>Linux下Syncthing的安装和配置</title>
      <link>https://ruohai.wang/202307/install-syncthing/</link>
      <pubDate>Sat, 15 Jul 2023 02:50:44 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-syncthing/</guid>
      <description>前言 不得不说在linux下随便安装一个软件都可以写一份教程，不像Windows下载exe双击运行然后下一步下一步就能搞定。
安装 debian仓库里就有，直接apt安装就行。虽然版本略微旧了一些，但简单省事，apt一把梭！
apt install syncthing 配置 通过apt方式安装syncthing服务，配置文件的默认路径是/lib/systemd/system/syncthing@.service。配置文件的默认内容如下
[Unit] Description=Syncthing - Open Source Continuous File Synchronization for %I Documentation=man:syncthing(1) After=network.target StartLimitIntervalSec=60 StartLimitBurst=4 [Service] User=%i ExecStart=/usr/bin/syncthing serve --no-browser --no-restart --logflags=0 Restart=on-failure RestartSec=1 SuccessExitStatus=3 4 RestartForceExitStatus=3 4 # Hardening ProtectSystem=full PrivateTmp=true SystemCallArchitectures=native MemoryDenyWriteExecute=true NoNewPrivileges=true [Install] WantedBy=multi-user.target 根据这份默认的配置信息可以判断，想要启动syncthing服务，命令中需要指定用户。假定我的系统账户是jack，使用如下命令启动syncthing服务
systemctl start syncthing@jack.service 用以上默认配置启动以后，在jack的home目录会生成配置文件，默认是/home/jack/.config/syncthing/config.xml，其中可以看到gui的默认访问地址
&amp;lt;gui enabled=&amp;#34;true&amp;#34; tls=&amp;#34;false&amp;#34; debugging=&amp;#34;false&amp;#34;&amp;gt; &amp;lt;address&amp;gt;127.0.0.1:8384&amp;lt;/address&amp;gt; &amp;lt;apikey&amp;gt;xxxxxxxxxxxxxxxxxxx&amp;lt;/apikey&amp;gt; &amp;lt;theme&amp;gt;default&amp;lt;/theme&amp;gt; &amp;lt;/gui&amp;gt; 注意这里的&amp;lt;address&amp;gt;127.0.0.1:8384&amp;lt;/address&amp;gt;，默认只监听本机的访问请求，如果是远程访问，需要改成&amp;lt;address&amp;gt;0.0.0.0:8384&amp;lt;/address&amp;gt;。
总结：
apt安装syncthing以后，启动命令：systemctl start syncthing@jack.service 如果是远程访问，修改/home/jack/.config/syncthing/config.xml中的gui标签，把127.0.0.1改成0.0.0.0 修改端口，和上一条一样，把8384改成自己喜欢的端口号 完成以上的配置后，就是熟悉的重启和开机自启。
# 启动syncthing服务 systemctl restart syncthing@jack.</description>
    </item>
    
    <item>
      <title>Linux下实现USB设备自动挂载</title>
      <link>https://ruohai.wang/202307/linux-auto-mount-usb-storage/</link>
      <pubDate>Sat, 15 Jul 2023 02:49:06 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-auto-mount-usb-storage/</guid>
      <description>前言 给玩客云刷的armbian默认不支持usb设备自动挂载，需要自己手动mount，如果想实现开机自动挂载，有这么几个方案：
如果u盘、移动硬盘挂上去就半永久不会拔下来，那就编辑/etc/fstab 如果会经常插拔，而且动手能力强，可以编写udev的规则脚本 如果会经常插拔，但又不想写脚本，那就装软件，比如udevil、udiskie、udisk2、usbmount 根据自己的实际情况，最后我选择了udevil，一个是因为安装简单0配置而且依赖关系很简单，另一个是因为casaos实现u盘自动挂载用的也是这个方案。
😄
安装 debian的软件仓库里就有udevil，一条命令就搞定安装
apt install udevil udevil的配置文件路径是/etc/udevil/udevil.conf，默认会把usb设备挂载到/media/user目录下（这里的user在后面的命令中体现）。如果要调整自动挂载路径，需要在udevil.conf中修改。
接下去要启动udevil服务惹。
systemctl start devmon@jack.service 注意命令中的jack，这里对应的是linux系统的用户账户。如果你的系统使用的账户是mark，那对应的命令就是devmon@mark，usb设备的挂载点就是/media/mark。
启动成功以后，就可以插拔u盘、移动硬盘查看挂载情况了，确认下是否工作正常。
最后就是把udevil设置成开机启动。
systemctl enable devmon@jack.service 问题 实际使用中发现有一点点小问题，如果sd卡槽中插了卡，在系统重启以后，sd卡无法自动挂载，需要手动插拔一次以后才能正常识别并自动挂载。</description>
    </item>
    
    <item>
      <title>Apache2下实现Typecho永久链接（伪静态）</title>
      <link>https://ruohai.wang/202307/apache2-url-rewrite/</link>
      <pubDate>Sat, 15 Jul 2023 02:43:32 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/apache2-url-rewrite/</guid>
      <description>伪静态通过url rewrite实现，这里记录下apahce开启rewrite功能的方法。
首先第一步肯定是在typecho后台开启地址重写功能，不要管错误提示，选择【启用】并保存设置。 然后开始在apache2中进行配置：
本地新建一个文件，文件名**.htaccess** ，把下面这段内容粘贴进去，保存，然后上传到网站根目录。 &amp;lt;IfModule mod_rewrite.c&amp;gt; RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1] &amp;lt;/IfModule&amp;gt; 文件位置示意图：
修改apache2.conf（如果你的网站路径信息配置在VirtualHost下则修改对应位置）。这里以默认的/var/www为例，把AllowOverride后的参数改为FileInfo，不需要改成all，fileinfo的权限就够了。 &amp;lt;Directory /var/www/&amp;gt; Options Indexes FollowSymLinks AllowOverride FileInfo Require all granted &amp;lt;/Directory&amp;gt; 完成以上两步以后，可以试着重启apache2，如果rewrite模块已经开启的话，到这一步伪静态就已经完成了。 systemctl restart apache2 如果很不幸操作apache2重启以后你的地址重写功能依然没有生效，那就是服务器没有启用rewrite模块，执行下面这条命令启用apache2-rewrite，然后再重启apache2。 a2enmod rewrite systemctl restart apache2 </description>
    </item>
    
    <item>
      <title>为什么选择Typecho而不是Hexo来搭建博客</title>
      <link>https://ruohai.wang/202307/why-choose-typecho/</link>
      <pubDate>Sat, 15 Jul 2023 02:33:47 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/why-choose-typecho/</guid>
      <description>前言 这篇文章是2023年7月4号写的，当时方案选择的时候，排除掉了静态博客hexo选择了typecho，然后做了这篇记录。
谁曾想不到半个月的时间，因为拿来连手的vps快要到期，博客也要转移，最终新博客我选择了静态博客hugo。😄
本来这篇文章是吐槽静态博客不好用不方便的，但今天（2023-07-15）对内容做了重新整理和补充，反而变成了一篇吹静态博客好的文章，笑死了。
😄
想要自建博客的时候，我的方案是二选一：hexo或者typecho。
hexo入选是因为2015年的时候用hexo+github page搭过一个博客。typecho入选是因为玩客云这个机器硬件性能羸弱（没错一开始我是准备在玩客云上自建博客），看到有一个玩客云armbian固件里内置了typecho。
接下去就是决定用hexo还是typecho了。搜了网上很多博客工具优劣的点评文章，啰啰嗦嗦一大堆，都喜欢说什么主题好不好看。有的会提到动态博客、静态博客之分，这个也好理解，但往往也只点到静态页面、动态数据这些。
但是最最最关键的区别，他们都没说，我来说：
静态博客是分成本地环境和服务器环境的！！！ 静态博客 静态博客存在如下几个问题：
需要在本地搭建一个编译环境。hexo是nodejs，hugo是go，jekyll是ruby gem。想写博客，就需要本地写好markdown文件，然后本地编译成静态页面，然后git push到服务器（也可以用sftp工具）。文章发布以后发现有错误想要改，哎，本地编辑那份markdown文件，然后本地重新编译静态页面，然后再用git push到服务器。这也是小白容易理解错误的地方，按照hexo、hugo、jekyll的官方文档吭哧吭哧弄半天，最后发现只是在自己电脑上装了一个编译环境而已。
没有原生评论系统。因为是都是静态页面没有什么交互，自然也就没有原生评论系统，但可以通过配置第三方服务外挂评论系统来实现。但随之而来的问题就是，这些评论都保存在第三方网站上，不归自己管。
部署。静态博客如此流行，我觉着有很大的原因是免费的github pages吧。但如果想部署在主机上，那就和动态博客一样，需要开始ssh连上主机装nginx/apache2建站了。
设备绑定。markdown编译成静态页面以后，需要push到服务器，或者github。如果push到服务器，那和动态博客一样，需要和主机做rsa密钥认证登录；如果push到github，那需要在github上配置rsa公钥。这都导致了客户端设备的绑定，也就是我用A电脑写markdown然后编译然后push，那我换电脑了怎么办？得重新配置一遍rsa密钥认证，或者其它电脑远程登录到A电脑进行push。
不支持搜索。都是静态页面，往往没有交互功能，比如搜索文章。需要用搜索引擎配合一些搜索公式来实现。
文章管理不便。标签、分类、置顶，还有很多基础功能缺失，需要自己手动管理。
动态博客 动态博客最知名的就是wordpress，但很多人都会觉得它太重，typecho可以理解为wordpress的精简版。动态博客好处都有啥，谁说对了就给他。
原生评论系统。虽然我的博客几乎没有什么访问量，评论也完全没有，但评论功能它必须得有。
自带管理后台，可以直接在网站后台对全站资源进行配置，比如文章的编辑、发布、删除，评论的管理，主题的配置，页面的调整。
不绑定设备。出门没带自己电脑，不得不用其它电脑，照样可以浏览器登录网站后台管理博客。
动态博客系统都自带功能强大的富文本编辑器/markdown编辑器，不用再花心思去选什么支持语法高亮、支持实时预览、免费的markdown编辑器，系统自带。
动态博客系统自带功能强大的文章分类功能、标签管理功能、搜索功能，这些网站标配的功能，静态博客都需要自己动手去实现。
这么看下来，好像静态博客一无是处，动态博客全是优点。那为什么还有那么多人选择静态博客？
网站精简，less is more，砍掉所有功能以后可以把全部注意力都用在【写博客】这件事上。
免费。只要注册一个github账号，就可以把博客部署到github pages，不花钱，然后买个10块一年的廉价域名，搞定。如果用动态博客，自己的小主机没法备案吧，就不能解封80/443端口，那就得买vps。国内阿里云腾讯云各种云，要备案要审核，海外linode、vultr、azure、aws、digital ocean，各有优劣得挑好久吧而且价格不便宜。一年一年续费太心痛。</description>
    </item>
    
    <item>
      <title>Linux下安装Navidrome自建流媒体服务</title>
      <link>https://ruohai.wang/202307/navidrome-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:28:12 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/navidrome-setup/</guid>
      <description>前言 navidrome，开源的流媒体服务器，全平台客户端都有。功能和群晖的audio station一样，但首先不是人人都有群晖，其次有群晖的人也不一定都喜欢群晖那个沙雕的audio station。
这里记录下安装步骤。其实官网的安装教程已经非常完整且详细，只是没有中文版而已。英文阅读没问题的可以直接看【官方安装教程】。这里仅做一个自己安装过程的记录和英译中。有人会问navidrome不是支持docker安装吗而且docker安装很简单，STOP！我不喜欢docker，所以选择自己手搓。
好了，让我们开始安装navidrome吧！
安装 第一步：安装ffmpeg（大概200~500MB）
apt install ffmpeg -y 第二步：创建navidrome的安装文件夹和运行文件夹并分配用户和组。安装文件夹用来放navidrome的安装包，运行文件夹用来存放软件运行生成的缓存。其中运行文件夹因为要不断写入缓存，所以需要考虑好权限。
如果实在搞不清用户、权限之类，还是那句老话：统统用root，root/777一把梭。
这个安装例子种，用户和组我们都用jack。两个文件夹路径都可以自定义，只是后面的配置文件中记得同步修改。
install -d -o jack -g jack /opt/navidrome install -d -o jack -g jack /var/lib/navidrome 第三步：进入/opt/navidrome，到官方github下载对应自己硬件平台版本的安装包，我这里以amd64版本为例，解压并分配权限。
cd /opt/navidrome wget https://github.com/navidrome/navidrome/releases/download/v0.49.3/navidrome_0.49.3_Linux_arm64.tar.gz tar -zxvf navidrome_0.49.3_Linux_arm64.tar.gz chown -R jack:jack /opt/navidrome 第四步：在/var/lib/navidrome目录下创建配置文件navidrome.toml，配置参数。默认只有一句，用来指定音乐的源文件路径。更多自定义参数看【官方页面】。
MusicFolder = &amp;#34;/media/music&amp;#34; Port = 4533 注意配置这个媒体源文件夹的用户权限，如果弄不清就照样分配给jack。
chown -R jack:jack /media/music 第五步：到这一步其实已经算大功告成了，接下去只是把navidrome添加到系统服务并设置开机自启。在/etc/systemd/system目录下新建navidrome.service文件，然后添加配置信息。注意参数中的User和Group两个参数对应的值要改成你自己的值。其它参数默认即可，如果你能看懂参数也可以自行修改。
[Unit] Description=Navidrome Music Server and Streamer compatible with Subsonic/Airsonic After=remote-fs.target network.target AssertPathExists=/var/lib/navidrome [Install] WantedBy=multi-user.target [Service] User=jack Group=jack Type=simple ExecStart=/opt/navidrome/navidrome --configfile &amp;#34;/var/lib/navidrome/navidrome.</description>
    </item>
    
    <item>
      <title>Linux下Tailscale的安装和配置</title>
      <link>https://ruohai.wang/202307/tailscale-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:25:16 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/tailscale-setup/</guid>
      <description>前言 我的nas和玩客云armbian小主机的外网访问方案一直用的是ipv6 + ddns，因为我手上正好有个域名，这个方案确实很好用，不仅方便而且配置也很简单，除了ipv6地址更新的十分钟左右的时间会短暂掉线，其它方面我觉得已经十分完美。
今天在twitter有朋友问题玩客云机器刷armbian后能不能跑tailscale，我说没用过不清楚，但勾起了我的好奇心，所以按照官方文档的手册安装配置了一下，emmm，同样很好用，同样很方便而且配置简单，简单到压根就没有几步操作，教程都没什么好写的。
但我在安装组网好了以后还是碰到了一点简单的使用小疑惑。而且tailscale和ipv6公网使用场景虽然存在重叠，也是有一些差异化的，所以记录一下。
安装 首先就是去【tailscale官网】注册账号了，没啥好说的，根据官网提示操作就行了。注册好了以后，ssh进linux机器，开始安装。
第一步：安装，一条命令，耐心等它跑完，跑完会提示安装成功。
curl -fsSL https://tailscale.com/install.sh | sh 安装成功的提示
第二步：根据终端里安装成功的提示，启动tailscale。
tailscale up 启动成功以后，终端会出现一个url链接，复制链接到浏览器中打开，根据提示下一步再下一步，把设备添加到自己账号。
第三步：在tailscale的个人中心的machines标签页，可以看到自己账号下的设备。
可以看到每个设备后面都分配了一个100开头的ipv4地址。到这一步就完成了tailscale的安装、添加设别和异地组网。
使用 假定我现在需要在debian这台机器上访问onecloud机器上的一个服务（比如群晖，端口是5000)，那只需要在debian机器上打开浏览器，输入onecloud的tailscale分配的ipv4地址和端口号，也就是100.xxx.xx.xx:5000，就可以惹~~实测基本能跑满带宽。
实际体验下来，注册、安装、使用，完全就是傻瓜式操作，0配置就可以使用，比ipv6 + ddns的方案还要简单。
使用场景 再说一下tailscale和ipv6方案使用场景的不同。默认配置下，ipv6是公网开放的，意味着只要知道ipv6地址和端口号，所有人都可以访问到，这就带来一个安全上问题，需要用户自己进行一些安全加固的配置，比如装防火墙、修改服务的默认端口、使用复杂密码等等。但tailscale只是一个账户下的局域网之内的设备之间开放访问，并不对公网开放，而且tailscale服务本身的安全措施就拉满。
所以比较合适的使用场景是：
公开资料，比如网络资源（网上能下载到的各种电影电视剧电子书音乐图片文章），用ipv6 + ddns即可，泄露也无妨。 个人资料，（工作生活家庭中的照片音频文档等私密材料），用tailscale，杜绝私密资料泄露。 </description>
    </item>
    
    <item>
      <title>Linux下firewalld防火墙的安装和配置</title>
      <link>https://ruohai.wang/202307/firewalld-setup/</link>
      <pubDate>Sat, 15 Jul 2023 00:19:54 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/firewalld-setup/</guid>
      <description>前几年买了vps以后都是跑ss一键脚本然后就扔那儿不管了，除了vps服务商默认提供的安全措施，其它防护为0。虽然做了好多年的web开发，但都只是做一些crud搬砖粗活，对linux维护并不了解。这次借着折腾玩客云小机器armbian的机会，正好摸索学习一下。
😄
linux下管理防火墙规则的工具，大致是iptables/firewalld/ufw，这里略过方案选型过程，只说firewalld的安装和简单配置。要注意firewalld安装好以后，默认只允许dhcpv6-client和ssh服务，其它服务、端口全部会被拦截，如果ssh改了自定义端口，务必要记得放行该端口。
安装，很简单。安装好以后自动启用，自动配置为开机启动服务。
apt install firewalld 查看firewalld当前状态
systemctl status firewalld 永久开放某个端口
firewall-cmd --add-port=80/tcp --permanent 修改规则以后重载生效
firewall-cmd --reload 查看当前开放的服务
firewall-cmd --list-service 查看当前开放的端口
firewall-cmd --list-ports 永久开放某个服务
firewall-cmd --add-service=samba --permanent 永久关闭某个端口
firewall-cmd --remove-port=22/tcp --permanent </description>
    </item>
    
    <item>
      <title>Linux下配置RSA公钥认证登录</title>
      <link>https://ruohai.wang/202307/pub-key-auth-config/</link>
      <pubDate>Fri, 14 Jul 2023 23:41:25 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/pub-key-auth-config/</guid>
      <description>为了安全，linux主机一般都会禁掉密码登录 + rsa密钥认证登录。这里记录以下这两个操作的过程。
第一步：生成rsa密钥对，不多赘述。
ssh-keygen 生成俩文件，id_rsa和id_rsa.pub。
第二步：确保在linux主机用户目录下有.ssh文件夹，没有的话就新建。
mkdir ~/.ssh 第三步：用sftp命令或者sftp客户端，把id_rsa.pub上传到~/.ssh目录下。上传完成后，最好把id_rsa.pub文件重命名为authorized_keys。
第四步：编辑/etc/ssh/sshd_config文件。
# 找到这个配置，去掉注释启用 PubkeyAuthentication yes # 找到这个配置，去掉注释启用 AuthorizedKeysFile .ssh/authorized_keys 第五步：本地终端配置好id_rsa私钥就可以ssh免密码登录了。接下去就是禁用密码登录。
# 找到这个配置，去掉注释启用，注意value是no，禁止密码验证 PasswordAuthentication no 修改后保存退出，重启sshd后配置生效。😄
sysmtectl restart sshd </description>
    </item>
    
    <item>
      <title>Linux下安装qBittorrent</title>
      <link>https://ruohai.wang/202307/install-qbit/</link>
      <pubDate>Fri, 14 Jul 2023 23:35:17 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-qbit/</guid>
      <description>安装 debian仓库里qbit有俩版本，一个qbittorrent，另一个qbittorrent-nox。前者带qt5编写的gui，后者没有gui只有webui。我是在玩客云的小机器上装，不需要gui，所以这里选qbittorrent-nox。
apt install qbittorrent-nox 安装完成后，直接用守护线程模式启动。
qbittorrent-nox -d 默认端口8080，打开浏览器，访问http://host_ip:8080，默认用户admin，默认密码adminadmin，就可以开始使用了。
配置 也可以把qbit添加到systemd服务并设置开机自启，这样就不需要再每次敲命令启动。
第一步：添加配置文件
nano /etc/systemd/system/qbittorrent.service 把下面内容复制进去，保存退出。注意User一栏的值是指定运行qbit任务的用户，涉及到一切文件权限之类。如果实在搞不清就填root，或者直接删掉User一栏。全局用root可以帮你省去很多关于权限、用户、组之类的烦恼，但也要意识到它潜在的风险。
[Unit] Description=qBittorrent Daemon Service After=network.target [Service] User=Jack ExecStart=/usr/bin/qbittorrent-nox ExecStop=/usr/bin/killall -w qbittorrent-nox [Install] WantedBy=multi-user.target 第二部：添加systemd服务的三条命令。
# 服务重载 systemctl daemon-reload # 启动服务(如果已经启动qbit，这一步可以跳过） systemctl start qbittorrent.service # 添加为开机自启 systemctl enable qbittorrent.service </description>
    </item>
    
    <item>
      <title>Linux下自定义主机名称（hostname）</title>
      <link>https://ruohai.wang/202307/linux-change-hostname/</link>
      <pubDate>Fri, 14 Jul 2023 23:28:48 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/linux-change-hostname/</guid>
      <description>查看当前的主机名
hostname 或者
hostnamectl 假定我想把hostname修改为WS1508，也就是硬件的型号。
修改hostname需要改两个文件，第一个/etc/hostname，可以用一条命令搞定，或者手动编辑。
hostnamectl set-hostname WS1508 第二个地方修改的文件是/etc/hosts，这里需要手动编辑。
nano /etc/hosts 示意图。
ipv4和ipv6两个ip后面都需要改成WS1508，保存退出
退出终端再重新登录以后就可以看到是新的主机名。</description>
    </item>
    
    <item>
      <title>Linux下设置静态IP（固定IP）</title>
      <link>https://ruohai.wang/202307/static-ip-address-config/</link>
      <pubDate>Fri, 14 Jul 2023 23:23:33 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/static-ip-address-config/</guid>
      <description>先查看自己设备的网卡名称
ifconfig 如果提示命令不存在，则先安装net-tools
apt install net-tools 获取到网卡名称后，在/etc/network/interfaces文件中进行编辑。子网掩码、网关地址、dns地址可以根据自己的实际网络情况进行调整。完成编辑以后保存退出。
# 开机自动启用eth0 auto eth0 # 使用静态ip iface eth0 inet static # ip地址 address 192.168.1.4 # 子网掩码 netmask 255.255.255.0 # 网关地址 gateway 192.168.1.1 # dns服务器 dns-nameservers 192.168.1.1 重启网络
service network restart 或者
systemctl restart network 如果以上两个命令都提示无效，直接重启吧。😄</description>
    </item>
    
    <item>
      <title>Linux下安装Docker Engine</title>
      <link>https://ruohai.wang/202307/install-docker-engine/</link>
      <pubDate>Fri, 14 Jul 2023 23:20:11 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/install-docker-engine/</guid>
      <description>在linux上安装docker，官方有详细的教程指导如何安装。但如果你和我一样用的linux发行版是debian以及debian的衍生发行版，可以直接用debian官方维护的docker.io。
apt install docker.io docker官方把docker.io称为unofficial packages非官方的版本。
因为docker.io是debian在维护而不是docker官方，而且2019年的时候曾经停止维护了1年导致版本落后太多。但现在不用担心docker.io版本问题，目前仓库里已经是20.10.24。</description>
    </item>
    
    <item>
      <title>Linux下添加自定义alias</title>
      <link>https://ruohai.wang/202307/add-alias/</link>
      <pubDate>Fri, 14 Jul 2023 23:14:36 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/add-alias/</guid>
      <description>linux下添加自定义alias，编辑的文件位置有俩地方，全局（对所有用户生效）生效是/etc/bash.bashrc，对当前用户生效是~/.bashrc。
这里以仅针对单个用户进行配置为例。
nano ~/.bashrc 在最底下添加一行
alias ll=&amp;#39;ls -l&amp;#39; 保存，然后用source命令使生效
source ~/.bashrc </description>
    </item>
    
    <item>
      <title>玩客云可用Armbian和OpenWrt固件分享</title>
      <link>https://ruohai.wang/202307/wky-firmware-share/</link>
      <pubDate>Fri, 14 Jul 2023 23:07:44 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/wky-firmware-share/</guid>
      <description>玩客云，还有好多名字：赚钱宝、老母鸡、网心云，这里都指型号ws1608的那个小机器。
这机器现在pdd、闲鱼上的价格稳定在30rmb左右，但闲鱼上都要求10个起包邮，咱也不是矿场，买一两个回来玩玩就够了，所以我更推荐从pdd入手。
这机器玩了几个星期，目前来看，就能刷俩固件。第一刷armbian，然后根据自己需要手搓各种服务（file browser/qbittorrent/samba/alist/ddns-go/docker/typecho/cups/home assistant/&amp;hellip;），或者装casaos这种打包好各种服务的轻系统。第二刷openwrt当旁路由。也有很多人在armbian基础上再装openmediavault，但我根据omv官方的文档尝试了几次，不管是6.1内核还是5.9内核的固件，都没成功。
玩这种小设备肯定得去恩山论坛了，但论坛这种资源分享模式实在是太old school了，我不太喜欢，因为找资源太累。所以这里直接分享我用下来非常稳定的armbian和openwrt的两个固件下载地址。
armbian固件地址:https://github.com/hzyitc/armbian-onecloud
这个repo是根据上游armbian/build编译的玩客云专用固件。这里重点说下，固件名称中带burn字样的是线刷版本，刷入机内emmc；带minimal字样的是精简版。我用下来非常稳定。
openwrt固件地址：https://cloud.189.cn/t/rAv6v2ENnmAn （访问码：6hhb）
这个是恩山论坛里id:2224758988的用户分享的版本，我短暂体验了几天，也很稳定。如果上面这个链接失效，可以去【原帖地址】这里找。我对旁路由这种使用模式并不是很满意，所以用了几天以后就撤掉了。</description>
    </item>
    
    <item>
      <title>Linux下安装File Browser</title>
      <link>https://ruohai.wang/202307/filebrowser-installation-guide/</link>
      <pubDate>Fri, 14 Jul 2023 23:00:29 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/filebrowser-installation-guide/</guid>
      <description>第一步：新建安装目录
mkdir /usr/local/filebrowser 第二步：根据自己的硬件平台从【官方github repo】下载对应版本的安装包，这里以armv7为例。
# 进入安装文件夹 cd /usr/local/filebrowser # 下载安装包 wget https://github.com/filebrowser/filebrowser/releases/download/v2.23.0/linux-armv7-filebrowser.tar.gz # 解压 tar -zxvf linux-armv7-filebrowser.tar.gz 第三步：在安装目录/usr/local/filebrowser下新建config.json，添加配置信息。
# 创建配置文件 nano config.json 添加以下内容。其中root参数用来指定fireborwser展示的根目录，比如设定为/home，则webui中只能看到/home目录下的内容。
{ &amp;#34;port&amp;#34;: 8600, &amp;#34;address&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;root&amp;#34;: &amp;#34;/&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/usr/local/filebrowser/filebrowser.db&amp;#34;, &amp;#34;log&amp;#34;: &amp;#34;/var/log/filebrowser.log&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34; } 第四步：把filebrowser添加到systemd服务。
# 创建配置文件 nano /etc/systemd/system/filebrowser.service 添加如下内容后保存退出。
[Unit] Description=The filebrowser Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/filebrowser/filebrowser -c /usr/local/filebrowser/config.json ExecStop=/bin/killall filebrowser PrivateTmp=true [Install] WantedBy=multi-user.target 第五步：systemd重载服务并设置开机启动
# 重载服务 systemctl daemon-reload # 启动filebrowser systemctl start filebrowser.service # 设置开机启动 systemctl enable filebrowser.</description>
    </item>
    
    <item>
      <title>Linux下Bash Shell开启命令自动补全</title>
      <link>https://ruohai.wang/202307/bash-completion-setup/</link>
      <pubDate>Fri, 14 Jul 2023 22:51:22 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/bash-completion-setup/</guid>
      <description>如果只是对单个用户生效，那下文中的/etc/bash.bashrc都要调整为~/.bashrc。
第一步：安装bash-completion。
apt install bash-completion 第二步：查看/etc/bash.bashrc文件中是否适配。
# 打开bash的用户配置文件 nano /etc/bash.bashrc 查看是否有下面这段内容，如果没有就添加到最后，保存退出。这段代码的意思是判断系统是否安装了bash_completion，如果安装则启用自动补全功能。
if ! shopt -oq posix; then if [ -f /usr/share/bash-completion/bash_completion ]; then . /usr/share/bash-completion/bash_completion elif [ -f /etc/bash_completion ]; then . /etc/bash_completion fi fi 第三步：重新加载用户的bash配置信息。
source /etc/bash.bashrc </description>
    </item>
    
    <item>
      <title>Linux下修改SSH默认端口</title>
      <link>https://ruohai.wang/202307/set-new-ssh-port/</link>
      <pubDate>Fri, 14 Jul 2023 22:28:56 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/set-new-ssh-port/</guid>
      <description>前言 这是一篇从搬瓦工vps的typecho搬过来的文章。对内容和格式做了轻微调整。
写这篇文章是因为前两天想动手改linux主机的默认ssh端口，但发现无论怎么改sshd_config文件都无济于事。简中互联网上以关键字ssh、修改端口之类搜出来的文章都千篇一律，再搜端口修改以后无效，出来的内容都说因为selinux。我就在这这个错误的方向上折腾了好久，但实际我的主机压根就没开启selinux。
最后用google搜英文关键字，才找到原因：systemd环境下ssh分为ssh.socket和ssh.service，这俩不同服务的配置文件完全不同。而较新的debian/ubuntu系统用的是ssh.socket。
找到问题原因以后就很好解决了，这里做简单记录。
查看ssh服务类型 要修改ssh默认端口，首先要分清楚自己linux机器的ssh是ssh.socket还是ssh.service。
systemctl status sshd 根据图中出现的ssh.socket字样区分。 ssh.service ssh.service的端口修改很简单，打开配置文件
nano /etc/ssh/sshd_config 找到port的配置进行修改
# 找到这条，默认是注释掉的，这里去掉注释 Port 22 # 添加一行自定义的端口 Port 12345 然后重启ssh服务即可
systemctl restart sshd 测试新端口OK以后，再注释掉旧端口然后重启sshd即可。
ssh.socket ssh.socket配置文件在/lib/systemd/system/ssh.socket，但我建议你千万不要去动原始文件。首先是这个配置文件会在更新openssh的时候被覆盖掉，其次在ssh.socket运行状态下修改配置文件，会导致ssh.socket服务出现异常（停止工作而且无法接受新的连接）。所以正确的配置方式如下
# 新建配置文件目录 mkdir -p /etc/systemd/system/ssh.socket.d 新建配置文件并写入监听端口信息
cat &amp;gt;/etc/systemd/system/ssh.socket.d/listen.conf &amp;lt;&amp;lt;EOF [Socket] # 这一栏需要保留，用来覆盖原配置文件中的22端口 ListenStream= # 这一栏填写新的ssh端口 ListenStream=1234 EOF 最后就是systemd重载服务并重启ssh了。
# 重载服务 systemctl daemon-reload # 重启ssh systemctl restart ssh 这个配置方法的参考来源：
https://askubuntu.com/questions/1439461/ssh-default-port-not-changing-ubuntu-22-10 https://discourse.ubuntu.com/t/sshd-now-uses-socket-based-activation-ubuntu-22-10-and-later/30189/6 从ssh.socket切换到ssh.service 讲真，我虽然已经掌握在ssh.socket模式下配置新端口的方法，但实际操作过程中还是碰到了ssh.socket异常的问题。那不如直接从ssh.socket切换到ssh.service吧！
# 禁用ssh.socket服务 systemctl disable --now ssh.socket # 启用ssh.</description>
    </item>
    
    <item>
      <title>Linux下用Hugo搭建博客并部署到Github Pages</title>
      <link>https://ruohai.wang/202307/hugo-setup-and-deploy-to-github/</link>
      <pubDate>Fri, 14 Jul 2023 15:15:15 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/hugo-setup-and-deploy-to-github/</guid>
      <description>前言 手上好几台armv7平台的电子垃圾，没错说的就是迅雷赚钱宝二代（ws1508）和迅雷玩客云（ws1608）。总琢磨着让这些电子垃圾在它们的生命末期发挥最后的光和热，给它们刷armbian、刷openwrt。正好我的搬瓦工vps还剩半个月要到期了，49.99刀/年的费用，对于现在的我也算是一笔不小的支出。能省则省，所以准备博客搬家。有很多捡垃圾玩家会把博客跑在自己的arm小主机上，但国内的网络环境下，自建服务器的备案和80/443端口解封根本无解，只能做到url:port进行公网访问，但这纯粹就是自娱自乐嘛。最后还是决定把博客部署到免费的github pages。
既然要用github pages，那只能用静态博客，无论是hexo、hugo还是jekyll，都需要一个本地的编译环境。既然如此，正好尝试一下在赚钱宝二代（ws1508）这台设备上安装hugo。
玩客云（ws1608）和赚钱宝二代（ws1508）主要硬件配置上一模一样，同样适用这个教程。
其实全平台都适用这个教程，只需要把apt install换成自己系统的版本就行了。
前期准备 一台功能正常的电脑/主机，linux/windows/macos/&amp;hellip;。赚钱宝二代的硬件是32位armv7，系统是armbian-bookworn github账号，假定用户名jack，并新建repo取名为jack.github.io 安装hugo 安装git apt install git 安装hugo。在armbian-bookworm的仓库里有hugo，在当下这个日期（2023-07-14），仓库里的hugo版本是v0.111.3，是2023年3月发布的。github hugo官方仓库的版本已经是v0.115.3。虽然都说喜新厌旧，但这不是巧了么，我就用armbian仓库的旧版。 apt install hugo 2023-07-17 update 这里补充一下通过下载官方github repo的二进制包安装的方法。
1-新建安装目录
mkdir -p /usr/local/hugo 2-到官方github repo下载对应自己硬件平台的包，我的设备是赚钱宝二代（ws1508），老朋友了，armv7。
cd /usr/local/hugowget https://github.com/gohugoio/hugo/releases/download/v0.115.3/hugo_0.115.3_linux-arm.tar.gztar -zxvf hugo_0.115.3_linux-arm.tar.gz 3-解压以后得到的hugo安装包默认就有可执行权限，接下去要做的是把hugo添加到环境变量。我这里把环境变量配置到~/.bashrc，仅对当前用户生效。如果要全局生效，可以添加到/etc/profile。
nano ~/.bashrc 末尾添加一行。
export PATH=$PATH:/usr/local/hugo 保存退出，重载配置使生效
source ~/.bashrc 4-到这部就安装完成了。执行以下命令查看是否成功。
hugo -h 如果安装成功的话，会出现hugo的帮助手册。
创建博客目录，下载主题 # 为方便管理在根目录新建data文件夹mkdir /data# 在data目录下创建博客目录cd data/hugo new site blog# 进入blog目录，进行git初始化cd blog/git init# 下载自己喜欢的主题（这里用m10c为例）git clone https://github.</description>
    </item>
    
    <item>
      <title>Linux下用Speedtest CLI进行网络测速</title>
      <link>https://ruohai.wang/202307/speedtest-cli-setup/</link>
      <pubDate>Fri, 14 Jul 2023 14:57:37 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/speedtest-cli-setup/</guid>
      <description>前言 想要linux下测一下网速，机器是赚钱宝二代（ws1508），硬件是32位armv7，系统是armbian-bookworm。
debian的仓库里有一个speedtest-cli的包，一开始我用的就是这个。但注意这个包不是speedtest官方在维护，不是官方的！这也解释了为什么我之前用debian仓库里的speedtest-cli进行测速的时候，它自动选择的服务器都是hongkong或者taiwan，导致测速完全不准。而且通过命令speedtest --list|grep China也搜不出任何结果，一度离谱到speedtest --list出来只有taiwan的服务器。
后来网上搜了一圈【找到了原因】，才知道这个包不是speedtest官方的。
linux上真的是好多坑啊，一个简单的网络测速都是如此。
好了，现在记录一下怎么安装speedtest官方的工具来完成linux下的网络测速。
安装 找到【speedtest官方网站】，首页就有安装步骤。 # 下载sh脚本 curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash # 安装 apt install speedtest 查询可用的测速服务器 先speedtest -h看一下使用手册。 Usage: speedtest [&amp;lt;options&amp;gt;] -h, --help Print usage information -V, --version Print version number -L, --servers List nearest servers -s, --server-id=# Specify a server from the server list using its id -I, --interface=ARG Attempt to bind to the specified interface when connecting to servers -i, --ip=ARG Attempt to bind to the specified IP address when connecting to servers -o, --host=ARG Specify a server, from the server list, using its host&amp;#39;s fully qualified domain name -p, --progress=yes|no Enable or disable progress bar (Note: only available for &amp;#39;human-readable&amp;#39; or &amp;#39;json&amp;#39; and defaults to yes when interactive) -P, --precision=# Number of decimals to use (0-8, default=2) -f, --format=ARG Output format (see below for valid formats) --progress-update-interval=# Progress update interval (100-1000 milliseconds) -u, --unit[=ARG] Output unit for displaying speeds (Note: this is only applicable for ‘human-readable’ output format and the default unit is Mbps) -a Shortcut for [-u auto-decimal-bits] -A Shortcut for [-u auto-decimal-bytes] -b Shortcut for [-u auto-binary-bits] -B Shortcut for [-u auto-binary-bytes] --selection-details Show server selection details --ca-certificate=ARG CA Certificate bundle path -v Logging verbosity.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://ruohai.wang/202307/hello-world/</link>
      <pubDate>Tue, 27 Jun 2023 02:38:42 +0800</pubDate>
      
      <guid>https://ruohai.wang/202307/hello-world/</guid>
      <description>2023/06/27，凌晨2:38，终于在armbian上手搓了typecho，两次。
第一次主要是试错，手搓成功以后重新刷机按照刚刚实践成功的经验再搓一次，过程中因为有些配置调整，依然碰到了不少的问题。不过高兴的是，第二次又搓成功惹。
搞定了，睡觉。😄</description>
    </item>
    
  </channel>
</rss>
