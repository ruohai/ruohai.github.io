<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>202411s on 喵ฅ^•ﻌ•^ฅ</title>
    <link>https://ruohai.wang/202411/</link>
    <description>Recent content in 202411s on 喵ฅ^•ﻌ•^ฅ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Nov 2024 05:12:34 +0000</lastBuildDate><atom:link href="https://ruohai.wang/202411/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PVE基础操作之：虚拟机的备份和还原</title>
      <link>https://ruohai.wang/202411/pve-backup-and-restore-virt-machine/</link>
      <pubDate>Thu, 14 Nov 2024 05:12:34 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/pve-backup-and-restore-virt-machine/</guid>
      <description>前言 pve上操作虚拟机的备份与还原都可以通过web ui进行操作，非常的简单方便。
备份 在pve的webui中点击需要备份的虚拟机，依次点击备份——立即备份
在弹窗中进行备份的自定义设置。基本上啥都不需要改，全部用默认参数即可。
点击立即备份，会有新弹窗显示备份进度，耐心等待知道出现TASK OK就表示备份完成。
在虚拟机的备份一栏中可以看到本机的备份文件。
在本地存储的备份一栏中也可以看到所有虚拟机的备份文件。
到此就完成了虚拟机的备份。
还原 在pve的webui中，可以通过虚拟机的备份入口，或者从pve目录的备份入口，找到需要还原的虚拟机备份文件，点击还原。
在弹出的窗口中设定还原虚拟机时的参数。
存储：指定虚拟机虚拟磁盘文件的存放位置，留空默认就是和备份虚拟机的存储位置相同 VM：指定虚拟机的vmid，默认即可 唯一：如果用同一个备份文件部署多个虚拟机，需要勾选此项用来生成唯一mac信息，避免局域网内mac地址冲突 其它参数都用默认即可 点击还原后会弹窗显示任务进度，依然是等到出现TASK OK就表明还原成功。
到此就完成了虚拟机的还原。
喝杯奶茶 </description>
    </item>
    
    <item>
      <title>升腾C92开启USB3.0的设置</title>
      <link>https://ruohai.wang/202411/centerm-c92-enable-usb3/</link>
      <pubDate>Wed, 13 Nov 2024 12:30:48 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/centerm-c92-enable-usb3/</guid>
      <description>前言 手上的升腾c92/J1900刷pve跑虚拟机都有两周了才发现自带的usb3.0接口竟然一直工作在usb2.0模式下，所以赶紧网上搜下一下怎么开启usb3.0，写篇文章做个记录。
设置 首先确认自己的机器usb3.0功能是否已经开启
lsusb -t 如下图，如果是5000M则表明已经开启usb3.0功能，如果都是480M或者更低的数字则说明没有开启。
开机按F2进入bios界面，调整以下设置项来开启usb3.0支持
Chipset-&amp;gt;South Bridge-&amp;gt;USB Configuration-&amp;gt;USB2.0(EHCI&amp;gt; Support 修改为Disabled Chipset-&amp;gt;South Bridge-&amp;gt;USB Configuration-&amp;gt;XHCI Mode 修改为Enabled 在参考文章中，作者还提供了开启cpu睿频、来电自启的设置方式，有需要的可以到原文中查看。
参考文章 升腾C92: BIOS开启USB3.0方法 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>使用acme.sh通过dns验证方式获取Let&#39;s Encrypt证书</title>
      <link>https://ruohai.wang/202411/acmesh-get-lets-encrypt-cert/</link>
      <pubDate>Tue, 12 Nov 2024 11:24:07 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/acmesh-get-lets-encrypt-cert/</guid>
      <description>前言 之前已经写过一篇相关主题的文章，但那片文章主要内容都是如何debug，最后搞得自己想要重新部署acme.sh的时候依然一头雾水，所以重写一篇。
acme.sh通过认证的方式有两种
http：需要在网站更目录放置文件来验证域名的所有权 dns：需要有权限在dns解析中添加记录来验证域名的所有权 我这里选择的是第2种验证方式。
操作过程 通过acme.sh通过dns验证的方式获取let&amp;rsquo;s encrypt证书的方式可以分为以下几步：
获取和安装acme.sh 通过dns验证 更新证书 以下分步骤讲解。
第一步：获取和安装acme.sh
通过以下命令自动获取 &amp;amp; 安装，root或者non-root用户都可以。
curl https://get.acme.sh | sh -s email=my@example.com # 或者 wget -O - https://get.acme.sh | sh -s email=my@example.com tips： 因为网络原因大概率会提示网络链接错误，需要自己解决网络问题 脚本执行完成后，默认会把acme.sh添加为alias，但需要手动重载一下用户配置文件才会生效 第二步：通过dns验证
我用的是阿里云的dns解析服务，所以需要先配置阿里云api key信息。其它dns服务商的配置参数可以翻阅参考文章中的第二篇文章。
export Ali_Key=&amp;#34;&amp;lt;key&amp;gt;&amp;#34; export Ali_Secret=&amp;#34;&amp;lt;secret&amp;gt;&amp;#34; 然后执行dns验证
acme.sh --issue --dns dns_ali -d example.com -d *.example.com tips: dns_ali显而易见是指阿里云dns服务，其它dns服务商的api名字可以通过查询参考文章二获得 -d example.com生成单域名证书，-d *.example.com生成泛域名证书，但泛域名证书容易滥用，需要注意网络安全防护 第三步：更新证书
完成dns验证以后，就可以更新证书了。
acme.sh --renew -d example.com -d *.example.com 更新成功之后，把fullchain.cer和example.com.key两个文件复制到web服务器的指定证书目录并完成配置即可。
参考文章 acme.sh wiki中文版 How to use DNS API 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>PVE基础操作之：完成装机后的优化/初始化设置</title>
      <link>https://ruohai.wang/202411/pve-initial-config-guide/</link>
      <pubDate>Tue, 12 Nov 2024 09:02:22 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/pve-initial-config-guide/</guid>
      <description>前言 pve系统的装机没什么难度，和普通debian装机没什么区别，按照默认设置一路下一步就行了，就算有不懂的地方网上也有一大堆教程。
pve装完系统之后就可以登陆webui了，到这一步还有许多设置需要优化，或者叫初始化：
删除local-lvm分区 换源 关闭订阅弹窗提醒 很多次装完pve以后我都要上网找教程，所以自己写篇博客做个记录。
删除local-lvm分区 pve装完系统以后默认会有一个local分区和一个local-lvm分区，默认这俩分区各司其职，比如local用来存镜像文件（iso）、local-lvm用来存磁盘镜像，但这样的结果就是本意是好的，但实际体验反而很不好，比如导致一个分区不够用但另一个分区空荡荡。所以第一步就是删除local-lvm分区。操作分成三步：
第一步：在webui上通过shell访问pve，然后输入以下命令
# 删除分区 lvremove /dev/pve/data # 提示是否删除，敲y Do you really want to remove active logical volume pve/data? [y/n]: y # 重新分配空间 lvextend -rl +100%FREE /dev/pve/root 第二步：在webui中删除local-lvm分区
网图，我的pve系统这个分区已经删除了，所有这里借用alay.cc的图片 第三步：调整local分区的用途
如果你的pve只有一个local分区（或者叫local目录），默认这个分区是不能存放磁盘镜像（也就是虚拟机要用到虚拟磁盘）的，在删除local-lvm分区以后，需要把这个功能添加到local分区。
在内容一栏中，把所有功能都加上即可。
到此就完成了分区空间的合并。
换源 pve默认源是proxmox收费源，不订阅的话无法更新，所以需要更换其它的免费源。
pve需要替换的源一共有三个：
debian proxmox ve ceph 第一步：debian换源。
依然是webui界面通过shell访问pve主机
# 编辑debian源的文件 nano /etc/apt/sources.list 将默认的内容全部注释
#deb http://ftp.debian.org/debian bookworm main contrib #deb http://ftp.debian.org/debian bookworm-updates main contrib # security updates #deb http://security.debian.org bookworm-security main contrib 然后粘贴国内的源，我这里选择用清华的源</description>
    </item>
    
    <item>
      <title>Syncthing增量备份模式的设置</title>
      <link>https://ruohai.wang/202411/syncthing-incremental-backup-config-guide/</link>
      <pubDate>Wed, 06 Nov 2024 10:01:46 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/syncthing-incremental-backup-config-guide/</guid>
      <description>前言 syncthing一般情况我们都用做两个文件夹的双向同步，也就是A设备上的a文件夹和B设备上的b文件夹保持双向完全同步，无论是B设备上的文件发生了变化，还是A设备上的文件发生了变化，都会立刻同步到另一个设备上。
但有时候我们只想要单向同步，也就是增量备份。
场景区分 &amp;amp; 配置 单向同步的增量备份模式下，两个设备就有了主从之分，主动发起备份的主设备和被动接收备份的从设备。而且单向备份的场景也可以分为两种情况：
场景一：完全单向同步——主设备增删改，从设备同步增删改，反向不同步。
实际应用场景：一个主nas多个备份nas，主nas所有操作同步到备份nas。
配置操作如下：
先在主设备的同步文件夹点击编辑
然后在弹窗的高级标签页中，文件夹类型选择仅发送，然后保存。
接着在从设备的同步文件夹点击选项
在弹窗的高级标签页中，文件夹类型选择仅接收，然后保存。
到这里就完成了完全单向同步的配置。
场景二：无视删除操作——主设备增删改，从设备同步增改，不删，反向不同步。
实际应用场景：把手机相册里的照片视频用syncthing同步到nas以后就清空手机相册，但nas里需要保留这些照片视频。
配置操作的前面4步和场景一中完全一致，以下是需要增加的配置。
因为是从设备需要忽略主设备上的删除操作，所以需要在从设备的webui页面，依次点击操作——高级
在弹窗中点击文件夹，然后选择需要配置的文件夹。
在出现的一大堆配置项中，找到Ignore Delete，打勾，然后保存。
到这里就完成无视删除操作的配置。
参考文章： Syncthging WiKi: ignoreDelete 喝杯奶茶 </description>
    </item>
    
    <item>
      <title>Syncthing的安装配置与使用的简单教程</title>
      <link>https://ruohai.wang/202411/syncthing-install-and-config-guide/</link>
      <pubDate>Wed, 06 Nov 2024 05:07:39 +0000</pubDate>
      
      <guid>https://ruohai.wang/202411/syncthing-install-and-config-guide/</guid>
      <description>前言 之前已经写过几篇syncthing的安装配置文章，但是时间久远，而且当时用的图床也都挂了 &amp;amp; 图片没有备份所以没法恢复，索性重新写一篇。
安装&amp;amp;启动 我用的系统是debian，软件仓库里就有syncthing，可能版本稍微旧了一点但不影响使用
sudo apt install synchting 安装好以后启动syncthing时需要指定是哪个用户来跑syncthing，如果你是root一把梭玩家，那指定root即可，否则就指定一个non-root用户。我这里以ruohai为例。
#以ruohai用户运行syncthing并设置开机启动 sudo systemctl --enable syncthing@ruohai.service 初始化配置 syncthing默认的webui的访问端口是8384，默认的通信监听端口是22000（和其它syncthing之间进行通信），所以如果有防火墙的话记得放行端口，我的防火墙管理程序是ufw，设置如下。
# 对192.168.1.0/24这个网段内的所有设备开放访问 sudo ufw allow proto tcp from 192.168.1.0/24 to any port 8384,22000 但是放行端口以后暂时还不能访问synchting的webui，因为syncthing默认只监听本机的网络请求，也就是127.0.0.1，需要手动修改配置文件，配置文件的默认路径~/.config/syncthing/config.xml。
# 用nano或者vim编辑配置文件 nano /home/ruohai/.config/syncthing/config.xml 找到gui的配置部分，修改address中的127.0.0.1为0.0.0.0，就可以监听来自所有网络的请求了。
修改完以后记得重启synchting服务
sudo systemctl restart syncthing@ruohai.service 到这里就完成syncthing的所有初始化配置了，接下去就可以访问syncthing的webui开始使用。
webui配置 在浏览器中访问http://host_ip:8384就可以打开syncthing的webui了。
首先弹窗出来的信息就是是否允许发送匿名使用报告，根据自己喜好选择即可。
点掉弹窗以后看到红色危险提醒，因为默认没有设置webui的访问账户，所以可以匿名访问blabla之类，所以需要设置一下访问账户信息。
点击设置，在【图形用户界面/GUI】标签页设置账户密码。
保存后浏览器会弹窗要求账户验证，输入刚刚设置的账户信息即可。
添加远程设备 多个设备之间想通过synchting来同步文件夹，首先要互相添加远程设备。
假定在LMDE设备上的syncthing上查看设备id。
获取到设备ID串号和一个二维码
假定在另一个Photo的机器上的【远程设备】设置区域，点击【添加远程设备】
在窗口中输入设备ID、设备名称后保存。
然后在LMDE设备上会弹窗显示新设备添加请求，选择添加设备即完成两个设备的绑定。
弹窗显示详细的设备信息和简单的配置项，无须修改，直接点击【保存】即可。
到此就完成了两个设备的绑定。
文件夹同步 完成两个设备的syncthing绑定以后，默认的同步文件夹是Default Folder，路径是~/Sync。
以此为例，我们将LMDE设备的Default Folder共享给设备Photo并进行同步。
第一步：在LMDE设备中将文件夹共享给Photo
点击选项
在共享标签中选择共享的设备Photo
在高级标签中设定两个设备之间的同步策略
完成设置后直接保存即可。
第二步：在Photo中接受共享
出现弹窗提示有文件夹共享请求，点击添加</description>
    </item>
    
  </channel>
</rss>
